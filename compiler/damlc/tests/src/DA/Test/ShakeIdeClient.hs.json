[
  {
    "id" : "10022ab1-bae1-4f38-a016-279bff7a2341",
    "prId" : 6440,
    "comments" : [
      {
        "id" : "51749e4c-8241-4244-815b-df080dafa8db",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Are you intending to merge it like this or is this just temporary to see how far CI gets? I find stack traces in scenarios to be quite useful.",
        "createdAt" : "2020-06-24T12:52:55Z",
        "updatedAt" : "2020-06-30T15:19:02Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "b28835f4-c7c7-4cc5-b231-5ebb00643772",
        "parentId" : "51749e4c-8241-4244-815b-df080dafa8db",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "I agree regarding stack traces in scenarios and I'll make sure they stay when I do a detailed review of this PR.",
        "createdAt" : "2020-06-24T13:08:20Z",
        "updatedAt" : "2020-06-30T15:19:02Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "13392106-b5ff-4ee6-8d12-046e037dc687",
        "parentId" : "51749e4c-8241-4244-815b-df080dafa8db",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "well.. I guess not.\r\nBut this was the only test failure I got in the ANF branch. And I spent a couple of fruitless hours this morning trying to figure out what had happened to the stack trace. But in the end I gave up and did what you see above.\r\n\r\nThe trouble with the stack traces is just they are so broken. And they get broken further by inlining and the work I've been doing on speedy. I just wonder if it might be better to completely remove them at the moment and implement them from the ground up.\r\n\r\nAnd when we do that, we should have unit tests!\r\nI find the shake tests so inscrutable. (for debugging at least)",
        "createdAt" : "2020-06-24T13:46:53Z",
        "updatedAt" : "2020-06-30T15:19:02Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "c29d954c-81ca-4892-9548-ad04c4730b55",
        "parentId" : "51749e4c-8241-4244-815b-df080dafa8db",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "I going to debug why the stack trace gets lost in this example...",
        "createdAt" : "2020-06-25T10:30:45Z",
        "updatedAt" : "2020-06-30T15:19:02Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "254534bc-4d04-4fe4-99fa-929eb1644365",
        "parentId" : "51749e4c-8241-4244-815b-df080dafa8db",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "this is fixed now",
        "createdAt" : "2020-06-26T09:05:58Z",
        "updatedAt" : "2020-06-30T15:19:02Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "f1ca0fa6575631a0602ea895e0155fae12fd986b",
    "line" : null,
    "diffHunk" : "@@ -1140,7 +1140,8 @@ scenarioTests mbScenarioService = Tasty.testGroup \"Scenario tests\"\n           let vr = VRScenario foo \"test\"\n           setFilesOfInterest [foo]\n           setOpenVirtualResources [vr]\n-          expectVirtualResourceRegex vr \"Stack trace:.*- boom.*Foo:3:1.*- test.*Foo:5:1\"\n+          -- We dont get a stack trace anymore\n+          expectVirtualResourceRegex vr \"Aborted:  BOOM\" --\"Stack trace:.*- boom.*Foo:3:1.*- test.*Foo:5:1\""
  },
  {
    "id" : "668f7585-e616-439c-88cb-9df96b8f3d16",
    "prId" : 6423,
    "comments" : [
      {
        "id" : "1445a1f5-5426-40b1-987b-3869806d514c",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "I suggest we completely delete this code. This hint has never done anything helpful for us and I doubt it will ever do.",
        "createdAt" : "2020-06-22T08:36:26Z",
        "updatedAt" : "2020-06-22T08:36:35Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "8d1d4fdf697ac5c029167f8d8e4fd28d3f308c8f",
    "line" : 51,
    "diffHunk" : "@@ -299,29 +299,31 @@ dlintSmokeTests mbScenarioService = Tasty.testGroup \"Dlint smoke tests\"\n             setFilesOfInterest [foo]\n             expectNoErrors\n             expectDiagnostic DsInfo (foo, 2, 0) \"Warning: Use fewer imports\"\n-    ,  testCase' \"Reduce duplication\" $ do\n-            foo <- makeFile \"Foo.daml\" $ T.unlines\n-                [ \"daml 1.2\"\n-                , \"module Foo where\"\n-                , \"import DA.List\"\n-                , \"testSort5 = scenario do\"\n-                , \"    let l = [ (2, const \\\"D\\\"), (1, const \\\"A\\\"), (1, const \\\"B\\\"), (3, const \\\"E\\\"), (1, const \\\"C\\\") ]\"\n-                , \"        m = sortOn fst l\"\n-                , \"        n = map fst m\"\n-                , \"    assert $ n == [1, 1, 1, 2, 3]\"\n-                , \"    let o = map (flip snd ()) m\"\n-                , \"    assert $ o == [\\\"A\\\", \\\"B\\\", \\\"C\\\", \\\"D\\\", \\\"E\\\"]\"\n-                , \"testSort4 = scenario do\"\n-                , \"    let l = [ (2, const \\\"D\\\"), (1, const \\\"A\\\"), (1, const \\\"B\\\"), (3, const \\\"E\\\"), (1, const \\\"C\\\") ]\"\n-                , \"        m = sortBy (\\\\x y -> compare (fst x) (fst y)) l\"\n-                , \"        n = map fst m\"\n-                , \"    assert $ n == [1, 1, 1, 2, 3]\"\n-                , \"    let o = map (flip snd ()) m\"\n-                , \"    assert $ o == [\\\"A\\\", \\\"B\\\", \\\"C\\\", \\\"D\\\", \\\"E\\\"]\"\n-                ]\n-            setFilesOfInterest [foo]\n-            expectNoErrors\n-            expectDiagnostic DsInfo (foo, 7, 4) \"Suggestion: Reduce duplication\"\n+    -- This hint is now disabled. See PR\n+    -- https://github.com/digital-asset/daml/pull/6423 for details.\n+    -- ,  testCase' \"Reduce duplication\" $ do\n+    --         foo <- makeFile \"Foo.daml\" $ T.unlines\n+    --             [ \"daml 1.2\"\n+    --             , \"module Foo where\"\n+    --             , \"import DA.List\"\n+    --             , \"testSort5 = scenario do\"\n+    --             , \"    let l = [ (2, const \\\"D\\\"), (1, const \\\"A\\\"), (1, const \\\"B\\\"), (3, const \\\"E\\\"), (1, const \\\"C\\\") ]\"\n+    --             , \"        m = sortOn fst l\"\n+    --             , \"        n = map fst m\"\n+    --             , \"    assert $ n == [1, 1, 1, 2, 3]\"\n+    --             , \"    let o = map (flip snd ()) m\"\n+    --             , \"    assert $ o == [\\\"A\\\", \\\"B\\\", \\\"C\\\", \\\"D\\\", \\\"E\\\"]\"\n+    --             , \"testSort4 = scenario do\"\n+    --             , \"    let l = [ (2, const \\\"D\\\"), (1, const \\\"A\\\"), (1, const \\\"B\\\"), (3, const \\\"E\\\"), (1, const \\\"C\\\") ]\"\n+    --             , \"        m = sortBy (\\\\x y -> compare (fst x) (fst y)) l\"\n+    --             , \"        n = map fst m\"\n+    --             , \"    assert $ n == [1, 1, 1, 2, 3]\"\n+    --             , \"    let o = map (flip snd ()) m\"\n+    --             , \"    assert $ o == [\\\"A\\\", \\\"B\\\", \\\"C\\\", \\\"D\\\", \\\"E\\\"]\"\n+    --             ]\n+    --         setFilesOfInterest [foo]\n+    --         expectNoErrors\n+    --         expectDiagnostic DsInfo (foo, 7, 4) \"Suggestion: Reduce duplication\""
  },
  {
    "id" : "d27b3bc1-393a-4ec3-94e4-f91e9d3dfb6e",
    "prId" : 4807,
    "comments" : [
      {
        "id" : "e90fb451-da27-44a4-b232-3643dc01117a",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "I love multi-line suggestions now.\r\n```suggestion\r\n                , \"go = forA_ [0,1] $ \\\\x -> do\"\r\n```",
        "createdAt" : "2020-03-04T15:33:34Z",
        "updatedAt" : "2020-03-04T15:45:32Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "c72d3341b427eb431e7830ecc69effad10916d2f",
    "line" : null,
    "diffHunk" : "@@ -1121,6 +1121,35 @@ scenarioTests mbScenarioService = Tasty.testGroup \"Scenario tests\"\n           setFilesOfInterest [foo]\n           setOpenVirtualResources [vr]\n           expectVirtualResourceRegex vr \"Stack trace:.*- boom.*Foo:3:1.*- test.*Foo:5:1\"\n+    , testCase' \"debug is lazy\" $ do\n+        let goodScenario =\n+                [ \"daml 1.2\"\n+                , \"module LazyDebug where\"\n+                , \"import DA.Foldable\"\n+                , \"import DA.Action.State\"\n+\n+                , \"test = scenario $ pure $ runState go 0\"\n+                , \"go : State Int ()\"\n+                , \"go = do\"\n+                , \"  forA_ [0,1] $ \\\\x -> do\""
  },
  {
    "id" : "ba1c5223-a4f5-4784-91df-90a2560a41fc",
    "prId" : 4692,
    "comments" : [
      {
        "id" : "1ab7fbb9-34a6-433b-a5aa-dc72548d14cf",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "I must be missing something: How was there a \"Missing daml version\" error in the past?",
        "createdAt" : "2020-02-25T20:03:00Z",
        "updatedAt" : "2020-02-25T20:03:22Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "687d2a10-f4bc-4cd9-9b10-813ff9b9648c",
        "parentId" : "1ab7fbb9-34a6-433b-a5aa-dc72548d14cf",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "well there is no DAML version if you replace the content by `???` :slightly_smiling_face: ",
        "createdAt" : "2020-02-25T20:13:25Z",
        "updatedAt" : "2020-02-26T08:09:38Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "0bc27699-2bac-4a97-ac1a-dd5756fd6703",
        "parentId" : "1ab7fbb9-34a6-433b-a5aa-dc72548d14cf",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "That is exactly the thing I missed. Thanks for pointing me at it.",
        "createdAt" : "2020-02-26T09:34:17Z",
        "updatedAt" : "2020-02-26T09:34:24Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "d678f3e53ceed28874f751036b13ade0b4d45b96",
    "line" : 4,
    "diffHunk" : "@@ -227,7 +227,7 @@ basicTests mbScenarioService = Tasty.testGroup \"Basic tests\"\n             setFilesOfInterest [a]\n             expectWarning (a,0,25) \"The import of ‘B’ is redundant\"\n             setBufferModified a \"???\"\n-            expectOneError (a,0,0) \"Missing daml version\""
  },
  {
    "id" : "c4ee7bd2-d6f0-4f85-a2bc-ee42e97f39cc",
    "prId" : 4013,
    "comments" : [
      {
        "id" : "d7293744-adff-497c-a0cf-09751724151a",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "This simply undoes the changes that I made in c65f9181459cadc3da79687571788bdbd74c4484 which were required by the regression in https://github.com/digital-asset/ghcide/issues/315. Should have taken a closer look at this back then",
        "createdAt" : "2020-01-10T16:26:10Z",
        "updatedAt" : "2020-01-10T17:35:20Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "48f24250cf3f4654f2cad4ec64a795b0a5c2274c",
    "line" : 5,
    "diffHunk" : "@@ -584,7 +584,8 @@ goToDefinitionTests mbScenarioService = Tasty.testGroup \"Go to definition tests\"\n             expectGoToDefinition (foo,2,[2..4]) Missing             -- \" : \"\n             expectGoToDefinition (foo,2,[9])    Missing             -- \"\\n\"\n             expectGoToDefinition (foo,2,[10])   Missing             -- (out of range)\n-            expectGoToDefinition (foo,3,[0..5]) (At (foo,3,0))      -- \"foo = \"\n+            expectGoToDefinition (foo,3,[0..2]) (At (foo,3,0))      -- \"foo\""
  },
  {
    "id" : "82cb15f6-1577-4c41-b65f-12c2765d7103",
    "prId" : 3865,
    "comments" : [
      {
        "id" : "58ecc6c4-5394-4859-9c83-eee67420b30b",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "I think the new behavior here actually makes more sense, we are still within the definition of `foo` at the equal sign so it makes sense for goto definition to point back to `foo`.",
        "createdAt" : "2019-12-16T15:42:18Z",
        "updatedAt" : "2019-12-17T08:26:38Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "0198df451e43c3aa103b884f1860d9b71329dc1c",
    "line" : 6,
    "diffHunk" : "@@ -584,8 +584,7 @@ goToDefinitionTests mbScenarioService = Tasty.testGroup \"Go to definition tests\"\n             expectGoToDefinition (foo,2,[2..4]) Missing             -- \" : \"\n             expectGoToDefinition (foo,2,[9])    Missing             -- \"\\n\"\n             expectGoToDefinition (foo,2,[10])   Missing             -- (out of range)\n-            expectGoToDefinition (foo,3,[0..2]) (At (foo,3,0))      -- \"foo\"\n-            expectGoToDefinition (foo,3,[3..5])  Missing             -- \" = \"\n+            expectGoToDefinition (foo,3,[0..5]) (At (foo,3,0))      -- \"foo = \""
  },
  {
    "id" : "0624cffe-d994-46cd-878d-0591947018a3",
    "prId" : 3865,
    "comments" : [
      {
        "id" : "775df352-ff27-48e7-8eca-0502b7949d73",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Same here.",
        "createdAt" : "2019-12-16T15:42:26Z",
        "updatedAt" : "2019-12-17T08:26:38Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "0198df451e43c3aa103b884f1860d9b71329dc1c",
    "line" : 16,
    "diffHunk" : "@@ -645,13 +644,11 @@ goToDefinitionTests mbScenarioService = Tasty.testGroup \"Go to definition tests\"\n                 , \"baz = 10\"\n                 ]\n             setFilesOfInterest [foo]\n-            expectGoToDefinition (foo,2,[0..2]) (At (foo,2,0))\n-            expectGoToDefinition (foo,2,[3..5]) Missing\n+            expectGoToDefinition (foo,2,[0..5]) (At (foo,2,0))"
  },
  {
    "id" : "79826ffd-ded7-4048-a0ab-38f84da82ac6",
    "prId" : 3319,
    "comments" : [
      {
        "id" : "c0aa5efa-bab3-492e-b994-120912a59d34",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "I wonder if this rule and the one after are a good idea for DAML. Currently we are mostly encouraging people to use `do` notation and not worry about this Functor, Applicative, Monad thing and these rules seem to go in the other direction.\r\n\r\nWhat do you think @hurryabit @bame-da ",
        "createdAt" : "2019-11-01T17:50:46Z",
        "updatedAt" : "2019-11-01T17:51:21Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "4e14e78218fbbd60890b2aa175475fb179cd6b5a",
    "line" : 95,
    "diffHunk" : "@@ -510,6 +498,45 @@ dlintSmokeTests mbScenarioService = Tasty.testGroup \"Dlint smoke tests\"\n             setFilesOfInterest [foo]\n             expectNoErrors\n             expectDiagnostic DsInfo (foo, 2, 8) \"Suggestion: Redundant case\"\n+    ,  testCase' \"Use let\" $ do\n+            foo <- makeFile \"Foo.daml\" $ T.unlines\n+                [ \"daml 1.2\"\n+                , \"module Foo where\"\n+                , \"foo g x = do\"\n+                , \"  y <- pure x\"\n+                , \"  g y\"\n+                ]\n+            setFilesOfInterest [foo]\n+            expectNoErrors\n+            expectDiagnostic DsInfo (foo, 2, 10) \"Suggestion: Use let\"\n+    -- `forA_` and friends not implemented yet : https://github.com/digital-asset/daml/issues/3315\n+    -- ,  testCase' \"Redundant void\" $ do\n+    --         foo <- makeFile \"Foo.daml\" $ T.unlines\n+    --             [ \"daml 1.2\"\n+    --             , \"module Foo where\"\n+    --             , \"foo g xs = void $ forA_ g xs\"\n+    --             ]\n+    --         setFilesOfInterest [foo]\n+    --         expectNoErrors\n+    --         expectDiagnostic DsInfo (foo, XX, XX) \"Suggestion: Redundant void\"\n+    ,  testCase' \"Use <$>\" $ do\n+            foo <- makeFile \"Foo.daml\" $ T.unlines\n+                [ \"daml 1.2\"\n+                , \"module Foo where\"\n+                , \"foo f g bar = do x <- bar; return (f $ g x)\""
  },
  {
    "id" : "2ff1c53d-766b-4964-a3bd-490cd72fdbfb",
    "prId" : 3230,
    "comments" : [
      {
        "id" : "ddea7b1b-8fe4-40bb-9971-8084e1996b00",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Is there a `with`-syntax version of record patterns? Given that @bame-da seems to be fairly keen on using `with` syntax in all ouf our docs (and I agree that being consistent is better), I’m a bit hesistant to suggest braces by default.",
        "createdAt" : "2019-10-18T13:40:29Z",
        "updatedAt" : "2019-10-18T15:02:09Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "4d1cc28c-a269-4b98-bfcf-52513e54c1dd",
        "parentId" : "ddea7b1b-8fe4-40bb-9971-8084e1996b00",
        "author" : null,
        "body" : "Do you mean that the suggestion (in DAML), should read `Suggest : Foo with {...}`?",
        "createdAt" : "2019-10-18T13:50:46Z",
        "updatedAt" : "2019-10-18T15:02:09Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "2d64603f-1bd4-44b6-982e-42268e9cc907",
        "parentId" : "ddea7b1b-8fe4-40bb-9971-8084e1996b00",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "I don’t know what the `with` syntax of `foo Foo {} = …` is, I guess ` foo Foo with {} = `? Doesn’t seem like an improvement to me but I’m the wrong person to comment on the beauty of with-syntax.",
        "createdAt" : "2019-10-18T13:53:11Z",
        "updatedAt" : "2019-10-18T15:02:09Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "bd6c2c5c-12eb-4db9-94cd-f2da11644093",
        "parentId" : "ddea7b1b-8fe4-40bb-9971-8084e1996b00",
        "author" : null,
        "body" : "```haskell\r\ndaml 1.2\r\ndata Foo = Foo { a : Int, b : Int}\r\nfoo : Foo -> Int\r\nfoo Foo with {a = a, b = b} = a + b\r\n```\r\n",
        "createdAt" : "2019-10-18T13:55:50Z",
        "updatedAt" : "2019-10-18T15:02:09Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "cf9905b4-4845-4d15-bd04-85760ed50898",
        "parentId" : "ddea7b1b-8fe4-40bb-9971-8084e1996b00",
        "author" : null,
        "body" : "if you need more i can refer you to a helpful blog post (disclaimer : i'm the author!) 🤣 ",
        "createdAt" : "2019-10-18T13:56:50Z",
        "updatedAt" : "2019-10-18T15:02:09Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "2eed2338-e561-4902-b859-75f6291f8476",
        "parentId" : "ddea7b1b-8fe4-40bb-9971-8084e1996b00",
        "author" : null,
        "body" : "leaving :trollface: mode for a moment, suggest letting it slide since it's only a shake ide test. the question above though - perhaps our suggestion should read ~`Suggest : Foo with {...}`~ `Suggest: Foo with {}`?",
        "createdAt" : "2019-10-18T13:57:57Z",
        "updatedAt" : "2019-10-18T15:02:09Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "7ae5cb3b-149f-4df2-93d3-f6d94802ff05",
        "parentId" : "ddea7b1b-8fe4-40bb-9971-8084e1996b00",
        "author" : null,
        "body" : "it's a minor enhancement but one more thing to maintain on the fork (not a bad thing necessarily - just undecided about that - generally try to keep it restricted to that which is mandatory e.g. different parse trees)",
        "createdAt" : "2019-10-18T13:58:57Z",
        "updatedAt" : "2019-10-18T15:02:09Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "84644ff1-201a-4dbb-87b4-a8e361f72d1f",
        "parentId" : "ddea7b1b-8fe4-40bb-9971-8084e1996b00",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "It’s not just a Shake IDE test, right? This is a rule that DLint will suggest by default.\r\n",
        "createdAt" : "2019-10-18T13:59:25Z",
        "updatedAt" : "2019-10-18T15:02:09Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "ccade831-985d-43fd-9408-7b92af561dfb",
        "parentId" : "ddea7b1b-8fe4-40bb-9971-8084e1996b00",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "`Foo with {..}` looks like a record wild card which is different from `Foo {}`.",
        "createdAt" : "2019-10-18T14:00:00Z",
        "updatedAt" : "2019-10-18T15:02:09Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "e9896dfd-cfb2-4f16-86a0-c5cc64e2e519",
        "parentId" : "ddea7b1b-8fe4-40bb-9971-8084e1996b00",
        "author" : null,
        "body" : "Sorry, I didn't mean that. Should have wrote,\r\n```\r\nFoo with {}\r\n```\r\nI'm confused though. Can we back up? What is it you are advocating should happen here? Is it that the message should read `Suggest : Foo with {}`? \r\n",
        "createdAt" : "2019-10-18T14:02:55Z",
        "updatedAt" : "2019-10-18T15:02:09Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "b4f035f3-9bf4-42b0-bf07-32c7e0d1bb9f",
        "parentId" : "ddea7b1b-8fe4-40bb-9971-8084e1996b00",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "I’m not sure I’m advocating for that but it does at least seem worth considering given that we try to guide users towards `with`-syntax.",
        "createdAt" : "2019-10-18T14:05:24Z",
        "updatedAt" : "2019-10-18T15:02:09Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "4bd380bc-c4a0-4c2f-8e2a-bd8027db8737",
        "parentId" : "ddea7b1b-8fe4-40bb-9971-8084e1996b00",
        "author" : null,
        "body" : "Ok I got you. Yes, I can get onboard with that and it's simple enough to implement. Let's do it.",
        "createdAt" : "2019-10-18T14:06:56Z",
        "updatedAt" : "2019-10-18T15:02:09Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "cfcced4d809e51ca4235f279c5f405debc501424",
    "line" : 45,
    "diffHunk" : "@@ -409,6 +409,107 @@ dlintSmokeTests mbScenarioService = Tasty.testGroup \"Dlint smoke tests\"\n             setFilesOfInterest [foo]\n             expectNoErrors\n             expectDiagnostic DsInfo (foo, 2, 11) \"Suggestion: Use ::\"\n+    ,  testCase' \"Use guards\" $ do\n+            foo <- makeFile \"Foo.daml\" $ T.unlines\n+                [ \"daml 1.2\"\n+                , \"module Foo where\"\n+                , \"truth i = if i == 1 then Some True else if i == 2 then Some False else None\"\n+                ]\n+            setFilesOfInterest [foo]\n+            expectNoErrors\n+            expectDiagnostic DsInfo (foo, 2, 0) \"Suggestion: Use guards\"\n+    ,  testCase' \"Redundant guard\" $ do\n+            foo <- makeFile \"Foo.daml\" $ T.unlines\n+                [ \"daml 1.2\"\n+                , \"module Foo where\"\n+                , \"foo i | otherwise = True\"\n+                ]\n+            setFilesOfInterest [foo]\n+            expectNoErrors\n+            expectDiagnostic DsInfo (foo, 2, 0) \"Suggestion: Redundant guard\"\n+    ,  testCase' \"Redundant where\" $ do\n+            foo <- makeFile \"Foo.daml\" $ T.unlines\n+                [ \"daml 1.2\"\n+                , \"module Foo where\"\n+                , \"foo i = i where\"\n+                ]\n+            setFilesOfInterest [foo]\n+            expectNoErrors\n+            expectDiagnostic DsInfo (foo, 2, 0) \"Suggestion: Redundant where\"\n+    ,  testCase' \"Use otherwise\" $ do\n+            foo <- makeFile \"Foo.daml\" $ T.unlines\n+                [ \"daml 1.2\"\n+                , \"module Foo where\"\n+                , \"foo i | i == 1 = True | True = False\"\n+                ]\n+            setFilesOfInterest [foo]\n+            expectNoErrors\n+            expectDiagnostic DsInfo (foo, 2, 0) \"Suggestion: Use otherwise\"\n+    ,  testCase' \"Use record patterns\" $ do\n+            foo <- makeFile \"Foo.daml\" $ T.unlines\n+                [ \"daml 1.2\"\n+                , \"module Foo where\"\n+                , \"data Foo = Foo {a : Int, b : Int, c : Int, d : Int}\"\n+                , \"foo (Foo _ _ _ _) = True\""
  },
  {
    "id" : "096ce6f0-d759-4c57-9841-814eac8fcfba",
    "prId" : 3230,
    "comments" : [
      {
        "id" : "55ed475a-48e5-40a4-b639-e29fdc74a525",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "This rule doesn’t make sense for DAML but on the other hand putting bang patterns in DAML never makes sense so I guess we might as well warn about some of them being redundant.",
        "createdAt" : "2019-10-18T13:43:41Z",
        "updatedAt" : "2019-10-18T15:02:09Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "76062560-2904-47f1-b0a4-4854b0e640d0",
        "parentId" : "55ed475a-48e5-40a4-b639-e29fdc74a525",
        "author" : null,
        "body" : "Fair. Perhaps more generally `daml-lf` conversion should fail in the presence of bangs? Or maybe we should customize the lexer to fail earlier since they \"aren't DAML\"?",
        "createdAt" : "2019-10-18T14:01:20Z",
        "updatedAt" : "2019-10-18T15:02:09Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "d71979fb-96a9-4c61-912b-2bab10111bb7",
        "parentId" : "55ed475a-48e5-40a4-b639-e29fdc74a525",
        "author" : null,
        "body" : "I'll raise an issue for this part of the discussion.",
        "createdAt" : "2019-10-18T14:09:08Z",
        "updatedAt" : "2019-10-18T15:02:09Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "cfcced4d809e51ca4235f279c5f405debc501424",
    "line" : 59,
    "diffHunk" : "@@ -409,6 +409,107 @@ dlintSmokeTests mbScenarioService = Tasty.testGroup \"Dlint smoke tests\"\n             setFilesOfInterest [foo]\n             expectNoErrors\n             expectDiagnostic DsInfo (foo, 2, 11) \"Suggestion: Use ::\"\n+    ,  testCase' \"Use guards\" $ do\n+            foo <- makeFile \"Foo.daml\" $ T.unlines\n+                [ \"daml 1.2\"\n+                , \"module Foo where\"\n+                , \"truth i = if i == 1 then Some True else if i == 2 then Some False else None\"\n+                ]\n+            setFilesOfInterest [foo]\n+            expectNoErrors\n+            expectDiagnostic DsInfo (foo, 2, 0) \"Suggestion: Use guards\"\n+    ,  testCase' \"Redundant guard\" $ do\n+            foo <- makeFile \"Foo.daml\" $ T.unlines\n+                [ \"daml 1.2\"\n+                , \"module Foo where\"\n+                , \"foo i | otherwise = True\"\n+                ]\n+            setFilesOfInterest [foo]\n+            expectNoErrors\n+            expectDiagnostic DsInfo (foo, 2, 0) \"Suggestion: Redundant guard\"\n+    ,  testCase' \"Redundant where\" $ do\n+            foo <- makeFile \"Foo.daml\" $ T.unlines\n+                [ \"daml 1.2\"\n+                , \"module Foo where\"\n+                , \"foo i = i where\"\n+                ]\n+            setFilesOfInterest [foo]\n+            expectNoErrors\n+            expectDiagnostic DsInfo (foo, 2, 0) \"Suggestion: Redundant where\"\n+    ,  testCase' \"Use otherwise\" $ do\n+            foo <- makeFile \"Foo.daml\" $ T.unlines\n+                [ \"daml 1.2\"\n+                , \"module Foo where\"\n+                , \"foo i | i == 1 = True | True = False\"\n+                ]\n+            setFilesOfInterest [foo]\n+            expectNoErrors\n+            expectDiagnostic DsInfo (foo, 2, 0) \"Suggestion: Use otherwise\"\n+    ,  testCase' \"Use record patterns\" $ do\n+            foo <- makeFile \"Foo.daml\" $ T.unlines\n+                [ \"daml 1.2\"\n+                , \"module Foo where\"\n+                , \"data Foo = Foo {a : Int, b : Int, c : Int, d : Int}\"\n+                , \"foo (Foo _ _ _ _) = True\"\n+                ]\n+            setFilesOfInterest [foo]\n+            expectNoErrors\n+            expectDiagnostic DsInfo (foo, 3, 5) \"Suggestion: Use record patterns\"\n+    ,  testCase' \"Used otherwise as a pattern\" $ do\n+            foo <- makeFile \"Foo.daml\" $ T.unlines\n+                [ \"daml 1.2\"\n+                , \"module Foo where\"\n+                , \"foo otherwise = 1\"\n+                ]\n+            setFilesOfInterest [foo]\n+            expectNoErrors\n+            expectDiagnostic DsInfo (foo, 2, 4) \"Warning: Used otherwise as a pattern\"\n+    ,  testCase' \"Redundant bang pattern\" $ do"
  },
  {
    "id" : "1f6e17a4-2e5f-4484-9005-842f952c6769",
    "prId" : 2999,
    "comments" : [
      {
        "id" : "fafeb5da-4da5-4d9a-8466-924cbe3a79ba",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "We should also add a test for the list literal case. Somebody might change the test above without noticing they remove a linting test.",
        "createdAt" : "2019-09-24T14:07:26Z",
        "updatedAt" : "2019-09-24T21:26:18Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "b5e9db2e-5f16-471f-b482-fd238b55b187",
        "parentId" : "fafeb5da-4da5-4d9a-8466-924cbe3a79ba",
        "author" : null,
        "body" : "We'll be alright Martin. Work in progress. Smoke tests for the new linting rules in progress. Another hlint release has also been found to be necessary due to our use of the `MonadComprehensions` extension (https://github.com/ndmitchell/hlint/issues/775).",
        "createdAt" : "2019-09-24T14:12:53Z",
        "updatedAt" : "2019-09-24T21:26:18Z",
        "lastEditedBy" : null,
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "1b83beb7a251cbac96b3f0a2c189dddce7868691",
    "line" : null,
    "diffHunk" : "@@ -353,7 +353,17 @@ dlintSmokeTests mbScenarioService = Tasty.testGroup \"Dlint smoke tests\"\n             setFilesOfInterest [foo]\n             expectNoErrors\n             expectDiagnostic DsInfo (foo, 3, 0) \"Suggestion: Use foldr\"\n-  ]\n+    ,  testCase' \"Short-circuited list comprehension\" $ do\n+            foo <- makeFile \"Foo.daml\" $ T.unlines\n+                [ \"daml 1.2\"\n+                , \"module Foo where\"\n+                , \"foo = [x | False, x <- [1..10]]\" ]\n+            setFilesOfInterest [foo]\n+            expectNoErrors\n+            expectOnlyDiagnostics []\n+"
  },
  {
    "id" : "781bd3c4-3ecc-416b-a3f6-c17a63ce57ad",
    "prId" : 2371,
    "comments" : [
      {
        "id" : "cbbabfda-9e07-441d-8781-d20956949fbb",
        "parentId" : null,
        "author" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "body" : "```suggestion\r\n    [   testCase' \"Template with no actions (edges) from choices\" $ do\r\n```",
        "createdAt" : "2019-08-01T18:56:36Z",
        "updatedAt" : "2019-08-01T20:21:14Z",
        "lastEditedBy" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "66b5b7e6be738ae8597dd2cb62a7f4df985506f7",
    "line" : null,
    "diffHunk" : "@@ -842,7 +842,7 @@ scenarioTests mbScenarioService = Tasty.testGroup \"Scenario tests\"\n \n visualDamlTests :: Tasty.TestTree\n visualDamlTests = Tasty.testGroup \"Visual Tests\"\n-    [   testCase' \"Set files of interest\" $ do\n+    [   testCase' \"templete with no action (edges) from choices\" $ do"
  },
  {
    "id" : "0605e332-4172-41f2-b8b0-4686d5b419e1",
    "prId" : 2371,
    "comments" : [
      {
        "id" : "fd04cb2b-a51d-41b1-8151-3adee52ceb6f",
        "parentId" : null,
        "author" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "body" : "```suggestion\r\n    [   testCase' \"Template with no actions (edges) from choices\" $ do\r\n```",
        "createdAt" : "2019-08-01T20:20:49Z",
        "updatedAt" : "2019-08-01T20:21:14Z",
        "lastEditedBy" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "66b5b7e6be738ae8597dd2cb62a7f4df985506f7",
    "line" : null,
    "diffHunk" : "@@ -842,7 +842,7 @@ scenarioTests mbScenarioService = Tasty.testGroup \"Scenario tests\"\n \n visualDamlTests :: Tasty.TestTree\n visualDamlTests = Tasty.testGroup \"Visual Tests\"\n-    [   testCase' \"Set files of interest\" $ do\n+    [   testCase' \"Templete with no actions (edges) from choices\" $ do"
  },
  {
    "id" : "c47a52bd-37fc-4bfc-9122-71a77ff07485",
    "prId" : 2371,
    "comments" : [
      {
        "id" : "3742c3fc-cb4e-4c4b-8f65-31e7ab9febdb",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Do we need the `archive` here if we just want to ensure that `fetch` does not produce an edge in the graph?",
        "createdAt" : "2019-08-05T14:03:47Z",
        "updatedAt" : "2019-08-05T14:08:21Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "ab91f8ae-7a38-4c87-a20f-2e7680796b85",
        "parentId" : "3742c3fc-cb4e-4c4b-8f65-31e7ab9febdb",
        "author" : {
          "login" : "akalburgi",
          "name" : "Anup Kalburgi",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/42743833?v=4"
        },
        "body" : "Nope,  got rid of it",
        "createdAt" : "2019-08-05T18:17:37Z",
        "updatedAt" : "2019-08-05T18:17:37Z",
        "lastEditedBy" : {
          "login" : "akalburgi",
          "name" : "Anup Kalburgi",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/42743833?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "66b5b7e6be738ae8597dd2cb62a7f4df985506f7",
    "line" : 35,
    "diffHunk" : "@@ -864,20 +870,87 @@ visualDamlTests = Tasty.testGroup \"Visual Tests\"\n                 , \"  where\"\n                 , \"    signatory owner\"\n                 , \"    controller owner can\"\n-                , \"      nonconsuming ReducedCoin : ContractId Coin\"\n+                , \"      nonconsuming ReducedCoin : ()\"\n                 , \"        with otherCoin : ContractId Coin\"\n                 , \"        do \"\n-                , \"        cn <- fetch otherCoin \"\n-                , \"        create this with amount = cn.amount - 10\"\n+                , \"        cn <- fetch otherCoin\"\n+                , \"        archive otherCoin\""
  },
  {
    "id" : "b679525a-b1cb-45c4-932c-962ec4c17035",
    "prId" : 2371,
    "comments" : [
      {
        "id" : "4af2acfa-3f2b-4698-9d22-4183a2205592",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "The expectation should say which choice is expected to exercise the `Archive` choice of `F:Coin`.",
        "createdAt" : "2019-08-05T14:06:09Z",
        "updatedAt" : "2019-08-05T14:08:21Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "e74276bd-bdb5-4046-b588-376bbbdcef80",
        "parentId" : "4af2acfa-3f2b-4698-9d22-4183a2205592",
        "author" : {
          "login" : "akalburgi",
          "name" : "Anup Kalburgi",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/42743833?v=4"
        },
        "body" : "Got rid of that action we this test intent was to make sure fetch did not add a edge",
        "createdAt" : "2019-08-05T18:22:39Z",
        "updatedAt" : "2019-08-05T18:22:39Z",
        "lastEditedBy" : {
          "login" : "akalburgi",
          "name" : "Anup Kalburgi",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/42743833?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "66b5b7e6be738ae8597dd2cb62a7f4df985506f7",
    "line" : 47,
    "diffHunk" : "@@ -864,20 +870,87 @@ visualDamlTests = Tasty.testGroup \"Visual Tests\"\n                 , \"  where\"\n                 , \"    signatory owner\"\n                 , \"    controller owner can\"\n-                , \"      nonconsuming ReducedCoin : ContractId Coin\"\n+                , \"      nonconsuming ReducedCoin : ()\"\n                 , \"        with otherCoin : ContractId Coin\"\n                 , \"        do \"\n-                , \"        cn <- fetch otherCoin \"\n-                , \"        create this with amount = cn.amount - 10\"\n+                , \"        cn <- fetch otherCoin\"\n+                , \"        archive otherCoin\"\n                 ]\n             setFilesOfInterest [fetchTest]\n             expectNoErrors\n             expectedTemplatePoperties fetchTest $ Set.fromList\n-                [TemplateProp (Set.fromList\n+                [TemplateProp \"Coin\"\n+                    (Set.fromList\n                     [   ExpectedChoices \"Archive\" True,\n                         ExpectedChoices \"ReducedCoin\" False\n                     ])\n-                    1\n+                    (Set.fromList [Exercise \"F:Coin\" \"Archive\"])"
  }
]