[
  {
    "id" : "035d1511-79b2-481f-ba56-ac85f01eb144",
    "prId" : 6423,
    "comments" : [
      {
        "id" : "e266305c-2e8e-4a2e-bc0f-df028d776fe7",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "I suggest we completely delete this code. This hint has never done anything helpful for us and I doubt it will ever do.",
        "createdAt" : "2020-06-22T08:36:26Z",
        "updatedAt" : "2020-06-22T08:36:35Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "8d1d4fdf697ac5c029167f8d8e4fd28d3f308c8f",
    "line" : 51,
    "diffHunk" : "@@ -1,1 +324,328 @@    --         setFilesOfInterest [foo]\n    --         expectNoErrors\n    --         expectDiagnostic DsInfo (foo, 7, 4) \"Suggestion: Reduce duplication\"\n    ,  testCase' \"Use language pragmas\" $ do\n            foo <- makeFile \"Foo.daml\" $ T.unlines"
  },
  {
    "id" : "d6447021-6572-4f8c-83a9-2751f8e41ff3",
    "prId" : 4013,
    "comments" : [
      {
        "id" : "61d45b8f-2611-42e8-acb8-55f8e93bc11a",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "This simply undoes the changes that I made in c65f9181459cadc3da79687571788bdbd74c4484 which were required by the regression in https://github.com/digital-asset/ghcide/issues/315. Should have taken a closer look at this back then",
        "createdAt" : "2020-01-10T16:26:10Z",
        "updatedAt" : "2020-01-10T17:35:20Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "48f24250cf3f4654f2cad4ec64a795b0a5c2274c",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +585,589 @@            expectGoToDefinition (foo,2,[9])    Missing             -- \"\\n\"\n            expectGoToDefinition (foo,2,[10])   Missing             -- (out of range)\n            expectGoToDefinition (foo,3,[0..2]) (At (foo,3,0))      -- \"foo\"\n            expectGoToDefinition (foo,3,[3..5]) Missing             -- \" = \"\n            expectGoToDefinition (foo,3,[6..8]) (At (foo,5,0))      -- \"bar\""
  },
  {
    "id" : "035fa15e-395c-4079-b220-4f762d179bda",
    "prId" : 3865,
    "comments" : [
      {
        "id" : "1dba9bac-ed8e-459c-a9b9-0b6eded1f68e",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "I think the new behavior here actually makes more sense, we are still within the definition of `foo` at the equal sign so it makes sense for goto definition to point back to `foo`.",
        "createdAt" : "2019-12-16T15:42:18Z",
        "updatedAt" : "2019-12-17T08:26:38Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "0198df451e43c3aa103b884f1860d9b71329dc1c",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +585,589 @@            expectGoToDefinition (foo,2,[9])    Missing             -- \"\\n\"\n            expectGoToDefinition (foo,2,[10])   Missing             -- (out of range)\n            expectGoToDefinition (foo,3,[0..5]) (At (foo,3,0))      -- \"foo = \"\n            expectGoToDefinition (foo,3,[6..8]) (At (foo,5,0))      -- \"bar\"\n            expectGoToDefinition (foo,3,[9])    Missing             -- \"\\n\""
  },
  {
    "id" : "ee2d95c8-618a-405e-823e-14499debc589",
    "prId" : 3865,
    "comments" : [
      {
        "id" : "c9906fd1-7f0d-4653-a702-55778215e81b",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Same here.",
        "createdAt" : "2019-12-16T15:42:26Z",
        "updatedAt" : "2019-12-17T08:26:38Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "0198df451e43c3aa103b884f1860d9b71329dc1c",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +645,649 @@                ]\n            setFilesOfInterest [foo]\n            expectGoToDefinition (foo,2,[0..5]) (At (foo,2,0))\n            expectGoToDefinition (foo,2,[6..8]) (At (foo,3,0))\n            expectGoToDefinition (foo,2,[9]) Missing"
  },
  {
    "id" : "4cbd51e5-23be-4892-8464-d07b87b53a30",
    "prId" : 3319,
    "comments" : [
      {
        "id" : "66fb2d3e-7415-4f52-bc5e-ed38c174794b",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "I wonder if this rule and the one after are a good idea for DAML. Currently we are mostly encouraging people to use `do` notation and not worry about this Functor, Applicative, Monad thing and these rules seem to go in the other direction.\r\n\r\nWhat do you think @hurryabit @bame-da ",
        "createdAt" : "2019-11-01T17:50:46Z",
        "updatedAt" : "2019-11-01T17:51:21Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "4e14e78218fbbd60890b2aa175475fb179cd6b5a",
    "line" : 95,
    "diffHunk" : "@@ -1,1 +524,528 @@                [ \"daml 1.2\"\n                , \"module Foo where\"\n                , \"foo f g bar = do x <- bar; return (f $ g x)\"\n                ]\n            setFilesOfInterest [foo]"
  },
  {
    "id" : "b6dfea97-9a9b-49a3-b7f2-b7014e52ba94",
    "prId" : 3230,
    "comments" : [
      {
        "id" : "be91bef1-bd0d-4f62-8e50-44870c622926",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Is there a `with`-syntax version of record patterns? Given that @bame-da seems to be fairly keen on using `with` syntax in all ouf our docs (and I agree that being consistent is better), Iâ€™m a bit hesistant to suggest braces by default.",
        "createdAt" : "2019-10-18T13:40:29Z",
        "updatedAt" : "2019-10-18T15:02:09Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "f7ea5c71-5a4c-4683-ae7f-5f0af290c7a5",
        "parentId" : "be91bef1-bd0d-4f62-8e50-44870c622926",
        "author" : null,
        "body" : "Do you mean that the suggestion (in DAML), should read `Suggest : Foo with {...}`?",
        "createdAt" : "2019-10-18T13:50:46Z",
        "updatedAt" : "2019-10-18T15:02:09Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "5857b9d2-c5f0-4163-9eef-f8e749f5a7f7",
        "parentId" : "be91bef1-bd0d-4f62-8e50-44870c622926",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "I donâ€™t know what the `with` syntax of `foo Foo {} = â€¦` is, I guess ` foo Foo with {} = `? Doesnâ€™t seem like an improvement to me but Iâ€™m the wrong person to comment on the beauty of with-syntax.",
        "createdAt" : "2019-10-18T13:53:11Z",
        "updatedAt" : "2019-10-18T15:02:09Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "731b8ce7-5b66-4a6f-8918-e37fbe511233",
        "parentId" : "be91bef1-bd0d-4f62-8e50-44870c622926",
        "author" : null,
        "body" : "```haskell\r\ndaml 1.2\r\ndata Foo = Foo { a : Int, b : Int}\r\nfoo : Foo -> Int\r\nfoo Foo with {a = a, b = b} = a + b\r\n```\r\n",
        "createdAt" : "2019-10-18T13:55:50Z",
        "updatedAt" : "2019-10-18T15:02:09Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "ccefd77a-3f80-45b4-92f3-bf09911fc719",
        "parentId" : "be91bef1-bd0d-4f62-8e50-44870c622926",
        "author" : null,
        "body" : "if you need more i can refer you to a helpful blog post (disclaimer : i'm the author!) ðŸ¤£ ",
        "createdAt" : "2019-10-18T13:56:50Z",
        "updatedAt" : "2019-10-18T15:02:09Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "f2bcaaac-0436-42c2-ac30-f91f9542284e",
        "parentId" : "be91bef1-bd0d-4f62-8e50-44870c622926",
        "author" : null,
        "body" : "leaving :trollface: mode for a moment, suggest letting it slide since it's only a shake ide test. the question above though - perhaps our suggestion should read ~`Suggest : Foo with {...}`~ `Suggest: Foo with {}`?",
        "createdAt" : "2019-10-18T13:57:57Z",
        "updatedAt" : "2019-10-18T15:02:09Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "fe69d63f-e52f-43fe-8106-4b941b7276b1",
        "parentId" : "be91bef1-bd0d-4f62-8e50-44870c622926",
        "author" : null,
        "body" : "it's a minor enhancement but one more thing to maintain on the fork (not a bad thing necessarily - just undecided about that - generally try to keep it restricted to that which is mandatory e.g. different parse trees)",
        "createdAt" : "2019-10-18T13:58:57Z",
        "updatedAt" : "2019-10-18T15:02:09Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "e79634ce-20f3-43b4-b692-a0d49370e6e1",
        "parentId" : "be91bef1-bd0d-4f62-8e50-44870c622926",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Itâ€™s not just a Shake IDE test, right? This is a rule that DLint will suggest by default.\r\n",
        "createdAt" : "2019-10-18T13:59:25Z",
        "updatedAt" : "2019-10-18T15:02:09Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "1b897be6-78a6-4ca7-a8aa-532b386e625d",
        "parentId" : "be91bef1-bd0d-4f62-8e50-44870c622926",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "`Foo with {..}` looks like a record wild card which is different from `Foo {}`.",
        "createdAt" : "2019-10-18T14:00:00Z",
        "updatedAt" : "2019-10-18T15:02:09Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "d8eb59ae-d0e9-4574-a9e5-eb4cfb5372fc",
        "parentId" : "be91bef1-bd0d-4f62-8e50-44870c622926",
        "author" : null,
        "body" : "Sorry, I didn't mean that. Should have wrote,\r\n```\r\nFoo with {}\r\n```\r\nI'm confused though. Can we back up? What is it you are advocating should happen here? Is it that the message should read `Suggest : Foo with {}`? \r\n",
        "createdAt" : "2019-10-18T14:02:55Z",
        "updatedAt" : "2019-10-18T15:02:09Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "7d8ea48e-3dec-4bb5-bc9c-26ae4974051f",
        "parentId" : "be91bef1-bd0d-4f62-8e50-44870c622926",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Iâ€™m not sure Iâ€™m advocating for that but it does at least seem worth considering given that we try to guide users towards `with`-syntax.",
        "createdAt" : "2019-10-18T14:05:24Z",
        "updatedAt" : "2019-10-18T15:02:09Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "d20ac0d4-8b44-4afe-a019-de29e1ba4ddb",
        "parentId" : "be91bef1-bd0d-4f62-8e50-44870c622926",
        "author" : null,
        "body" : "Ok I got you. Yes, I can get onboard with that and it's simple enough to implement. Let's do it.",
        "createdAt" : "2019-10-18T14:06:56Z",
        "updatedAt" : "2019-10-18T15:02:09Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "cfcced4d809e51ca4235f279c5f405debc501424",
    "line" : 45,
    "diffHunk" : "@@ -1,1 +451,455 @@                , \"module Foo where\"\n                , \"data Foo = Foo {a : Int, b : Int, c : Int, d : Int}\"\n                , \"foo (Foo _ _ _ _) = True\"\n                ]\n            setFilesOfInterest [foo]"
  },
  {
    "id" : "a1ec830f-1ba6-46c4-abe4-009310eb3924",
    "prId" : 3230,
    "comments" : [
      {
        "id" : "cb991dba-dcaf-4e71-a9d6-f56d96b28c40",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "This rule doesnâ€™t make sense for DAML but on the other hand putting bang patterns in DAML never makes sense so I guess we might as well warn about some of them being redundant.",
        "createdAt" : "2019-10-18T13:43:41Z",
        "updatedAt" : "2019-10-18T15:02:09Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "0db6b0b3-b2b4-4e0c-b612-2106e2c0b4b2",
        "parentId" : "cb991dba-dcaf-4e71-a9d6-f56d96b28c40",
        "author" : null,
        "body" : "Fair. Perhaps more generally `daml-lf` conversion should fail in the presence of bangs? Or maybe we should customize the lexer to fail earlier since they \"aren't DAML\"?",
        "createdAt" : "2019-10-18T14:01:20Z",
        "updatedAt" : "2019-10-18T15:02:09Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "1b45349d-5821-4f09-a705-80cb6c0e3160",
        "parentId" : "cb991dba-dcaf-4e71-a9d6-f56d96b28c40",
        "author" : null,
        "body" : "I'll raise an issue for this part of the discussion.",
        "createdAt" : "2019-10-18T14:09:08Z",
        "updatedAt" : "2019-10-18T15:02:09Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "cfcced4d809e51ca4235f279c5f405debc501424",
    "line" : 59,
    "diffHunk" : "@@ -1,1 +465,469 @@            expectNoErrors\n            expectDiagnostic DsInfo (foo, 2, 4) \"Warning: Used otherwise as a pattern\"\n    ,  testCase' \"Redundant bang pattern\" $ do\n            foo <- makeFile \"Foo.daml\" $ T.unlines\n                [ \"{-# LANGUAGE BangPatterns #-}\""
  },
  {
    "id" : "1d3b0a41-c998-4457-8054-915632ce738a",
    "prId" : 2371,
    "comments" : [
      {
        "id" : "c2c110bf-0904-42a0-96e6-3427a94bf060",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Do we need the `archive` here if we just want to ensure that `fetch` does not produce an edge in the graph?",
        "createdAt" : "2019-08-05T14:03:47Z",
        "updatedAt" : "2019-08-05T14:08:21Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "a0355c29-4d2e-4a3b-b859-0e9739539bb5",
        "parentId" : "c2c110bf-0904-42a0-96e6-3427a94bf060",
        "author" : {
          "login" : "akalburgi",
          "name" : "Anup Kalburgi",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/42743833?v=4"
        },
        "body" : "Nope,  got rid of it",
        "createdAt" : "2019-08-05T18:17:37Z",
        "updatedAt" : "2019-08-05T18:17:37Z",
        "lastEditedBy" : {
          "login" : "akalburgi",
          "name" : "Anup Kalburgi",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/42743833?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "66b5b7e6be738ae8597dd2cb62a7f4df985506f7",
    "line" : 35,
    "diffHunk" : "@@ -1,1 +875,879 @@                , \"        do \"\n                , \"        cn <- fetch otherCoin\"\n                , \"        archive otherCoin\"\n                ]\n            setFilesOfInterest [fetchTest]"
  },
  {
    "id" : "e69ce5a3-0842-4b00-8645-07bcc3423b73",
    "prId" : 2371,
    "comments" : [
      {
        "id" : "886afed4-faf2-483a-9018-6c46e2d2c2f0",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "The expectation should say which choice is expected to exercise the `Archive` choice of `F:Coin`.",
        "createdAt" : "2019-08-05T14:06:09Z",
        "updatedAt" : "2019-08-05T14:08:21Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "ca6a2651-72e3-44ed-92e7-7f2917b72f12",
        "parentId" : "886afed4-faf2-483a-9018-6c46e2d2c2f0",
        "author" : {
          "login" : "akalburgi",
          "name" : "Anup Kalburgi",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/42743833?v=4"
        },
        "body" : "Got rid of that action we this test intent was to make sure fetch did not add a edge",
        "createdAt" : "2019-08-05T18:22:39Z",
        "updatedAt" : "2019-08-05T18:22:39Z",
        "lastEditedBy" : {
          "login" : "akalburgi",
          "name" : "Anup Kalburgi",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/42743833?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "66b5b7e6be738ae8597dd2cb62a7f4df985506f7",
    "line" : 47,
    "diffHunk" : "@@ -1,1 +885,889 @@                        ExpectedChoices \"ReducedCoin\" False\n                    ])\n                    (Set.fromList [Exercise \"F:Coin\" \"Archive\"])\n                ]\n        , testCase' \"excercise sould add new action\" $ do"
  }
]