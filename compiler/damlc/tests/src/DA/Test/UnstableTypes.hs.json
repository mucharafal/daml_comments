[
  {
    "id" : "494a1d66-98a0-4f2b-a8a5-c71be547ba70",
    "prId" : 5363,
    "comments" : [
      {
        "id" : "8d3274d8-6289-4cf8-b854-da4802696589",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "For the sake of consistency:\r\n```suggestion\r\n    types = map (bimap LF.ModuleName LF.TypeConName)\r\n```",
        "createdAt" : "2020-04-02T11:36:12Z",
        "updatedAt" : "2020-04-02T11:42:59Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "b25b2b02-cc7f-4db6-998d-11d104b9d072",
        "parentId" : "8d3274d8-6289-4cf8-b854-da4802696589",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : ":+1: Fixed",
        "createdAt" : "2020-04-02T11:43:07Z",
        "updatedAt" : "2020-04-02T11:43:08Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "1a34be7e8aaa2fce34957299db2e4699200d7186",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,76 @@\n+-- Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+-- SPDX-License-Identifier: Apache-2.0\n+\n+{-# LANGUAGE MultiWayIf #-}\n+module DA.Test.UnstableTypes (main) where\n+\n+import Data.Bifunctor\n+import Control.Monad.Extra\n+import DA.Bazel.Runfiles\n+import qualified DA.Daml.LF.Ast as LF\n+import qualified DA.Daml.LF.Proto3.Archive as LFArchive\n+import qualified Data.ByteString as BS\n+import Data.List.Extra\n+import qualified Data.NameMap as NM\n+import System.Directory.Extra\n+import System.Environment.Blank\n+import System.FilePath\n+import Test.Tasty\n+import Test.Tasty.HUnit\n+\n+main :: IO ()\n+main = do\n+    setEnv \"TASTY_NUM_THREADS\" \"1\" True\n+    pkgDb <- locateRunfiles (mainWorkspace </> \"compiler\" </> \"damlc\" </> \"pkg-db\" </> \"pkg-db_dir\")\n+    dalfs <- filter (\\f -> takeExtension f == \".dalf\") <$> listFilesRecursive pkgDb\n+    when (null dalfs) $ do\n+        fail \"Location to pkg db is incorrect, no DALFs found\"\n+    defaultMain $ testGroup \"unstable-types\"\n+        [ testCase (makeRelative pkgDb dalf) $ do\n+              bytes <- BS.readFile dalf\n+              (_pkgId, pkg) <-\n+                  either (fail . show) pure $\n+                  LFArchive.decodeArchive LFArchive.DecodeAsMain bytes\n+              let serializableTypes =\n+                      sort $\n+                      [ (LF.moduleName mod, LF.dataTypeCon ty)\n+                      | mod <- NM.toList (LF.packageModules pkg)\n+                      , ty <- NM.toList (LF.moduleDataTypes mod)\n+                      , LF.getIsSerializable (LF.dataSerializable ty)\n+                      ]\n+              if | \"daml-prim\" == takeBaseName dalf ->\n+                   serializableTypes @?= []\n+                 | \"daml-stdlib\" `isPrefixOf` takeBaseName dalf ->\n+                   serializableTypes @?= sort (damlStdlibTypes (LF.packageLfVersion pkg))\n+                 | otherwise ->\n+                   assertFailure (\"Unknown package: \" <> show dalf)\n+              pure ()\n+        | dalf <- dalfs\n+        ]\n+\n+damlStdlibTypes :: LF.Version -> [(LF.ModuleName, LF.TypeConName)]\n+damlStdlibTypes ver\n+    | ver == LF.version1_6 = anyTypes <> damlStdlibTypes LF.version1_7\n+    | otherwise = map (bimap LF.ModuleName LF.TypeConName) types\n+  where\n+    anyTypes = map (bimap LF.ModuleName LF.TypeConName)\n+        [ ([\"DA\", \"Internal\", \"Any\"], [\"AnyChoice\"])\n+        , ([\"DA\", \"Internal\", \"Any\"], [\"AnyContractKey\"])\n+        , ([\"DA\", \"Internal\", \"Any\"], [\"AnyTemplate\"])\n+        , ([\"DA\", \"Internal\", \"Any\"], [\"TemplateTypeRep\"])\n+        ]\n+    types ="
  }
]