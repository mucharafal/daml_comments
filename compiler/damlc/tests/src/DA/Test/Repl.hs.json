[
  {
    "id" : "ac301985-8e8e-44be-a234-df5227b43e78",
    "prId" : 6485,
    "comments" : [
      {
        "id" : "0e204e32-bc59-4df4-84fa-b37617b2afdf",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Maybe worth calling `getTime` afterwards and asserting on the result?",
        "createdAt" : "2020-06-25T10:32:57Z",
        "updatedAt" : "2020-06-25T12:43:15Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "078d92eb-0b60-4927-af6f-b191727b2ea5",
        "parentId" : "0e204e32-bc59-4df4-84fa-b37617b2afdf",
        "author" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "body" : "Good idea, I've added such a check",
        "createdAt" : "2020-06-25T12:43:23Z",
        "updatedAt" : "2020-06-25T12:43:23Z",
        "lastEditedBy" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "787fa9e2d1e70e3404d4996d48837692a91ae6f2",
    "line" : null,
    "diffHunk" : "@@ -122,3 +128,37 @@ testConnection damlc scriptDar testDar ledgerPort mbTokenFile mbCaCrt = do\n                    , [ \"--access-token-file=\" <> tokenFile | Just tokenFile <- [mbTokenFile] ]\n                    , [ \"--cacrt=\" <> cacrt | Just cacrt <- [mbCaCrt] ]\n                    ]\n+\n+staticTimeTests :: FilePath -> FilePath -> FilePath -> IO Int -> TestTree\n+staticTimeTests damlc scriptDar testDar getSandboxPort = testGroup \"static-time\"\n+    [ testCase \"setTime\" $ do\n+        port <- getSandboxPort\n+        testSetTime damlc scriptDar testDar port\n+    ]\n+\n+testSetTime\n+    :: FilePath\n+    -> FilePath\n+    -> FilePath\n+    -> Int\n+    -> Assertion\n+testSetTime damlc scriptDar testDar ledgerPort = do\n+    out <- readCreateProcess cp $ unlines\n+        [ \"import DA.Date\"\n+        , \"import DA.Time\"\n+        , \"setTime (time (date 2000 Feb 2) 0 1 2)\""
  },
  {
    "id" : "133f95ac-aec2-43dd-9891-b0b363db948a",
    "prId" : 4673,
    "comments" : [
      {
        "id" : "4eda081e-4e52-4734-9f97-3899c4c102b8",
        "parentId" : null,
        "author" : null,
        "body" : "I think it would be more intuitive if a raw, pure expression did not result in a type error, but instead caused a `debug` to be inserted automatically, turning it into a `Script _` expression. I think we should try to reserve \"type errors\" in the repl for non-pure expressions (e.g. tried to use Update monad instead of Script monad), or for pure expressions that have type errors in them (e.g. passed an argument of the wrong type). This is way more work than should be in this PR, though.",
        "createdAt" : "2020-02-24T16:16:46Z",
        "updatedAt" : "2020-02-24T16:46:34Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "0104fd04-57f8-4704-8d12-ada953e9eddd",
        "parentId" : "4eda081e-4e52-4734-9f97-3899c4c102b8",
        "author" : null,
        "body" : "(As for how to implement that, we could catch type errors with \"expected Script\", add a `debug`, and try again. Maybe that's kinda messy, but I think it would make the interface more accessible.)",
        "createdAt" : "2020-02-24T16:33:37Z",
        "updatedAt" : "2020-02-24T16:46:34Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "01e8ee8a-81a5-49b4-9824-bcdaf2867c90",
        "parentId" : "4eda081e-4e52-4734-9f97-3899c4c102b8",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "I fully agree that this would be a nicer UX! GHCi also prints the result if you have something of type `IO a` where `a` is an instance of `Show` (and not `()) which would be nice to have. It also has some magic defaulting to `IO` which makes things like `pure 1` work automagically (that’s the main reason why I currently have the type annotation to `Script _`. Not sure how much more clever that is than typechecking twice and if it’s possible to adapt this for our usecase.",
        "createdAt" : "2020-02-24T16:41:47Z",
        "updatedAt" : "2020-02-24T16:46:34Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "524a66b6c50a462424e5d97ecc4ca5c53392d516",
    "line" : 17,
    "diffHunk" : "@@ -62,6 +62,44 @@ main = do\n                   , input \"debug x\"\n                   , matchOutput \"^.*: 2$\"\n                   ]\n+            , testInteraction' \"parse error\"\n+                  [ input \"eaiu\\\\1\"\n+                  , matchOutput \"^parse error.*$\"\n+                  , input \"debug 1\"\n+                  , matchOutput \"^.*: 1\"\n+                  ]\n+            , testInteraction' \"unsupported statement\"\n+                  [ input \"(x, y) <- pure (1, 2)\"\n+                  , matchOutput \"^Unsupported statement:.*$\"\n+                  , input \"debug 1\"\n+                  , matchOutput \"^.*: 1\"\n+                  ]\n+            , testInteraction' \"type error\"\n+                  [ input \"1\""
  }
]