[
  {
    "id" : "163b20ea-8cad-431d-816c-a3a4062b76ea",
    "prId" : 7708,
    "comments" : [
      {
        "id" : "e2187ec3-011f-4406-b319-03e94bd04640",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Can we just use `prettyRange` and avoid inconsistencies with how we render it at the command line? Then you also don’t have to worry about whether you merge this before or after the ghcide bump.",
        "createdAt" : "2020-10-16T06:54:41Z",
        "updatedAt" : "2020-10-16T07:09:57Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "9eb24c04-0f78-4f2d-adca-bce5cd9195fc",
        "parentId" : "e2187ec3-011f-4406-b319-03e94bd04640",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "We could, but we would need to export `prettyRange` from `ghcide`, which it is currently not. Would you prefer that?",
        "createdAt" : "2020-10-16T07:02:25Z",
        "updatedAt" : "2020-10-16T07:09:57Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "942c3691-eaef-4f44-97c9-4973f78626e6",
        "parentId" : "e2187ec3-011f-4406-b319-03e94bd04640",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Ah didn’t realize it wasn’t exposed, I’ll leave it up to you. Seems like a useful cleanup but I also don’t care all that much about it.",
        "createdAt" : "2020-10-16T07:12:59Z",
        "updatedAt" : "2020-10-16T07:13:04Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "96c2e82c-e5c5-404f-9d7d-adba541612ff",
        "parentId" : "e2187ec3-011f-4406-b319-03e94bd04640",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Given how simple the implementation is and that I expect it to _never_ change again and we have a test checking they don't diverge, I'll leave `prettyRange` internal to `ghcide` and keep a copy here.",
        "createdAt" : "2020-10-16T07:43:10Z",
        "updatedAt" : "2020-10-16T07:43:10Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "bdc2a3c3afcc24f929e7354ba2e089eceb9d15c8",
    "line" : 37,
    "diffHunk" : "@@ -237,7 +252,26 @@ data DiagnosticField\n   | DSeverity !DiagnosticSeverity\n   | DSource !String\n   | DMessage !String\n-  deriving (Eq, Show)\n+\n+renderRange :: Range -> String"
  },
  {
    "id" : "f2b6f745-09ea-4a87-af2c-bc94af31ff70",
    "prId" : 7707,
    "comments" : [
      {
        "id" : "9e913e55-b0b1-4d31-be3e-3376c4472e3f",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Does the comment about GHC still apply? i.e., will we now get locations in error messages that are 0 based column-wise while the location of the diagnostics containing that error message is 1 based? At the very least it seems worth preserving the comment that documents this behavior.",
        "createdAt" : "2020-10-16T06:47:34Z",
        "updatedAt" : "2020-10-16T06:48:54Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "87b2c0a5-742c-4d46-a015-414ae9b441cf",
        "parentId" : "9e913e55-b0b1-4d31-be3e-3376c4472e3f",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "This comment was never true. GHC's ranges were always 1-based and hence match the way we pretty-print diagnostics now:\r\nhttps://github.com/digital-asset/daml-ghcide/blob/8e4f52892d88d23259547b03bb096b46f28c0afc/src/Development/IDE/GHC/Error.hs#L70\r\n\r\nI think all the confusion came from the bug in the pretty-printer I've fixed yesterday. Since we don't use any `SrcSpan`s in this test but only `Range`s, I think the comment makes no sense in this place anymore. In view of https://github.com/digital-asset/daml/pull/7708, there should also be no more confusion for our devs who want to add or fix tests, since we don't print anything 0-based anymore.",
        "createdAt" : "2020-10-16T07:03:44Z",
        "updatedAt" : "2020-10-16T07:03:44Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "7623f674-3f31-4c93-95a1-182ee226fb51",
        "parentId" : "9e913e55-b0b1-4d31-be3e-3376c4472e3f",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "makes sense, thanks for the explanation",
        "createdAt" : "2020-10-16T07:06:46Z",
        "updatedAt" : "2020-10-16T07:06:46Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "f420bac7ae6d6024bd5b3872536bac5056e6d83d",
    "line" : 13,
    "diffHunk" : "@@ -332,40 +332,14 @@ parseRange :: String -> Range\n parseRange s =\n   case traverse readMaybe (wordsBy (`elem` (\":-\" :: String)) s) of\n     Just [rowStart, colStart, rowEnd, colEnd] ->\n-      -- When specifying ranges:\n-      --  * lines are 1-based\n-      --  * columns are 0-based\n-      --  * the column span is open, that is, the end column is \"one\n-      --    past the end\" of the span.\n-      --\n-      -- Positions in these ranges are matched against LSP coordinates\n-      -- which are 0-based in both line and column and also open. Error\n-      -- messages are formatted by GHC and are 1-based in line, 0-based\n-      -- in column and closed (so add one to column start, one to"
  },
  {
    "id" : "5e917bf1-d1bb-482e-a476-3ca5ba244d64",
    "prId" : 6577,
    "comments" : [
      {
        "id" : "06948b62-f84f-484e-b428-4b767e3fc024",
        "parentId" : null,
        "author" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "body" : "I find that name shadowing pretty confusing, maybe rename to `getDamlEnv`?",
        "createdAt" : "2020-07-02T10:29:31Z",
        "updatedAt" : "2020-07-02T11:03:32Z",
        "lastEditedBy" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "e3b60d2c-4a01-4dfa-9c09-dca4e8c27a8e",
        "parentId" : "06948b62-f84f-484e-b428-4b767e3fc024",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : ":+1:",
        "createdAt" : "2020-07-02T10:34:48Z",
        "updatedAt" : "2020-07-02T11:03:32Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "69089fe1d101ed9af4f61eba93a5adaae4f286b1",
    "line" : null,
    "diffHunk" : "@@ -132,27 +136,31 @@ getIntegrationTests registerTODO scenarioService version = do\n     createDirectoryIfMissing True outdir\n \n     dlintDataDir <- locateRunfiles $ mainWorkspace </> \"compiler/damlc/daml-ide-core\"\n-    let opts = (defaultOptions (Just version))\n-          { optThreads = 0\n-          , optCoreLinting = True\n-          , optDlintUsage = DlintEnabled dlintDataDir False\n-          }\n \n     -- initialise the compiler service\n     vfs <- makeVFSHandle\n-    damlEnv <- mkDamlEnv opts (Just scenarioService)\n     -- We use a separate service for generated files so that we can test files containing internal imports.\n-    pure $\n+    let tree :: TestTree\n+        tree = askOption $ \\(LfVersionOpt version) ->\n+          let opts = (defaultOptions (Just version))\n+                { optThreads = 0\n+                , optCoreLinting = True\n+                , optDlintUsage = DlintEnabled dlintDataDir False\n+                }\n+          in\n+          withResource (mkDamlEnv opts (Just scenarioService)) (\\_damlEnv -> pure ()) $ \\mkDamlEnv ->"
  },
  {
    "id" : "d47a1e29-e826-499e-b8d5-d98303245969",
    "prId" : 5641,
    "comments" : [
      {
        "id" : "4b97b914-eb27-4659-a55b-a327ede9828f",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "I find it slightly confusing that the range in the `Range` field starts at `8:13` whereas the range in `Message` starts at `8:14`. Is there anything we can do about this? Does ghcide suffer from similar problems?",
        "createdAt" : "2020-04-21T12:19:47Z",
        "updatedAt" : "2020-04-21T12:19:48Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "d5cfb775-131a-41ca-9c1d-440f801ba2e1",
        "parentId" : "4b97b914-eb27-4659-a55b-a327ede9828f",
        "author" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "body" : "Yes, it is mildly confusing, hence the detailed comment. What happens in case it's not clear is that the adjusted numbers that you see in the message result from GHCs internal formatter. I suppose if we were determined we could change `showDiagnostic` and `parseRange` to account for it. I personally don't think in light of understanding it that it's worth going to the trouble. Yes, the behavior is entirely consistent with ghcide.",
        "createdAt" : "2020-04-21T12:40:06Z",
        "updatedAt" : "2020-04-21T12:40:06Z",
        "lastEditedBy" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "384cb8af-b1bf-4a5e-9902-7e428cd1593b",
        "parentId" : "4b97b914-eb27-4659-a55b-a327ede9828f",
        "author" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "body" : "My arm could be twisted though if you think it's important. Let me know.",
        "createdAt" : "2020-04-21T12:51:42Z",
        "updatedAt" : "2020-04-21T12:51:42Z",
        "lastEditedBy" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "31235a9ded307d40e81c4c786797be6729ddb663",
    "line" : 33,
    "diffHunk" : "@@ -318,9 +318,40 @@ parseRange :: String -> Range\n parseRange s =\n   case traverse readMaybe (wordsBy (`elem` (\":-\" :: String)) s) of\n     Just [rowStart, colStart, rowEnd, colEnd] ->\n-        Range\n-            (Position (rowStart - 1) (colStart - 1))\n-            (Position (rowEnd - 1) (colEnd - 1))\n+      -- When specifying ranges:\n+      --  * lines are 1-based\n+      --  * columns are 0-based\n+      --  * the column span is open, that is, the end column is \"one\n+      --    past the end\" of the span.\n+      --\n+      -- Positions in these ranges are matched against LSP coordinates\n+      -- which are 0-based in both line and column and also open. Error\n+      -- messages are formatted by GHC and are 1-based in line, 0-based\n+      -- in column and closed (so add one to column start, one to\n+      -- column end to make them 1-based, then subtract one from column\n+      -- end to convert to closed!)\n+      --\n+      -- 'showDiagnostics' reports ranges such that lines are 1-based,\n+      -- columns are 0-based and open.\n+      --\n+      -- Example:\n+      --   If @INFO 'range=8:13-8:47':\n+      --   then the actual (LSP) range is\n+      --      { _start = Position {_line = 7, _character = 13}\n+      --      ,   _end = Position {_line = 7, _character = 47}}\n+      --   and 'showDiagnostics' reports:\n+      --     Hidden:   no\n+      --     Range:    8:13-8:47\n+      --     Source:   linter\n+      --     Severity: DsInfo\n+      --     Message:  RangeTest.daml:8:14-47: Some error message."
  },
  {
    "id" : "f162d34a-d724-4275-952f-2dfb1ceed147",
    "prId" : 3020,
    "comments" : [
      {
        "id" : "6b3f7f59-e6c6-447c-90be-8e60fa9889bc",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "@shayne-fletcher-da If I move this two lines up, everything breaks with \"bad dependency\" errors. To me this looks like the Shake rule for the linter has an issue. Could you please have a look. (Or tell me I'm wrong and using things incorrectly.)",
        "createdAt" : "2019-09-25T22:24:32Z",
        "updatedAt" : "2019-09-25T22:24:32Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "b3e08a5b-5a28-4640-9d01-d5cf27353596",
        "parentId" : "6b3f7f59-e6c6-447c-90be-8e60fa9889bc",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Moving this after the typechecker defeats the whole purpose. Now you’re back to the lint rule potentially not running if typechecking fails.",
        "createdAt" : "2019-09-26T07:47:02Z",
        "updatedAt" : "2019-09-26T07:47:02Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "2d6d37c4-f2dc-4043-b090-f1fa030c7899",
        "parentId" : "6b3f7f59-e6c6-447c-90be-8e60fa9889bc",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Yeah, you're right. I shouldn't code after midnight...",
        "createdAt" : "2019-09-26T08:21:16Z",
        "updatedAt" : "2019-09-26T08:21:16Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "207932e5-415d-4750-a2bb-8608492e2561",
        "parentId" : "6b3f7f59-e6c6-447c-90be-8e60fa9889bc",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Coding after midnight is rarely a good idea :wink: ",
        "createdAt" : "2019-09-26T08:26:01Z",
        "updatedAt" : "2019-09-26T08:26:01Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "54c5e01a-9d8a-489b-af74-e67ace90ea4c",
        "parentId" : "6b3f7f59-e6c6-447c-90be-8e60fa9889bc",
        "author" : null,
        "body" : "@cocreature pulled a fix out of his magic bag this morning in https://github.com/digital-asset/daml/pull/3045 :)",
        "createdAt" : "2019-09-26T11:38:49Z",
        "updatedAt" : "2019-09-26T11:38:49Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "2f59679daf5c6e5c1a7a6b92adaaa9c1d5812658",
    "line" : 4,
    "diffHunk" : "@@ -321,6 +321,7 @@ mainProj TestArguments{..} service outdir log file = do\n     runActionSync service $ do\n             cores <- ghcCompile log file\n             corePrettyPrint cores\n+            getDlintIdeas file"
  },
  {
    "id" : "fdf3bd7c-4492-4c5d-a4cd-7096befa6a3d",
    "prId" : 2115,
    "comments" : [
      {
        "id" : "28191202-eeea-4ab2-a575-1b93fe5f7fa9",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "As I mentioned above, if we make turning off hlint an option instead of tryting to filter out HLint diagnostics based on some rather crude heuristics.",
        "createdAt" : "2019-07-12T08:27:08Z",
        "updatedAt" : "2019-07-12T15:42:21Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "b83ff3c3-49e8-4028-a4e8-2d0c2c54c63b",
        "parentId" : "28191202-eeea-4ab2-a575-1b93fe5f7fa9",
        "author" : null,
        "body" : "Yes. Agree.",
        "createdAt" : "2019-07-12T09:44:01Z",
        "updatedAt" : "2019-07-12T15:42:21Z",
        "lastEditedBy" : null,
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "c5a9f49e-7dc5-4c84-9148-96ae2cb732bf",
        "parentId" : "28191202-eeea-4ab2-a575-1b93fe5f7fa9",
        "author" : null,
        "body" : "Fixing.",
        "createdAt" : "2019-07-12T12:03:07Z",
        "updatedAt" : "2019-07-12T15:42:21Z",
        "lastEditedBy" : null,
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "70dbda3a4e6f6e2c8b607e944eb807553787c2c2",
    "line" : null,
    "diffHunk" : "@@ -169,9 +169,10 @@ testCase args version getService outdir registerTODO file = singleTest file . Te\n       Compile.unsafeClearDiagnostics service\n       ex <- try $ mainProj args service outdir log (toNormalizedFilePath file) :: IO (Either SomeException Package)\n       diags <- Compile.getDiagnostics service\n+      let diags' = [d | d <- diags, _severity (snd d) /= Just D.DsInfo] -- Discard hlint hints!"
  }
]