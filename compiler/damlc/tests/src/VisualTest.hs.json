[
  {
    "id" : "191e881d-8af4-4ff0-9a80-c645f87d24cf",
    "prId" : 2325,
    "comments" : [
      {
        "id" : "08cfd668-7da3-4a2e-9ac6-1549592e7547",
        "parentId" : null,
        "author" : {
          "login" : "akalburgi",
          "name" : "Anup Kalburgi",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/42743833?v=4"
        },
        "body" : "As I am not referring the name directly within the tests, I get warning so had to use `_`",
        "createdAt" : "2019-07-29T21:01:22Z",
        "updatedAt" : "2019-07-31T18:57:12Z",
        "lastEditedBy" : {
          "login" : "akalburgi",
          "name" : "Anup Kalburgi",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/42743833?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "3a390e5baed8d24cb1eac9a25b9951eb49ad4db9",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,111 @@\n+-- Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+-- SPDX-License-Identifier: Apache-2.0\n+module VisualTest\n+   ( main\n+   ) where\n+import DA.Cli.Visual\n+import Data.Either\n+import qualified Test.Tasty.Extended as Tasty\n+import qualified Test.Tasty.HUnit    as Tasty\n+import qualified DA.Pretty as DAP\n+import qualified Development.IDE.Types.Location as D\n+import qualified DA.Daml.LF.Ast as LF\n+import qualified Development.IDE.Core.API as API\n+import qualified Development.IDE.Core.Rules.Daml as API\n+import qualified Data.NameMap as NM\n+import qualified Control.Monad.Reader   as Reader\n+import Development.IDE.Core.API.Testing\n+import System.Environment.Blank (setEnv)\n+import Control.Monad.Except\n+\n+data ExpectedChoices = ExpectedChoices\n+    { _cName :: String"
  },
  {
    "id" : "fe104ec4-81a3-49ba-9d80-4afb0ba11385",
    "prId" : 2325,
    "comments" : [
      {
        "id" : "c155d894-bc3e-460b-acca-66348c2f7424",
        "parentId" : null,
        "author" : {
          "login" : "akalburgi",
          "name" : "Anup Kalburgi",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/42743833?v=4"
        },
        "body" : "I feel like we should also have one of these to make sure dar reading and unpacking has not broken?",
        "createdAt" : "2019-07-29T21:02:30Z",
        "updatedAt" : "2019-07-31T18:57:12Z",
        "lastEditedBy" : {
          "login" : "akalburgi",
          "name" : "Anup Kalburgi",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/42743833?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "5072ac19-6cd5-490d-9a0f-79b57d5ca483",
        "parentId" : "c155d894-bc3e-460b-acca-66348c2f7424",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Commented on this above.",
        "createdAt" : "2019-07-30T07:17:18Z",
        "updatedAt" : "2019-07-31T18:57:12Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "43be9f5e-4a39-48fb-95e5-ae717c367f25",
        "parentId" : "c155d894-bc3e-460b-acca-66348c2f7424",
        "author" : {
          "login" : "akalburgi",
          "name" : "Anup Kalburgi",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/42743833?v=4"
        },
        "body" : "renamed this to dar-reader test ",
        "createdAt" : "2019-07-30T16:29:41Z",
        "updatedAt" : "2019-07-31T18:57:12Z",
        "lastEditedBy" : {
          "login" : "akalburgi",
          "name" : "Anup Kalburgi",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/42743833?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "3a390e5baed8d24cb1eac9a25b9951eb49ad4db9",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,111 @@\n+-- Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+-- SPDX-License-Identifier: Apache-2.0\n+module VisualTest\n+   ( main\n+   ) where\n+import DA.Cli.Visual\n+import Data.Either\n+import qualified Test.Tasty.Extended as Tasty\n+import qualified Test.Tasty.HUnit    as Tasty\n+import qualified DA.Pretty as DAP\n+import qualified Development.IDE.Types.Location as D\n+import qualified DA.Daml.LF.Ast as LF\n+import qualified Development.IDE.Core.API as API\n+import qualified Development.IDE.Core.Rules.Daml as API\n+import qualified Data.NameMap as NM\n+import qualified Control.Monad.Reader   as Reader\n+import Development.IDE.Core.API.Testing\n+import System.Environment.Blank (setEnv)\n+import Control.Monad.Except\n+\n+data ExpectedChoices = ExpectedChoices\n+    { _cName :: String\n+    , _consuming :: Bool\n+    } deriving (Eq, Show )\n+data TemplateProp = TemplateProp\n+    { _choices :: [ExpectedChoices]\n+    , _action :: Int\n+    } deriving (Eq, Show)\n+\n+main :: IO ()\n+main = do\n+    setEnv \"TASTY_NUM_THREADS\" \"1\" True\n+    Tasty.deterministicMain visualTests\n+\n+visualTests :: Tasty.TestTree\n+visualTests =\n+    Tasty.testGroup \"Visual tests using Shake API\" [ visualDamlTests ]\n+\n+testCase :: Tasty.TestName -> ShakeTest () -> Tasty.TestTree\n+testCase testName test =\n+    Tasty.testCase testName $ do\n+        res <- runShakeTest Nothing test\n+        Tasty.assertBool (\"Shake test resulted in an error: \" ++ show res) $ isRight res\n+\n+templateChoicesToProps :: TemplateChoices -> TemplateProp\n+templateChoicesToProps tca  = TemplateProp choicesInTpl actl\n+    where choicesInTpl = map (\\ca -> ExpectedChoices ( DAP.renderPretty $ choiceName ca) (choiceConsuming ca)) (choiceAndActions tca)\n+          actl = sum $ map (length . actions ) (choiceAndActions tca)\n+\n+graphTest :: LF.World -> LF.Package -> [TemplateProp] -> Either (String, String) ()\n+graphTest wrld lfPkg tplProps =\n+    if tplProps == map templateChoicesToProps tplPropsActual\n+        then Right ()\n+        else Left (show tplProps, show $ map templateChoicesToProps tplPropsActual)\n+    where tplPropsActual = concatMap (moduleAndTemplates wrld) (NM.toList $ LF.packageModules lfPkg)\n+\n+expectedPoperties :: D.NormalizedFilePath -> [TemplateProp] -> ShakeTest ()\n+expectedPoperties damlFilePath tplProps = do\n+    ideState <- ShakeTest $ Reader.asks steService\n+    mbDalf <- liftIO $ API.runAction ideState (API.getDalf damlFilePath)\n+    case mbDalf of\n+        Just lfPkg -> do\n+            wrld <- Reader.liftIO $ API.runAction ideState (API.worldForFile damlFilePath)\n+            case graphTest wrld lfPkg tplProps of\n+                Right _ -> pure ()\n+                Left (expected , actual) -> throwError (ExpectedNoMisMatch expected actual)\n+        Nothing -> throwError (ExpectedNoErrors [])\n+\n+visualDamlTests :: Tasty.TestTree\n+visualDamlTests = Tasty.testGroup \"Visual Tests\"\n+    [   testCase \"Set files of interest\" $ do\n+            foo <- makeModule \"F\"\n+                [ \"template Coin\"\n+                , \"  with\"\n+                , \"    owner : Party\"\n+                , \"  where\"\n+                , \"    signatory owner\"\n+                , \"    controller owner can\"\n+                , \"      Delete : ()\"\n+                , \"        do return ()\"\n+                ]\n+            setFilesOfInterest [foo]\n+            expectedPoperties foo [TemplateProp [ExpectedChoices \"Archive\" True, ExpectedChoices \"Delete\" True] 0]\n+    ]\n+\n+\n+\n+\n+-- main :: IO ()"
  },
  {
    "id" : "c698f518-0c98-4212-8431-84568b600821",
    "prId" : 2325,
    "comments" : [
      {
        "id" : "78c8face-eeda-43c1-b4e3-f142b63ade54",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Does the order matter here or do we only want to test that the lists have the same elements?",
        "createdAt" : "2019-07-30T07:14:26Z",
        "updatedAt" : "2019-07-31T18:57:12Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "b5a86dee-0395-4be0-b214-d9d27d2110a5",
        "parentId" : "78c8face-eeda-43c1-b4e3-f142b63ade54",
        "author" : {
          "login" : "akalburgi",
          "name" : "Anup Kalburgi",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/42743833?v=4"
        },
        "body" : "No order should not matter, I will change it to Set",
        "createdAt" : "2019-07-30T13:52:52Z",
        "updatedAt" : "2019-07-31T18:57:12Z",
        "lastEditedBy" : {
          "login" : "akalburgi",
          "name" : "Anup Kalburgi",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/42743833?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "3a390e5baed8d24cb1eac9a25b9951eb49ad4db9",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,111 @@\n+-- Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+-- SPDX-License-Identifier: Apache-2.0\n+module VisualTest\n+   ( main\n+   ) where\n+import DA.Cli.Visual\n+import Data.Either\n+import qualified Test.Tasty.Extended as Tasty\n+import qualified Test.Tasty.HUnit    as Tasty\n+import qualified DA.Pretty as DAP\n+import qualified Development.IDE.Types.Location as D\n+import qualified DA.Daml.LF.Ast as LF\n+import qualified Development.IDE.Core.API as API\n+import qualified Development.IDE.Core.Rules.Daml as API\n+import qualified Data.NameMap as NM\n+import qualified Control.Monad.Reader   as Reader\n+import Development.IDE.Core.API.Testing\n+import System.Environment.Blank (setEnv)\n+import Control.Monad.Except\n+\n+data ExpectedChoices = ExpectedChoices\n+    { _cName :: String\n+    , _consuming :: Bool\n+    } deriving (Eq, Show )\n+data TemplateProp = TemplateProp\n+    { _choices :: [ExpectedChoices]\n+    , _action :: Int\n+    } deriving (Eq, Show)\n+\n+main :: IO ()\n+main = do\n+    setEnv \"TASTY_NUM_THREADS\" \"1\" True\n+    Tasty.deterministicMain visualTests\n+\n+visualTests :: Tasty.TestTree\n+visualTests =\n+    Tasty.testGroup \"Visual tests using Shake API\" [ visualDamlTests ]\n+\n+testCase :: Tasty.TestName -> ShakeTest () -> Tasty.TestTree\n+testCase testName test =\n+    Tasty.testCase testName $ do\n+        res <- runShakeTest Nothing test\n+        Tasty.assertBool (\"Shake test resulted in an error: \" ++ show res) $ isRight res\n+\n+templateChoicesToProps :: TemplateChoices -> TemplateProp\n+templateChoicesToProps tca  = TemplateProp choicesInTpl actl\n+    where choicesInTpl = map (\\ca -> ExpectedChoices ( DAP.renderPretty $ choiceName ca) (choiceConsuming ca)) (choiceAndActions tca)\n+          actl = sum $ map (length . actions ) (choiceAndActions tca)\n+\n+graphTest :: LF.World -> LF.Package -> [TemplateProp] -> Either (String, String) ()\n+graphTest wrld lfPkg tplProps =\n+    if tplProps == map templateChoicesToProps tplPropsActual"
  },
  {
    "id" : "b35cfa7f-76a7-472d-87c4-8190f39cc290",
    "prId" : 2325,
    "comments" : [
      {
        "id" : "b7ce67ab-160b-44ec-91f3-21bac182710d",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "`ExpectedNoErrors []` isn’t right here: The list you are passing to it should be the lists of errors you got but by passing the empty lists you are indicating that you got no errors which doesn’t make sense. I would suggest that you use `expectNoErrors` and then just turn the pattern match failure here into an exception.",
        "createdAt" : "2019-07-30T07:29:00Z",
        "updatedAt" : "2019-07-31T18:57:12Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "441add4a-4276-4a93-9420-6d7ef47e206f",
        "parentId" : "b7ce67ab-160b-44ec-91f3-21bac182710d",
        "author" : {
          "login" : "akalburgi",
          "name" : "Anup Kalburgi",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/42743833?v=4"
        },
        "body" : "Now returning back the expected and the actual, in this case, the actual will be empty ",
        "createdAt" : "2019-07-30T16:50:16Z",
        "updatedAt" : "2019-07-31T18:57:12Z",
        "lastEditedBy" : {
          "login" : "akalburgi",
          "name" : "Anup Kalburgi",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/42743833?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "3a390e5baed8d24cb1eac9a25b9951eb49ad4db9",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,111 @@\n+-- Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+-- SPDX-License-Identifier: Apache-2.0\n+module VisualTest\n+   ( main\n+   ) where\n+import DA.Cli.Visual\n+import Data.Either\n+import qualified Test.Tasty.Extended as Tasty\n+import qualified Test.Tasty.HUnit    as Tasty\n+import qualified DA.Pretty as DAP\n+import qualified Development.IDE.Types.Location as D\n+import qualified DA.Daml.LF.Ast as LF\n+import qualified Development.IDE.Core.API as API\n+import qualified Development.IDE.Core.Rules.Daml as API\n+import qualified Data.NameMap as NM\n+import qualified Control.Monad.Reader   as Reader\n+import Development.IDE.Core.API.Testing\n+import System.Environment.Blank (setEnv)\n+import Control.Monad.Except\n+\n+data ExpectedChoices = ExpectedChoices\n+    { _cName :: String\n+    , _consuming :: Bool\n+    } deriving (Eq, Show )\n+data TemplateProp = TemplateProp\n+    { _choices :: [ExpectedChoices]\n+    , _action :: Int\n+    } deriving (Eq, Show)\n+\n+main :: IO ()\n+main = do\n+    setEnv \"TASTY_NUM_THREADS\" \"1\" True\n+    Tasty.deterministicMain visualTests\n+\n+visualTests :: Tasty.TestTree\n+visualTests =\n+    Tasty.testGroup \"Visual tests using Shake API\" [ visualDamlTests ]\n+\n+testCase :: Tasty.TestName -> ShakeTest () -> Tasty.TestTree\n+testCase testName test =\n+    Tasty.testCase testName $ do\n+        res <- runShakeTest Nothing test\n+        Tasty.assertBool (\"Shake test resulted in an error: \" ++ show res) $ isRight res\n+\n+templateChoicesToProps :: TemplateChoices -> TemplateProp\n+templateChoicesToProps tca  = TemplateProp choicesInTpl actl\n+    where choicesInTpl = map (\\ca -> ExpectedChoices ( DAP.renderPretty $ choiceName ca) (choiceConsuming ca)) (choiceAndActions tca)\n+          actl = sum $ map (length . actions ) (choiceAndActions tca)\n+\n+graphTest :: LF.World -> LF.Package -> [TemplateProp] -> Either (String, String) ()\n+graphTest wrld lfPkg tplProps =\n+    if tplProps == map templateChoicesToProps tplPropsActual\n+        then Right ()\n+        else Left (show tplProps, show $ map templateChoicesToProps tplPropsActual)\n+    where tplPropsActual = concatMap (moduleAndTemplates wrld) (NM.toList $ LF.packageModules lfPkg)\n+\n+expectedPoperties :: D.NormalizedFilePath -> [TemplateProp] -> ShakeTest ()\n+expectedPoperties damlFilePath tplProps = do\n+    ideState <- ShakeTest $ Reader.asks steService\n+    mbDalf <- liftIO $ API.runAction ideState (API.getDalf damlFilePath)\n+    case mbDalf of\n+        Just lfPkg -> do\n+            wrld <- Reader.liftIO $ API.runAction ideState (API.worldForFile damlFilePath)\n+            case graphTest wrld lfPkg tplProps of\n+                Right _ -> pure ()\n+                Left (expected , actual) -> throwError (ExpectedNoMisMatch expected actual)\n+        Nothing -> throwError (ExpectedNoErrors [])"
  }
]