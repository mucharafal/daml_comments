[
  {
    "id" : "b2e5b93f-da78-4b7e-b159-a826a79f1fea",
    "prId" : 5266,
    "comments" : [
      {
        "id" : "caabeecb-3dd0-4f9e-bc68-df4c13247828",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Isn't that pretty much the only solution now?",
        "createdAt" : "2020-03-30T10:15:00Z",
        "updatedAt" : "2020-03-30T10:17:08Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "05e20dc0-7365-4468-b5fa-b3d46dbe12ce",
        "parentId" : "caabeecb-3dd0-4f9e-bc68-df4c13247828",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "No you can also change the type name, turn it into an enum in some cases, …",
        "createdAt" : "2020-03-30T10:20:53Z",
        "updatedAt" : "2020-03-30T10:20:53Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "b38f0ac6aeb03673f81f602bc8a140d812da589b",
    "line" : 26,
    "diffHunk" : "@@ -1,1 +143,147 @@        [ \"Record type\", tyNameStr, \"has constructor\", conNameStr\n        , \"with different name.\"\n        , \"Possible solution: Change the constructor name to\", tyNameStr ]\n\ncheckDataTypes :: GHC.ParsedSource -> [(GHC.SrcSpan, String)]"
  },
  {
    "id" : "fb90d543-6815-4c4b-bf3c-cb83a76b68fc",
    "prId" : 4892,
    "comments" : [
      {
        "id" : "d0a4788d-3f94-4e78-83f7-e3ed20604811",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Since there's no pattern matching going on here, I'd suggest to use `let` bindings.\r\n```suggestion\r\n        , let tyNameStr = GHC.occNameString (GHC.rdrNameOcc tyName)\r\n        , let conNameStr = GHC.occNameString (GHC.rdrNameOcc conName)\r\n```",
        "createdAt" : "2020-03-09T11:13:19Z",
        "updatedAt" : "2020-03-09T11:13:50Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "c6ec63e0-3973-4300-879b-9a83202c6537",
        "parentId" : "d0a4788d-3f94-4e78-83f7-e3ed20604811",
        "author" : null,
        "body" : "Changed it in the other PR.",
        "createdAt" : "2020-03-09T13:50:36Z",
        "updatedAt" : "2020-03-09T13:50:36Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "16db994d057f16c87fa9e0043ec09253ca740aeb",
    "line" : 35,
    "diffHunk" : "@@ -1,1 +133,137 @@        , [GHC.L _ conName] <- GHC.getConNames (GHC.unLoc con)\n        , tyNameStr <- GHC.occNameString (GHC.rdrNameOcc tyName)\n        , conNameStr <- GHC.occNameString (GHC.rdrNameOcc conName)\n        , tyNameStr /= conNameStr\n        = Just (ss, message tyNameStr conNameStr)"
  },
  {
    "id" : "9825c495-16e6-4c19-8de0-82fcf6df3a3e",
    "prId" : 4030,
    "comments" : [
      {
        "id" : "a1412696-def9-4be3-a66f-023944bb5a70",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "To add some context this is because the template desugaring from https://github.com/digital-asset/ghc/pull/47 uses `primitive`.",
        "createdAt" : "2020-01-14T09:13:00Z",
        "updatedAt" : "2020-01-15T14:32:49Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "3a6d332937a2569a52ae38499c6fe1022c9fe04c",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +94,98 @@        onModule y = y {\n          GHC.hsmodImports =\n            newImport True \"GHC.Types\" :\n            newImport True \"DA.Internal.Desugar\" :\n            newImport False \"DA.Internal.RebindableSyntax\" : GHC.hsmodImports y"
  },
  {
    "id" : "daa39ad5-c94a-4bd2-b1f5-f1dbca8df352",
    "prId" : 3345,
    "comments" : [
      {
        "id" : "cccb871d-b9f0-42c6-8170-5732a96cbe07",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "We happily accept `data Foo a = Bar | Baz` and turn it into a variant type. However, we don't accept `data Foo a = Bar`. We should fix this inconsistency. I consider the former counterintuitive and would be ok to ban it. To be more precise, I would ban all `data T a_1 ... a_m = C_1 | ... | C_n` for `m >=1` and `n >= 1`. Thoughts, @associahedron @bame-da @cocreature?",
        "createdAt" : "2019-11-06T19:09:15Z",
        "updatedAt" : "2019-11-06T19:09:15Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "612e44a9-d0c9-4caa-802b-a205e3fb91a6",
        "parentId" : "cccb871d-b9f0-42c6-8170-5732a96cbe07",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Once we've decided on this and implemented it, we also need to adjust https://github.com/digital-asset/daml/blob/master/docs/source/app-dev/daml-lf-translation.rst#banned-declarations. (I'm happy to do that myself.)",
        "createdAt" : "2019-11-06T19:10:51Z",
        "updatedAt" : "2019-11-06T19:10:57Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "34795b77-4eab-4ea6-bc61-1d0f8d05c24e",
        "parentId" : "cccb871d-b9f0-42c6-8170-5732a96cbe07",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "I’d rather lift the restriction in LF so we can have `data Foo a = Bar` desugar to an enum. I don’t see why enums can’t have type parameters.",
        "createdAt" : "2019-11-06T19:12:23Z",
        "updatedAt" : "2019-11-06T19:14:26Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "d3ff9da4-f6a6-4668-bd50-f6cff49b172d",
        "parentId" : "cccb871d-b9f0-42c6-8170-5732a96cbe07",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "The problem is--as always--codegen for **Java**: you cannot have `enum Foo<T> { Bar, Baz }`.",
        "createdAt" : "2019-11-06T19:20:06Z",
        "updatedAt" : "2019-11-06T19:20:06Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "6ad73bc5-c6e3-405c-94a0-5e12dc36bf9a",
        "parentId" : "cccb871d-b9f0-42c6-8170-5732a96cbe07",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : ":cry: Is there anything stopping us from desugaring `data Foo a = Bar` as a variant? I find phantom type parameters to be quite useful in general so I’d rather not restrict their usage.",
        "createdAt" : "2019-11-06T19:21:49Z",
        "updatedAt" : "2019-11-06T19:21:49Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "c5fdda17-d172-4ce5-b4b5-ad35153f915c",
        "parentId" : "cccb871d-b9f0-42c6-8170-5732a96cbe07",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "I find translating `data Foo = Bar` into an enum but `data Foo a = Bar` into a variant quite confusing. If you really want the variant with the phantom type parameter, you can always do `data Foo a = Bar ()`. We should probably stick that into the error message.",
        "createdAt" : "2019-11-06T19:36:48Z",
        "updatedAt" : "2019-11-06T19:36:58Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "fdfe162f-46b0-45a9-9278-9b402fad95d2",
        "parentId" : "cccb871d-b9f0-42c6-8170-5732a96cbe07",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Fair point, I guess in that case I’m fine with forbidding it but we should probably first turn it into a warning for a couple of releases.",
        "createdAt" : "2019-11-06T19:38:56Z",
        "updatedAt" : "2019-11-06T19:38:56Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "88c726f1-a672-4715-8148-aa90baa9aad9",
        "parentId" : "cccb871d-b9f0-42c6-8170-5732a96cbe07",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "I agree with going through the deprecation warning cycle. Ideally, we could capture data on how many users actually hit this warning via our telemetry mechanism. @rohanjr do you have an idea how to do this?",
        "createdAt" : "2019-11-06T20:04:57Z",
        "updatedAt" : "2019-11-06T20:04:57Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "221d6ff8-8f96-4b05-a310-6dfb8b761dd2",
        "parentId" : "cccb871d-b9f0-42c6-8170-5732a96cbe07",
        "author" : null,
        "body" : "The error message already says `Ambiguous data type declaration. Enums cannot have type arguments. Write data Foo a = Bar {} for a record or data Foo a = Bar () for a variant.`",
        "createdAt" : "2019-11-07T09:52:14Z",
        "updatedAt" : "2019-11-07T09:52:14Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "d6134f7d-e25a-472f-92a7-06ac604739ea",
        "parentId" : "cccb871d-b9f0-42c6-8170-5732a96cbe07",
        "author" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "body" : "I suppose we could re-enable logging for compiler errors/warnings in our telemetry. We used to do that unintentionally and then disabled it, so it shouldn't be too hard to reenable. It may be overkill for this though?",
        "createdAt" : "2019-11-07T15:50:36Z",
        "updatedAt" : "2019-11-07T15:50:37Z",
        "lastEditedBy" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "0b606fe7-17d6-4160-a059-ffe979fa7104",
        "parentId" : "cccb871d-b9f0-42c6-8170-5732a96cbe07",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "We never deliberately logged all compiler errors. We logged some of them by accident (mainly as a result of failures to get scenario results which is not a bug in our code). I think it makes more sense to specifically log certain cases when we introduce the warning rather than logging all errors.",
        "createdAt" : "2019-11-07T15:52:35Z",
        "updatedAt" : "2019-11-07T15:52:35Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "99416c39-29fc-4b0f-8d3d-0e43fbe53300",
        "parentId" : "cccb871d-b9f0-42c6-8170-5732a96cbe07",
        "author" : null,
        "body" : "It's not a new error though?\r\n\r\n`data Foo a = Bar` was not supported before, and continues to be unsupported. The only thing this PR allows that was previously not allowed is `data Foo = Bar`, with no type variables.\r\n\r\nI could see us supporting `data Foo a = Bar` in the future, possibly by making the Java codegen smarter about enums.",
        "createdAt" : "2019-11-07T15:59:36Z",
        "updatedAt" : "2019-11-07T15:59:36Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "eefd4192-0549-41ed-a5c4-9589855566a7",
        "parentId" : "cccb871d-b9f0-42c6-8170-5732a96cbe07",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "My understanding was that we are talking about introducing an error for `data Foo a = Bar | Baz` which is not an error right now.",
        "createdAt" : "2019-11-07T16:00:42Z",
        "updatedAt" : "2019-11-07T16:00:43Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "1304f20e-0105-404f-89e8-bb1b9cc02cbc",
        "parentId" : "cccb871d-b9f0-42c6-8170-5732a96cbe07",
        "author" : null,
        "body" : "Ah, I see. Sorry.",
        "createdAt" : "2019-11-07T16:04:58Z",
        "updatedAt" : "2019-11-07T16:04:58Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "c83bd73dbde87ea2f73acebd8ebceddb3a7dddd5",
    "line" : 60,
    "diffHunk" : "@@ -1,1 +116,120 @@    -- Generate an error if the declaration is a data type with one constructor and zero arguments\n    getAmbiguousError (GHC.L ss decl)\n      | GHC.TyClD _ GHC.DataDecl{tcdTyVars = dtyvars, tcdDataDefn=GHC.HsDataDefn{dd_cons=[con]}} <- decl -- single con data type\n      , GHC.HsQTvs _ (_:_) <- dtyvars -- with at least one type-level arguments\n      , GHC.PrefixCon [] <- GHC.con_args (GHC.unLoc con) -- but zero value arguments"
  }
]