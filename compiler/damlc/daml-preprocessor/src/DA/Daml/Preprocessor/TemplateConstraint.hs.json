[
  {
    "id" : "88659088-5bd9-46be-a3e3-cdd8253cd656",
    "prId" : 2871,
    "comments" : [
      {
        "id" : "cd3c5865-3672-41c8-b7c5-cf172df080b5",
        "parentId" : null,
        "author" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "body" : "Great comment :D",
        "createdAt" : "2019-09-10T19:54:15Z",
        "updatedAt" : "2019-09-11T08:58:14Z",
        "lastEditedBy" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "40382b239dcd82ff6195ff55027641feacaa396f",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +23,27 @@--\n-- Thus, we add a preprocessing step which rewrites all constraints of\n-- the form `Template (T t_1 ... t_n)` into `TInstance t_1 ... t_n`.\nmodule DA.Daml.Preprocessor.TemplateConstraint (\n    templateConstraintPreprocessor"
  },
  {
    "id" : "89b2a397-4180-446f-a2de-b9ce0516ee57",
    "prId" : 2871,
    "comments" : [
      {
        "id" : "d34e42c4-0109-4eb9-8b48-5f9604ba2624",
        "parentId" : null,
        "author" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "body" : "`HsContext` is a synonym for `[HsType]` as I remember - does Uniplate `descend` not understand that and descend on the contexts?",
        "createdAt" : "2019-09-10T20:15:34Z",
        "updatedAt" : "2019-09-11T08:58:14Z",
        "lastEditedBy" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "1e36c4b3-450e-4513-ad9c-b5a8401888f9",
        "parentId" : "d34e42c4-0109-4eb9-8b48-5f9604ba2624",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Uniplate works type based. Thus, it would descend into all `[HsType]` occurrences. I don't know if they appear somewhere else now or might do so in the future. That's why I prefer to be precise about this.",
        "createdAt" : "2019-09-11T08:49:32Z",
        "updatedAt" : "2019-09-11T08:58:14Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "40382b239dcd82ff6195ff55027641feacaa396f",
    "line" : 45,
    "diffHunk" : "@@ -1,1 +43,47 @@-- | The contexts of class and data definitions do not live inside an\n-- `HsType` but in their respective AST nodes. That's why we need to chase\n-- them down separately.\nonTyClDecl :: TyClDecl GhcPs -> TyClDecl GhcPs\nonTyClDecl decl = case decl of"
  },
  {
    "id" : "368e8cc2-606e-414c-b306-93bedf1ced10",
    "prId" : 2871,
    "comments" : [
      {
        "id" : "486f7323-aff1-454f-8fa1-cfe90a041dd9",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Can we at least check the module here as well?",
        "createdAt" : "2019-09-11T06:15:16Z",
        "updatedAt" : "2019-09-11T08:58:14Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "7995d58c-355f-4af6-9b53-e36ff2bae858",
        "parentId" : "486f7323-aff1-454f-8fa1-cfe90a041dd9",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "The module name would be the alias the user picks when importing the module containing the `Template` class. Thus, there's nothing we could really check for.",
        "createdAt" : "2019-09-11T08:50:25Z",
        "updatedAt" : "2019-09-11T08:58:14Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "40382b239dcd82ff6195ff55027641feacaa396f",
    "line" : 59,
    "diffHunk" : "@@ -1,1 +57,61 @@onContext :: HsContext GhcPs -> HsContext GhcPs\nonContext = map . fmap $ \\case\n    HsAppTy _ (L _ (HsTyVar _ _ (L _ (occNameString . rdrNameOcc -> \"Template\")))) (L _ t)\n        | Just t' <- instantifyType t\n        -> t'"
  }
]