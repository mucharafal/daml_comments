[
  {
    "id" : "d20cf1fa-6761-4a1c-baae-00253fcfe280",
    "prId" : 2597,
    "comments" : [
      {
        "id" : "6c98723f-d378-4a38-bdd1-135647d51fcc",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "That description tells you less than the module name which at least mentions `Visualize`. Either make it more useful or just remove it.",
        "createdAt" : "2019-08-21T07:12:06Z",
        "updatedAt" : "2019-08-26T14:36:04Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "1b1fd2cb67bf8f3d8e5f6fa576f088fc36bd49fc",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,56 @@\n+-- Copyright (c) 2019 The DAML Authors. All rights reserved.\n+-- SPDX-License-Identifier: Apache-2.0\n+\n+-- | Execute Daml commands"
  },
  {
    "id" : "4633a4b5-40e7-4446-a0d4-41950355e6a5",
    "prId" : 2597,
    "comments" : [
      {
        "id" : "6c82c355-8693-4b88-a084-ccc9cd6fe536",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Please don’t indent align newly added imports.",
        "createdAt" : "2019-08-21T07:12:26Z",
        "updatedAt" : "2019-08-26T14:36:04Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "1b1fd2cb67bf8f3d8e5f6fa576f088fc36bd49fc",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,56 @@\n+-- Copyright (c) 2019 The DAML Authors. All rights reserved.\n+-- SPDX-License-Identifier: Apache-2.0\n+\n+-- | Execute Daml commands\n+\n+module DA.Daml.LanguageServer.Visualize\n+    ( setCommandHandler\n+    ) where\n+\n+import qualified Data.Aeson as Aeson\n+import           Language.Haskell.LSP.Types"
  },
  {
    "id" : "0691b4f1-cd6a-4a0c-bd6e-3eb861867d99",
    "prId" : 2597,
    "comments" : [
      {
        "id" : "4982541c-9a03-4ed5-857b-cfff97171b1a",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "I don’t understand the reasoning behind grouping and sorting the imports this way. Unless there is a good reason to split up imports (e.g. to differentiate between imports from external libraries and our own code), I prefer to just have a single block of imports sorted alphabetically by the module name.",
        "createdAt" : "2019-08-21T07:14:12Z",
        "updatedAt" : "2019-08-26T14:36:04Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "a2db51bb-0401-47d3-a7dd-2c28e1f98c38",
        "parentId" : "4982541c-9a03-4ed5-857b-cfff97171b1a",
        "author" : {
          "login" : "akalburgi",
          "name" : "Anup Kalburgi",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/42743833?v=4"
        },
        "body" : "I was following the same style within the modules in that folder. I have no strong preference here. Will get rid of it ",
        "createdAt" : "2019-08-21T19:35:39Z",
        "updatedAt" : "2019-08-26T14:36:05Z",
        "lastEditedBy" : {
          "login" : "akalburgi",
          "name" : "Anup Kalburgi",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/42743833?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "1b1fd2cb67bf8f3d8e5f6fa576f088fc36bd49fc",
    "line" : 12,
    "diffHunk" : "@@ -0,0 +1,56 @@\n+-- Copyright (c) 2019 The DAML Authors. All rights reserved.\n+-- SPDX-License-Identifier: Apache-2.0\n+\n+-- | Execute Daml commands\n+\n+module DA.Daml.LanguageServer.Visualize\n+    ( setCommandHandler\n+    ) where\n+\n+import qualified Data.Aeson as Aeson\n+import           Language.Haskell.LSP.Types\n+import           Development.IDE.LSP.Server\n+\n+import Development.IDE.Types.Logger\n+\n+import qualified Data.Text as T"
  },
  {
    "id" : "5af2db8d-38dd-429d-9b67-d558d3d10365",
    "prId" : 2597,
    "comments" : [
      {
        "id" : "fbfb4786-1ee8-4c69-878f-d319d66fca56",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Command handlers are expected to be extensible. If you get commands that you cannot handle, just ignore them.",
        "createdAt" : "2019-08-21T07:15:41Z",
        "updatedAt" : "2019-08-26T14:36:04Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "421886f4-5cb7-4a77-98ef-10cebad1e4ca",
        "parentId" : "fbfb4786-1ee8-4c69-878f-d319d66fca56",
        "author" : {
          "login" : "akalburgi",
          "name" : "Anup Kalburgi",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/42743833?v=4"
        },
        "body" : "`PartialHandlers` is expected to be extensible but I think we will have to handle all the ExecuteCommands once we have `ExecuteCommandHandler`. I am not sure how we can ignore without getting incomplete match warning",
        "createdAt" : "2019-08-21T19:34:51Z",
        "updatedAt" : "2019-08-26T14:36:05Z",
        "lastEditedBy" : {
          "login" : "akalburgi",
          "name" : "Anup Kalburgi",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/42743833?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "4e6bfa48-f5ff-4175-831f-71d36d8f6a16",
        "parentId" : "fbfb4786-1ee8-4c69-878f-d319d66fca56",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Good point, we cannot handle commands that partially handle a request at the moment. That will need some refactoring. I would suggest that you combine the two cases here (the first where you have arguments but the wrong command and the second where you don’t have arguments into a single case and log both the command name and the arguments.",
        "createdAt" : "2019-08-22T08:06:21Z",
        "updatedAt" : "2019-08-26T14:36:05Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "0b48d8c8-a513-4919-bac9-631dbfa4e93b",
        "parentId" : "fbfb4786-1ee8-4c69-878f-d319d66fca56",
        "author" : {
          "login" : "akalburgi",
          "name" : "Anup Kalburgi",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/42743833?v=4"
        },
        "body" : "Cool. Will do that ",
        "createdAt" : "2019-08-22T14:33:32Z",
        "updatedAt" : "2019-08-26T14:36:05Z",
        "lastEditedBy" : {
          "login" : "akalburgi",
          "name" : "Anup Kalburgi",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/42743833?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "1b1fd2cb67bf8f3d8e5f6fa576f088fc36bd49fc",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,56 @@\n+-- Copyright (c) 2019 The DAML Authors. All rights reserved.\n+-- SPDX-License-Identifier: Apache-2.0\n+\n+-- | Execute Daml commands\n+\n+module DA.Daml.LanguageServer.Visualize\n+    ( setCommandHandler\n+    ) where\n+\n+import qualified Data.Aeson as Aeson\n+import           Language.Haskell.LSP.Types\n+import           Development.IDE.LSP.Server\n+\n+import Development.IDE.Types.Logger\n+\n+import qualified Data.Text as T\n+\n+import Development.IDE.Core.Rules\n+import Development.IDE.Core.Service.Daml\n+\n+import Development.IDE.Core.Shake\n+import Development.IDE.Core.RuleTypes.Daml\n+\n+import Language.Haskell.LSP.Messages\n+import qualified Language.Haskell.LSP.Core as LSP\n+import Development.IDE.Types.Location\n+\n+collectTexts :: List Aeson.Value -> Maybe NormalizedFilePath\n+collectTexts (List [Aeson.String file])  = Just (toNormalizedFilePath (T.unpack file))\n+collectTexts _= Nothing\n+\n+onCommand\n+    :: IdeState\n+    -> ExecuteCommandParams\n+    -> IO Aeson.Value\n+onCommand ide execParsms = case execParsms of\n+    ExecuteCommandParams \"daml/damlVisualize\" (Just _arguments) -> do\n+        case collectTexts _arguments of\n+            Just mod -> do\n+                    logInfo (ideLogger ide) \"Generating visualization for current daml project\"\n+                    Just dots <- runAction ide (use GenerateVisualization mod)\n+                    return $ Aeson.String dots\n+            Nothing     -> do\n+                logError (ideLogger ide) \"Expected a single module to visualize, got multiple module\"\n+                return $ Aeson.String \"Expected a single module to visualize, got multiple module\"\n+    ExecuteCommandParams  _ (Just _arguments) -> do"
  },
  {
    "id" : "9bcd2c87-864e-42d6-9551-28dcac66c2de",
    "prId" : 2597,
    "comments" : [
      {
        "id" : "a646723e-5d02-44a5-a533-6d0ebfbbbb9d",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "This is still not going via the error mechanism in LSP. It looks like doing that will require modifications to `withResponse` so I’m fine with doing that in a separate PR but please add a `TODO`.",
        "createdAt" : "2019-08-21T07:15:59Z",
        "updatedAt" : "2019-08-26T14:36:04Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "69a3c577-6974-4726-bc28-1fb9e2de4700",
        "parentId" : "a646723e-5d02-44a5-a533-6d0ebfbbbb9d",
        "author" : {
          "login" : "akalburgi",
          "name" : "Anup Kalburgi",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/42743833?v=4"
        },
        "body" : "sounds good. Done",
        "createdAt" : "2019-08-21T19:36:18Z",
        "updatedAt" : "2019-08-26T14:36:05Z",
        "lastEditedBy" : {
          "login" : "akalburgi",
          "name" : "Anup Kalburgi",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/42743833?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "1b1fd2cb67bf8f3d8e5f6fa576f088fc36bd49fc",
    "line" : 48,
    "diffHunk" : "@@ -0,0 +1,56 @@\n+-- Copyright (c) 2019 The DAML Authors. All rights reserved.\n+-- SPDX-License-Identifier: Apache-2.0\n+\n+-- | Execute Daml commands\n+\n+module DA.Daml.LanguageServer.Visualize\n+    ( setCommandHandler\n+    ) where\n+\n+import qualified Data.Aeson as Aeson\n+import           Language.Haskell.LSP.Types\n+import           Development.IDE.LSP.Server\n+\n+import Development.IDE.Types.Logger\n+\n+import qualified Data.Text as T\n+\n+import Development.IDE.Core.Rules\n+import Development.IDE.Core.Service.Daml\n+\n+import Development.IDE.Core.Shake\n+import Development.IDE.Core.RuleTypes.Daml\n+\n+import Language.Haskell.LSP.Messages\n+import qualified Language.Haskell.LSP.Core as LSP\n+import Development.IDE.Types.Location\n+\n+collectTexts :: List Aeson.Value -> Maybe NormalizedFilePath\n+collectTexts (List [Aeson.String file])  = Just (toNormalizedFilePath (T.unpack file))\n+collectTexts _= Nothing\n+\n+onCommand\n+    :: IdeState\n+    -> ExecuteCommandParams\n+    -> IO Aeson.Value\n+onCommand ide execParsms = case execParsms of\n+    ExecuteCommandParams \"daml/damlVisualize\" (Just _arguments) -> do\n+        case collectTexts _arguments of\n+            Just mod -> do\n+                    logInfo (ideLogger ide) \"Generating visualization for current daml project\"\n+                    Just dots <- runAction ide (use GenerateVisualization mod)\n+                    return $ Aeson.String dots\n+            Nothing     -> do\n+                logError (ideLogger ide) \"Expected a single module to visualize, got multiple module\"\n+                return $ Aeson.String \"Expected a single module to visualize, got multiple module\""
  },
  {
    "id" : "7e0023ff-d06c-4a69-901a-892596db858b",
    "prId" : 2597,
    "comments" : [
      {
        "id" : "6288721c-306f-450b-8f9f-38e69ad38992",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Missing trailing newline.",
        "createdAt" : "2019-08-21T07:17:33Z",
        "updatedAt" : "2019-08-26T14:36:04Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "1b1fd2cb67bf8f3d8e5f6fa576f088fc36bd49fc",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,56 @@\n+-- Copyright (c) 2019 The DAML Authors. All rights reserved.\n+-- SPDX-License-Identifier: Apache-2.0\n+\n+-- | Execute Daml commands\n+\n+module DA.Daml.LanguageServer.Visualize\n+    ( setCommandHandler\n+    ) where\n+\n+import qualified Data.Aeson as Aeson\n+import           Language.Haskell.LSP.Types\n+import           Development.IDE.LSP.Server\n+\n+import Development.IDE.Types.Logger\n+\n+import qualified Data.Text as T\n+\n+import Development.IDE.Core.Rules\n+import Development.IDE.Core.Service.Daml\n+\n+import Development.IDE.Core.Shake\n+import Development.IDE.Core.RuleTypes.Daml\n+\n+import Language.Haskell.LSP.Messages\n+import qualified Language.Haskell.LSP.Core as LSP\n+import Development.IDE.Types.Location\n+\n+collectTexts :: List Aeson.Value -> Maybe NormalizedFilePath\n+collectTexts (List [Aeson.String file])  = Just (toNormalizedFilePath (T.unpack file))\n+collectTexts _= Nothing\n+\n+onCommand\n+    :: IdeState\n+    -> ExecuteCommandParams\n+    -> IO Aeson.Value\n+onCommand ide execParsms = case execParsms of\n+    ExecuteCommandParams \"daml/damlVisualize\" (Just _arguments) -> do\n+        case collectTexts _arguments of\n+            Just mod -> do\n+                    logInfo (ideLogger ide) \"Generating visualization for current daml project\"\n+                    Just dots <- runAction ide (use GenerateVisualization mod)\n+                    return $ Aeson.String dots\n+            Nothing     -> do\n+                logError (ideLogger ide) \"Expected a single module to visualize, got multiple module\"\n+                return $ Aeson.String \"Expected a single module to visualize, got multiple module\"\n+    ExecuteCommandParams  _ (Just _arguments) -> do\n+        logError (ideLogger ide) \"Command is not supported\"\n+        return Aeson.Null\n+    ExecuteCommandParams  _ Nothing -> do\n+        logError (ideLogger ide) \"Missing DAML module to visualize\"\n+        return Aeson.Null\n+\n+setCommandHandler ::PartialHandlers\n+setCommandHandler = PartialHandlers $ \\WithMessage{..} x -> return x {\n+    LSP.executeCommandHandler = withResponse RspExecuteCommand $ const onCommand\n+}"
  }
]