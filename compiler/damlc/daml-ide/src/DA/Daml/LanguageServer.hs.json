[
  {
    "id" : "4a38d780-2a05-4174-8d18-0f02284f6890",
    "prId" : 2597,
    "comments" : [
      {
        "id" : "48f8429f-eeed-48b6-bf67-10e3f490205e",
        "parentId" : null,
        "author" : {
          "login" : "akalburgi",
          "name" : "Anup Kalburgi",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/42743833?v=4"
        },
        "body" : "May we should move it to a different module?",
        "createdAt" : "2019-08-19T21:00:35Z",
        "updatedAt" : "2019-08-26T14:36:04Z",
        "lastEditedBy" : {
          "login" : "akalburgi",
          "name" : "Anup Kalburgi",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/42743833?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "46a24f42-f91b-4dd1-9562-24c82b452d88",
        "parentId" : "48f8429f-eeed-48b6-bf67-10e3f490205e",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Yes please! I would suggest that you move all of this to `Development.IDE.LSP.Visualize`.",
        "createdAt" : "2019-08-20T06:48:27Z",
        "updatedAt" : "2019-08-26T14:36:04Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "ea1ce61d-a8f4-4493-8c4a-d68ac5f78896",
        "parentId" : "48f8429f-eeed-48b6-bf67-10e3f490205e",
        "author" : {
          "login" : "akalburgi",
          "name" : "Anup Kalburgi",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/42743833?v=4"
        },
        "body" : "moved it to `DA.Daml.LanguageServer.Visualize` along side codelenses ",
        "createdAt" : "2019-08-20T19:54:39Z",
        "updatedAt" : "2019-08-26T14:36:04Z",
        "lastEditedBy" : {
          "login" : "akalburgi",
          "name" : "Anup Kalburgi",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/42743833?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "1b1fd2cb67bf8f3d8e5f6fa576f088fc36bd49fc",
    "line" : null,
    "diffHunk" : "@@ -68,6 +77,39 @@ setIgnoreOptionalHandlers = PartialHandlers $ \\WithMessage{..} x -> return x\n     -- $/setTraceNotification which we want to ignore.\n     where optionalPrefix = \"$/\"\n \n+filesFromExecParams :: List Aeson.Value -> [NormalizedFilePath]\n+filesFromExecParams (List files) = map (toNormalizedFilePath . T.unpack) (concatMap fileStringToPath files)\n+            where fileStringToPath :: Aeson.Value -> [T.Text]\n+                  fileStringToPath (Aeson.String x) = [x]\n+                  fileStringToPath (Aeson.Array arr) = concatMap fileStringToPath arr\n+                  fileStringToPath _ex = error (\"Failed to get daml files from workspace\" ++ show _ex )\n+\n+onCommand"
  },
  {
    "id" : "1d84a1c6-75a6-46bb-8158-645e69140707",
    "prId" : 2597,
    "comments" : [
      {
        "id" : "5e5637e6-10cd-40d1-b3c8-2e26e87f0677",
        "parentId" : null,
        "author" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "body" : "As discussed, might be worth having a comment here as to why the `Nothing` case should not happen.",
        "createdAt" : "2019-08-19T21:32:49Z",
        "updatedAt" : "2019-08-26T14:36:04Z",
        "lastEditedBy" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "32fe6496-1662-4d54-b467-b8e390674233",
        "parentId" : "5e5637e6-10cd-40d1-b3c8-2e26e87f0677",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "The `Nothing` case can absolutely happen even with `useWithStale`: If you open the projects the first time and it does not compile you will get `Nothing`.",
        "createdAt" : "2019-08-20T06:56:01Z",
        "updatedAt" : "2019-08-26T14:36:04Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "a071f993-f4f1-417d-b28f-bac77b945ce6",
        "parentId" : "5e5637e6-10cd-40d1-b3c8-2e26e87f0677",
        "author" : {
          "login" : "akalburgi",
          "name" : "Anup Kalburgi",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/42743833?v=4"
        },
        "body" : "Fixed",
        "createdAt" : "2019-08-20T17:01:36Z",
        "updatedAt" : "2019-08-26T14:36:04Z",
        "lastEditedBy" : {
          "login" : "akalburgi",
          "name" : "Anup Kalburgi",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/42743833?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "1b1fd2cb67bf8f3d8e5f6fa576f088fc36bd49fc",
    "line" : null,
    "diffHunk" : "@@ -68,6 +77,39 @@ setIgnoreOptionalHandlers = PartialHandlers $ \\WithMessage{..} x -> return x\n     -- $/setTraceNotification which we want to ignore.\n     where optionalPrefix = \"$/\"\n \n+filesFromExecParams :: List Aeson.Value -> [NormalizedFilePath]\n+filesFromExecParams (List files) = map (toNormalizedFilePath . T.unpack) (concatMap fileStringToPath files)\n+            where fileStringToPath :: Aeson.Value -> [T.Text]\n+                  fileStringToPath (Aeson.String x) = [x]\n+                  fileStringToPath (Aeson.Array arr) = concatMap fileStringToPath arr\n+                  fileStringToPath _ex = error (\"Failed to get daml files from workspace\" ++ show _ex )\n+\n+onCommand\n+    :: IdeState\n+    -> ExecuteCommandParams\n+    -> IO Aeson.Value\n+onCommand ide ExecuteCommandParams{..} = do\n+    case _arguments of\n+        Nothing -> return $ Aeson.String \"No .daml files where found in the IDE workspace\"\n+        Just path -> do\n+            case filesFromExecParams path of\n+                (head : rest) -> do\n+                        logInfo (ideLogger ide) \"Generating visualization for current daml project\"\n+                        mbmodules <- mapM (\\f -> runAction ide (useWithStale GenerateDalf f)) rest\n+                        Just (WhnfPackage package, _) <- runAction ide (useWithStale GeneratePackage head)\n+                        pkgMap <- runAction ide  (useNoFile_ GeneratePackageMap)\n+                        let extpkgs = map dalfPackagePkg $ Map.elems pkgMap\n+                        let wrld = LF.initWorldSelf extpkgs package\n+                        let modules = map (fst . fromJust ) mbmodules"
  },
  {
    "id" : "d050ce97-d055-412d-84e9-8e5e43f69e89",
    "prId" : 2597,
    "comments" : [
      {
        "id" : "143e7c5c-5eeb-423e-bab1-df304eb8ef58",
        "parentId" : null,
        "author" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "body" : "```suggestion\r\n                _ -> return $ Aeson.String \"Could not construct world and the module list.\"\r\n```",
        "createdAt" : "2019-08-19T21:35:54Z",
        "updatedAt" : "2019-08-26T14:36:04Z",
        "lastEditedBy" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "1b1fd2cb67bf8f3d8e5f6fa576f088fc36bd49fc",
    "line" : null,
    "diffHunk" : "@@ -68,6 +77,39 @@ setIgnoreOptionalHandlers = PartialHandlers $ \\WithMessage{..} x -> return x\n     -- $/setTraceNotification which we want to ignore.\n     where optionalPrefix = \"$/\"\n \n+filesFromExecParams :: List Aeson.Value -> [NormalizedFilePath]\n+filesFromExecParams (List files) = map (toNormalizedFilePath . T.unpack) (concatMap fileStringToPath files)\n+            where fileStringToPath :: Aeson.Value -> [T.Text]\n+                  fileStringToPath (Aeson.String x) = [x]\n+                  fileStringToPath (Aeson.Array arr) = concatMap fileStringToPath arr\n+                  fileStringToPath _ex = error (\"Failed to get daml files from workspace\" ++ show _ex )\n+\n+onCommand\n+    :: IdeState\n+    -> ExecuteCommandParams\n+    -> IO Aeson.Value\n+onCommand ide ExecuteCommandParams{..} = do\n+    case _arguments of\n+        Nothing -> return $ Aeson.String \"No .daml files where found in the IDE workspace\"\n+        Just path -> do\n+            case filesFromExecParams path of\n+                (head : rest) -> do\n+                        logInfo (ideLogger ide) \"Generating visualization for current daml project\"\n+                        mbmodules <- mapM (\\f -> runAction ide (useWithStale GenerateDalf f)) rest\n+                        Just (WhnfPackage package, _) <- runAction ide (useWithStale GeneratePackage head)\n+                        pkgMap <- runAction ide  (useNoFile_ GeneratePackageMap)\n+                        let extpkgs = map dalfPackagePkg $ Map.elems pkgMap\n+                        let wrld = LF.initWorldSelf extpkgs package\n+                        let modules = map (fst . fromJust ) mbmodules\n+                        let dots = T.pack $ Visual.dotFileGen modules wrld\n+                        return $ Aeson.String dots\n+                _ -> return $ Aeson.String \"Could not consutruct world and the module list.\""
  },
  {
    "id" : "627d5e69-3475-4894-8636-578e3fcb08bd",
    "prId" : 2597,
    "comments" : [
      {
        "id" : "f6d7ce19-e8df-48d5-9f5b-75d84666cc34",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "I don’t think there is any point in trying to be clever here. Just ensure that you always pass an array from the client and you don’t need to worry about handling singletons specially (or nested arrays which shouldn’t be handled at all). Given that all of LSP is based around URIs, I would also suggest that if we go down the route of having the client pass one or more files, they should be passed as `TextDocumentIdentifier`",
        "createdAt" : "2019-08-20T06:50:58Z",
        "updatedAt" : "2019-08-26T14:36:04Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "1b1fd2cb67bf8f3d8e5f6fa576f088fc36bd49fc",
    "line" : null,
    "diffHunk" : "@@ -68,6 +77,39 @@ setIgnoreOptionalHandlers = PartialHandlers $ \\WithMessage{..} x -> return x\n     -- $/setTraceNotification which we want to ignore.\n     where optionalPrefix = \"$/\"\n \n+filesFromExecParams :: List Aeson.Value -> [NormalizedFilePath]\n+filesFromExecParams (List files) = map (toNormalizedFilePath . T.unpack) (concatMap fileStringToPath files)\n+            where fileStringToPath :: Aeson.Value -> [T.Text]\n+                  fileStringToPath (Aeson.String x) = [x]"
  },
  {
    "id" : "c8a69789-5602-4012-a165-6d8053bd9eac",
    "prId" : 2597,
    "comments" : [
      {
        "id" : "be0b4a98-2462-4164-ab6c-7346f81b87f3",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "LSP has a proper mechanism for returning errors. Let’s use that instead of returning errors in the success field.",
        "createdAt" : "2019-08-20T06:51:36Z",
        "updatedAt" : "2019-08-26T14:36:04Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "1b1fd2cb67bf8f3d8e5f6fa576f088fc36bd49fc",
    "line" : null,
    "diffHunk" : "@@ -68,6 +77,39 @@ setIgnoreOptionalHandlers = PartialHandlers $ \\WithMessage{..} x -> return x\n     -- $/setTraceNotification which we want to ignore.\n     where optionalPrefix = \"$/\"\n \n+filesFromExecParams :: List Aeson.Value -> [NormalizedFilePath]\n+filesFromExecParams (List files) = map (toNormalizedFilePath . T.unpack) (concatMap fileStringToPath files)\n+            where fileStringToPath :: Aeson.Value -> [T.Text]\n+                  fileStringToPath (Aeson.String x) = [x]\n+                  fileStringToPath (Aeson.Array arr) = concatMap fileStringToPath arr\n+                  fileStringToPath _ex = error (\"Failed to get daml files from workspace\" ++ show _ex )\n+\n+onCommand\n+    :: IdeState\n+    -> ExecuteCommandParams\n+    -> IO Aeson.Value\n+onCommand ide ExecuteCommandParams{..} = do\n+    case _arguments of\n+        Nothing -> return $ Aeson.String \"No .daml files where found in the IDE workspace\""
  },
  {
    "id" : "9ef135e0-d42c-4740-aa50-b251745082f3",
    "prId" : 2597,
    "comments" : [
      {
        "id" : "7a14b52c-f990-4876-8a75-89aacae61f43",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "You can combine all the calls to `runAction` in a single call which is faster and simpler.",
        "createdAt" : "2019-08-20T06:52:48Z",
        "updatedAt" : "2019-08-26T14:36:04Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "1b1fd2cb67bf8f3d8e5f6fa576f088fc36bd49fc",
    "line" : null,
    "diffHunk" : "@@ -68,6 +77,39 @@ setIgnoreOptionalHandlers = PartialHandlers $ \\WithMessage{..} x -> return x\n     -- $/setTraceNotification which we want to ignore.\n     where optionalPrefix = \"$/\"\n \n+filesFromExecParams :: List Aeson.Value -> [NormalizedFilePath]\n+filesFromExecParams (List files) = map (toNormalizedFilePath . T.unpack) (concatMap fileStringToPath files)\n+            where fileStringToPath :: Aeson.Value -> [T.Text]\n+                  fileStringToPath (Aeson.String x) = [x]\n+                  fileStringToPath (Aeson.Array arr) = concatMap fileStringToPath arr\n+                  fileStringToPath _ex = error (\"Failed to get daml files from workspace\" ++ show _ex )\n+\n+onCommand\n+    :: IdeState\n+    -> ExecuteCommandParams\n+    -> IO Aeson.Value\n+onCommand ide ExecuteCommandParams{..} = do\n+    case _arguments of\n+        Nothing -> return $ Aeson.String \"No .daml files where found in the IDE workspace\"\n+        Just path -> do\n+            case filesFromExecParams path of\n+                (head : rest) -> do\n+                        logInfo (ideLogger ide) \"Generating visualization for current daml project\"\n+                        mbmodules <- mapM (\\f -> runAction ide (useWithStale GenerateDalf f)) rest"
  },
  {
    "id" : "bef9d983-14fb-4f5b-96fb-33bb2c525c05",
    "prId" : 2597,
    "comments" : [
      {
        "id" : "c67f603e-a305-4ea4-a95b-547df2e11d3a",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "I don’t think `useWithStale` is a good idea. here. `useWithStale` is mostly for functionality that absolutely has to work while the file does not compile since you want it to get the file back to a compiling state, e.g., completion. The visualization should just fail if the file does not compile.",
        "createdAt" : "2019-08-20T06:55:07Z",
        "updatedAt" : "2019-08-26T14:36:04Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "1b1fd2cb67bf8f3d8e5f6fa576f088fc36bd49fc",
    "line" : null,
    "diffHunk" : "@@ -68,6 +77,39 @@ setIgnoreOptionalHandlers = PartialHandlers $ \\WithMessage{..} x -> return x\n     -- $/setTraceNotification which we want to ignore.\n     where optionalPrefix = \"$/\"\n \n+filesFromExecParams :: List Aeson.Value -> [NormalizedFilePath]\n+filesFromExecParams (List files) = map (toNormalizedFilePath . T.unpack) (concatMap fileStringToPath files)\n+            where fileStringToPath :: Aeson.Value -> [T.Text]\n+                  fileStringToPath (Aeson.String x) = [x]\n+                  fileStringToPath (Aeson.Array arr) = concatMap fileStringToPath arr\n+                  fileStringToPath _ex = error (\"Failed to get daml files from workspace\" ++ show _ex )\n+\n+onCommand\n+    :: IdeState\n+    -> ExecuteCommandParams\n+    -> IO Aeson.Value\n+onCommand ide ExecuteCommandParams{..} = do\n+    case _arguments of\n+        Nothing -> return $ Aeson.String \"No .daml files where found in the IDE workspace\"\n+        Just path -> do\n+            case filesFromExecParams path of\n+                (head : rest) -> do\n+                        logInfo (ideLogger ide) \"Generating visualization for current daml project\"\n+                        mbmodules <- mapM (\\f -> runAction ide (useWithStale GenerateDalf f)) rest\n+                        Just (WhnfPackage package, _) <- runAction ide (useWithStale GeneratePackage head)"
  },
  {
    "id" : "863d7cfe-44a2-4c18-b581-38973a202405",
    "prId" : 2597,
    "comments" : [
      {
        "id" : "0460fe90-62cf-43e3-bc5c-339e1790a977",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Instead of `mapM (\\x -> use…)` you can use `uses` which allows things to run in parallel.",
        "createdAt" : "2019-08-20T06:56:57Z",
        "updatedAt" : "2019-08-26T14:36:04Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "bd93e426-5927-411c-afba-51f9b99c1368",
        "parentId" : "0460fe90-62cf-43e3-bc5c-339e1790a977",
        "author" : {
          "login" : "akalburgi",
          "name" : "Anup Kalburgi",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/42743833?v=4"
        },
        "body" : "We do not need this anymore but I did know there was a thing to run in parallel thanks ",
        "createdAt" : "2019-08-20T16:47:18Z",
        "updatedAt" : "2019-08-26T14:36:04Z",
        "lastEditedBy" : {
          "login" : "akalburgi",
          "name" : "Anup Kalburgi",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/42743833?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "1b1fd2cb67bf8f3d8e5f6fa576f088fc36bd49fc",
    "line" : null,
    "diffHunk" : "@@ -68,6 +77,39 @@ setIgnoreOptionalHandlers = PartialHandlers $ \\WithMessage{..} x -> return x\n     -- $/setTraceNotification which we want to ignore.\n     where optionalPrefix = \"$/\"\n \n+filesFromExecParams :: List Aeson.Value -> [NormalizedFilePath]\n+filesFromExecParams (List files) = map (toNormalizedFilePath . T.unpack) (concatMap fileStringToPath files)\n+            where fileStringToPath :: Aeson.Value -> [T.Text]\n+                  fileStringToPath (Aeson.String x) = [x]\n+                  fileStringToPath (Aeson.Array arr) = concatMap fileStringToPath arr\n+                  fileStringToPath _ex = error (\"Failed to get daml files from workspace\" ++ show _ex )\n+\n+onCommand\n+    :: IdeState\n+    -> ExecuteCommandParams\n+    -> IO Aeson.Value\n+onCommand ide ExecuteCommandParams{..} = do\n+    case _arguments of\n+        Nothing -> return $ Aeson.String \"No .daml files where found in the IDE workspace\"\n+        Just path -> do\n+            case filesFromExecParams path of\n+                (head : rest) -> do\n+                        logInfo (ideLogger ide) \"Generating visualization for current daml project\"\n+                        mbmodules <- mapM (\\f -> runAction ide (useWithStale GenerateDalf f)) rest"
  },
  {
    "id" : "61c69854-6145-440d-bbb7-138394974553",
    "prId" : 2597,
    "comments" : [
      {
        "id" : "0bbbb0c5-323e-4187-b722-59be96f59c8f",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "The pattern match is not safe, see below for an explanation of when this can be `Nothing`.",
        "createdAt" : "2019-08-20T07:00:32Z",
        "updatedAt" : "2019-08-26T14:36:04Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "c12ebc6b-8b35-484d-91ab-d8dfe268be26",
        "parentId" : "0bbbb0c5-323e-4187-b722-59be96f59c8f",
        "author" : {
          "login" : "akalburgi",
          "name" : "Anup Kalburgi",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/42743833?v=4"
        },
        "body" : "No more doing this",
        "createdAt" : "2019-08-20T17:00:43Z",
        "updatedAt" : "2019-08-26T14:36:04Z",
        "lastEditedBy" : {
          "login" : "akalburgi",
          "name" : "Anup Kalburgi",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/42743833?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "1b1fd2cb67bf8f3d8e5f6fa576f088fc36bd49fc",
    "line" : null,
    "diffHunk" : "@@ -68,6 +77,39 @@ setIgnoreOptionalHandlers = PartialHandlers $ \\WithMessage{..} x -> return x\n     -- $/setTraceNotification which we want to ignore.\n     where optionalPrefix = \"$/\"\n \n+filesFromExecParams :: List Aeson.Value -> [NormalizedFilePath]\n+filesFromExecParams (List files) = map (toNormalizedFilePath . T.unpack) (concatMap fileStringToPath files)\n+            where fileStringToPath :: Aeson.Value -> [T.Text]\n+                  fileStringToPath (Aeson.String x) = [x]\n+                  fileStringToPath (Aeson.Array arr) = concatMap fileStringToPath arr\n+                  fileStringToPath _ex = error (\"Failed to get daml files from workspace\" ++ show _ex )\n+\n+onCommand\n+    :: IdeState\n+    -> ExecuteCommandParams\n+    -> IO Aeson.Value\n+onCommand ide ExecuteCommandParams{..} = do\n+    case _arguments of\n+        Nothing -> return $ Aeson.String \"No .daml files where found in the IDE workspace\"\n+        Just path -> do\n+            case filesFromExecParams path of\n+                (head : rest) -> do\n+                        logInfo (ideLogger ide) \"Generating visualization for current daml project\"\n+                        mbmodules <- mapM (\\f -> runAction ide (useWithStale GenerateDalf f)) rest\n+                        Just (WhnfPackage package, _) <- runAction ide (useWithStale GeneratePackage head)"
  },
  {
    "id" : "bcb22c42-08fa-43e6-8a94-21f2cf447844",
    "prId" : 2597,
    "comments" : [
      {
        "id" : "70f98bae-4c80-4857-8e8b-15416717ecef",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "If you change the visualization to just accept a world you should be able to simplify this a fair bit an donly have one call to `GeneratePackage` and one to `GeneratePackageMap`.",
        "createdAt" : "2019-08-20T07:01:39Z",
        "updatedAt" : "2019-08-26T14:36:04Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "a0e7bfe7-6e39-4d61-96b1-8d07770b8157",
        "parentId" : "70f98bae-4c80-4857-8e8b-15416717ecef",
        "author" : {
          "login" : "akalburgi",
          "name" : "Anup Kalburgi",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/42743833?v=4"
        },
        "body" : "Yup now it is reduced to using one`GeneratePackage` and one `GeneratePackageMap`",
        "createdAt" : "2019-08-20T16:48:31Z",
        "updatedAt" : "2019-08-26T14:36:04Z",
        "lastEditedBy" : {
          "login" : "akalburgi",
          "name" : "Anup Kalburgi",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/42743833?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "1b1fd2cb67bf8f3d8e5f6fa576f088fc36bd49fc",
    "line" : null,
    "diffHunk" : "@@ -68,6 +77,39 @@ setIgnoreOptionalHandlers = PartialHandlers $ \\WithMessage{..} x -> return x\n     -- $/setTraceNotification which we want to ignore.\n     where optionalPrefix = \"$/\"\n \n+filesFromExecParams :: List Aeson.Value -> [NormalizedFilePath]\n+filesFromExecParams (List files) = map (toNormalizedFilePath . T.unpack) (concatMap fileStringToPath files)\n+            where fileStringToPath :: Aeson.Value -> [T.Text]\n+                  fileStringToPath (Aeson.String x) = [x]\n+                  fileStringToPath (Aeson.Array arr) = concatMap fileStringToPath arr\n+                  fileStringToPath _ex = error (\"Failed to get daml files from workspace\" ++ show _ex )\n+\n+onCommand\n+    :: IdeState\n+    -> ExecuteCommandParams\n+    -> IO Aeson.Value\n+onCommand ide ExecuteCommandParams{..} = do\n+    case _arguments of\n+        Nothing -> return $ Aeson.String \"No .daml files where found in the IDE workspace\"\n+        Just path -> do\n+            case filesFromExecParams path of\n+                (head : rest) -> do\n+                        logInfo (ideLogger ide) \"Generating visualization for current daml project\"\n+                        mbmodules <- mapM (\\f -> runAction ide (useWithStale GenerateDalf f)) rest\n+                        Just (WhnfPackage package, _) <- runAction ide (useWithStale GeneratePackage head)\n+                        pkgMap <- runAction ide  (useNoFile_ GeneratePackageMap)"
  },
  {
    "id" : "bb9ae9ed-77be-481d-be4f-fa73730b4fcf",
    "prId" : 2597,
    "comments" : [
      {
        "id" : "1e780483-866d-4338-9b7c-752a1ed83623",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "The name `fileStringToPath` is very misleading. Maybe something like `collectTexts` is better.",
        "createdAt" : "2019-08-20T07:02:50Z",
        "updatedAt" : "2019-08-26T14:36:04Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "29df1b1b-807b-4428-9af4-2cd43db43202",
        "parentId" : "1e780483-866d-4338-9b7c-752a1ed83623",
        "author" : {
          "login" : "akalburgi",
          "name" : "Anup Kalburgi",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/42743833?v=4"
        },
        "body" : "Simplified further we will not need that function ",
        "createdAt" : "2019-08-20T20:27:39Z",
        "updatedAt" : "2019-08-26T14:36:04Z",
        "lastEditedBy" : {
          "login" : "akalburgi",
          "name" : "Anup Kalburgi",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/42743833?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "1b1fd2cb67bf8f3d8e5f6fa576f088fc36bd49fc",
    "line" : null,
    "diffHunk" : "@@ -68,6 +77,39 @@ setIgnoreOptionalHandlers = PartialHandlers $ \\WithMessage{..} x -> return x\n     -- $/setTraceNotification which we want to ignore.\n     where optionalPrefix = \"$/\"\n \n+filesFromExecParams :: List Aeson.Value -> [NormalizedFilePath]\n+filesFromExecParams (List files) = map (toNormalizedFilePath . T.unpack) (concatMap fileStringToPath files)\n+            where fileStringToPath :: Aeson.Value -> [T.Text]"
  },
  {
    "id" : "ccd8a12a-1331-4c99-a5c5-32c27a30c7f5",
    "prId" : 2597,
    "comments" : [
      {
        "id" : "35c3891e-6b03-424f-88e8-d267ac6cd6c8",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "If you go for option 3 as I described above, you can also avoid the weird special treatment of the first file which seems rather confusing.",
        "createdAt" : "2019-08-20T07:03:12Z",
        "updatedAt" : "2019-08-26T14:36:04Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "6c371078-6af2-48d6-b523-9eef79b7e452",
        "parentId" : "35c3891e-6b03-424f-88e8-d267ac6cd6c8",
        "author" : {
          "login" : "akalburgi",
          "name" : "Anup Kalburgi",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/42743833?v=4"
        },
        "body" : "Yup this is simplified now ",
        "createdAt" : "2019-08-20T16:50:59Z",
        "updatedAt" : "2019-08-26T14:36:04Z",
        "lastEditedBy" : {
          "login" : "akalburgi",
          "name" : "Anup Kalburgi",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/42743833?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "1b1fd2cb67bf8f3d8e5f6fa576f088fc36bd49fc",
    "line" : null,
    "diffHunk" : "@@ -68,6 +77,39 @@ setIgnoreOptionalHandlers = PartialHandlers $ \\WithMessage{..} x -> return x\n     -- $/setTraceNotification which we want to ignore.\n     where optionalPrefix = \"$/\"\n \n+filesFromExecParams :: List Aeson.Value -> [NormalizedFilePath]\n+filesFromExecParams (List files) = map (toNormalizedFilePath . T.unpack) (concatMap fileStringToPath files)\n+            where fileStringToPath :: Aeson.Value -> [T.Text]\n+                  fileStringToPath (Aeson.String x) = [x]\n+                  fileStringToPath (Aeson.Array arr) = concatMap fileStringToPath arr\n+                  fileStringToPath _ex = error (\"Failed to get daml files from workspace\" ++ show _ex )\n+\n+onCommand\n+    :: IdeState\n+    -> ExecuteCommandParams\n+    -> IO Aeson.Value\n+onCommand ide ExecuteCommandParams{..} = do\n+    case _arguments of\n+        Nothing -> return $ Aeson.String \"No .daml files where found in the IDE workspace\"\n+        Just path -> do\n+            case filesFromExecParams path of\n+                (head : rest) -> do"
  },
  {
    "id" : "f88105ef-7b2e-4397-b0a1-58d2db268430",
    "prId" : 2597,
    "comments" : [
      {
        "id" : "5b998c32-2a08-49eb-99ee-b82213e5e4bc",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Please don’t include unnecessary whitespace changes. They only clutter diffs.",
        "createdAt" : "2019-08-21T07:11:04Z",
        "updatedAt" : "2019-08-26T14:36:04Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "1b1fd2cb67bf8f3d8e5f6fa576f088fc36bd49fc",
    "line" : null,
    "diffHunk" : "@@ -27,12 +27,14 @@ import Development.IDE.Core.Rules\n import Development.IDE.Core.Rules.Daml\n import Development.IDE.Core.Service.Daml\n \n+import DA.Daml.LanguageServer.Visualize\n import qualified Network.URI                               as URI\n \n import Language.Haskell.LSP.Messages\n import qualified Language.Haskell.LSP.Core as LSP\n \n \n+"
  },
  {
    "id" : "1dc31abd-e7c3-4862-b725-061564aaf246",
    "prId" : 2597,
    "comments" : [
      {
        "id" : "aaec7ab7-a91c-4451-b2f2-4f9b26413c78",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Why did you remove the trailing newline?",
        "createdAt" : "2019-08-21T07:11:20Z",
        "updatedAt" : "2019-08-26T14:36:04Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "78bc5b71-2738-4967-aeb2-00fe4e7d95ab",
        "parentId" : "aaec7ab7-a91c-4451-b2f2-4f9b26413c78",
        "author" : {
          "login" : "akalburgi",
          "name" : "Anup Kalburgi",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/42743833?v=4"
        },
        "body" : ":( Not sure adding it back",
        "createdAt" : "2019-08-21T19:36:36Z",
        "updatedAt" : "2019-08-26T14:36:05Z",
        "lastEditedBy" : {
          "login" : "akalburgi",
          "name" : "Anup Kalburgi",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/42743833?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "1b1fd2cb67bf8f3d8e5f6fa576f088fc36bd49fc",
    "line" : null,
    "diffHunk" : "@@ -101,11 +105,11 @@ runLanguageServer\n     :: ((FromServerMessage -> IO ()) -> VFSHandle -> ClientCapabilities -> IO IdeState)\n     -> IO ()\n runLanguageServer getIdeState = do\n-    let handlers = setHandlersKeepAlive <> setHandlersVirtualResource <> setHandlersCodeLens <> setIgnoreOptionalHandlers\n+    let handlers = setHandlersKeepAlive <> setHandlersVirtualResource <> setHandlersCodeLens <> setIgnoreOptionalHandlers <> setCommandHandler\n     LS.runLanguageServer options handlers getIdeState\n \n \n options :: LSP.Options\n options = def\n     { LSP.codeLensProvider = Just $ CodeLensOptions $ Just False\n-    }\n+    }"
  },
  {
    "id" : "4973c531-ed0c-4142-8f6d-e9d8011bd09a",
    "prId" : 2244,
    "comments" : [
      {
        "id" : "279059de-1b30-4e22-876d-8dff696d85bd",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "```suggestion\r\n    -- $/setTraceNotification which we want to ignore.\r\n```",
        "createdAt" : "2019-07-22T12:38:40Z",
        "updatedAt" : "2019-07-22T12:43:28Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "880df64380a1e28692a45bd038742dabb59d1deb",
    "line" : null,
    "diffHunk" : "@@ -50,6 +50,24 @@ setHandlersKeepAlive = PartialHandlers $ \\WithMessage{..} x -> return x\n             _ -> whenJust (LSP.customRequestHandler x) ($ msg)\n     }\n \n+setIgnoreOptionalHandlers :: PartialHandlers\n+setIgnoreOptionalHandlers = PartialHandlers $ \\WithMessage{..} x -> return x\n+    {LSP.customRequestHandler = Just $ \\msg@RequestMessage{_method} ->\n+         case _method of\n+             CustomClientMethod s\n+               | optionalPrefix `T.isPrefixOf` s -> pure ()\n+             _ -> whenJust (LSP.customRequestHandler x) ($ msg)\n+    ,LSP.customNotificationHandler = Just $ \\msg@NotificationMessage{_method} ->\n+         case _method of\n+             CustomClientMethod s\n+               | optionalPrefix `T.isPrefixOf` s -> pure ()\n+             _ -> whenJust (LSP.customNotificationHandler x) ($ msg)\n+    }\n+    -- | According to the LSP spec methods starting with $/ are optional\n+    -- and can be ignored. In particular, VSCode sometimes seems to send\n+    -- $/setTraceNotification which we wan tto ignore."
  }
]