[
  {
    "id" : "03e3fb2d-4950-49fc-a713-e0c62b543473",
    "prId" : 3009,
    "comments" : [
      {
        "id" : "d1ad0a75-e76a-47f1-a8e1-a8974ecb4f5a",
        "parentId" : null,
        "author" : {
          "login" : "akalburgi",
          "name" : "Anup Kalburgi",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/42743833?v=4"
        },
        "body" : "The weight is not strictly necessary, but giving a default here saves me writing some JS. In reality, weight is used to determine the thickness of the arrow in the network svg ",
        "createdAt" : "2019-09-24T18:11:38Z",
        "updatedAt" : "2019-09-27T13:33:14Z",
        "lastEditedBy" : {
          "login" : "akalburgi",
          "name" : "Anup Kalburgi",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/42743833?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "4b0640d679a39b59928bde9f985c4fdc99ab02c1",
    "line" : 73,
    "diffHunk" : "@@ -1,1 +108,112 @@d3LinksFromGraphEdges :: Graph -> [D3Link]\nd3LinksFromGraphEdges g = map edgeToD3Link (edges g)\n    where edgeToD3Link edge = D3Link (nodeId (fst edge)) (nodeId (snd edge)) 10\n\nd3NodesFromGraph :: Graph -> [D3Node]"
  },
  {
    "id" : "6d71bbda-40f3-4303-942b-707cb3c48e21",
    "prId" : 2673,
    "comments" : [
      {
        "id" : "0b2a141a-d672-4c5f-b7f1-2a26b485b6ad",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Can this function run into an infinite loop? What happens if I have something like:\r\n\r\n```haskell\r\ndata X = X { y : Y }\r\ndata Y = Y { x : X }\r\n```\r\nAdmittedly that is not a useful type in DAML (since it is strict) but if you change it to something like `data X = X { y : Maybe Y }` it becomes a useful type and afaict the only reason why that won’t cause an infinite loop at the moment is that you don’t recurse into variants at all.",
        "createdAt" : "2019-08-28T06:59:06Z",
        "updatedAt" : "2019-09-05T14:29:06Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "f43659c1-2df3-400d-8b3d-78356aed2b7a",
        "parentId" : "0b2a141a-d672-4c5f-b7f1-2a26b485b6ad",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "That comment still applies afaict. At least it deserves a comment and maybe a TODO that we might also want to recurse on variants at some point which will require changes.",
        "createdAt" : "2019-09-05T12:21:02Z",
        "updatedAt" : "2019-09-05T14:29:06Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "81a75469-584d-4b39-afc1-07bf9a5de9ef",
        "parentId" : "0b2a141a-d672-4c5f-b7f1-2a26b485b6ad",
        "author" : {
          "login" : "akalburgi",
          "name" : "Anup Kalburgi",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/42743833?v=4"
        },
        "body" : "Yes, I will add a TODO. Will revisit this again soon ",
        "createdAt" : "2019-09-05T14:04:24Z",
        "updatedAt" : "2019-09-05T14:29:06Z",
        "lastEditedBy" : {
          "login" : "akalburgi",
          "name" : "Anup Kalburgi",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/42743833?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "f132fa8499359d43acb8be985d25f7293c76ce03",
    "line" : 70,
    "diffHunk" : "@@ -1,1 +173,177 @@\n-- TODO: Anup This will fail if we were to recursively continue exploring the AST.\ntypeConFields :: LF.Qualified LF.TypeConName -> LF.World -> [T.Text]\ntypeConFields qName world = case LF.lookupDataType qName world of\n  Right dataType -> case LF.dataCons dataType of"
  },
  {
    "id" : "c0e94eb5-020a-4875-9123-f96203a92793",
    "prId" : 2673,
    "comments" : [
      {
        "id" : "f748a81e-3d92-414d-be90-1916ca37ae82",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "It looks like currently you simply flatten all nested records into a single list of fields. Can we display them in a more hierarchical way? Throwing away the structure that the user created doesn’t seem like a nice way to present this.\r\nI could also see this blowing up on large records if you recurse without a limit. Maybe we should make this configurable, e.g., initially have a single parameter for recursing on fields where `0` does not display any fields in the graph (i.e. the behavior without this PR), 1 goes down a single level, 2 recurses once, …",
        "createdAt" : "2019-08-28T07:08:17Z",
        "updatedAt" : "2019-09-05T14:29:06Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "8bc0ca81-4e4d-4640-8e5e-38155a451a89",
        "parentId" : "f748a81e-3d92-414d-be90-1916ca37ae82",
        "author" : {
          "login" : "akalburgi",
          "name" : "Anup Kalburgi",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/42743833?v=4"
        },
        "body" : "The nested nature of it preserved it is separated by a dot similar to what we do in scenario service table output. I am not sure if I understood the comment correctly correct me if my understanding is wrong ",
        "createdAt" : "2019-08-28T15:59:43Z",
        "updatedAt" : "2019-09-05T14:29:06Z",
        "lastEditedBy" : {
          "login" : "akalburgi",
          "name" : "Anup Kalburgi",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/42743833?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "1333d110-e9e8-4d34-832f-e42a4cc6b57b",
        "parentId" : "f748a81e-3d92-414d-be90-1916ca37ae82",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Oh I see, I missed the dots. Thanks for the explanation. I’m still a bit worried that this doesn’t scale to large nested records so I think the limit is probably still a good idea but I’m fine with that being added separately.",
        "createdAt" : "2019-08-28T16:25:54Z",
        "updatedAt" : "2019-09-05T14:29:06Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "f132fa8499359d43acb8be985d25f7293c76ce03",
    "line" : 71,
    "diffHunk" : "@@ -1,1 +174,178 @@-- TODO: Anup This will fail if we were to recursively continue exploring the AST.\ntypeConFields :: LF.Qualified LF.TypeConName -> LF.World -> [T.Text]\ntypeConFields qName world = case LF.lookupDataType qName world of\n  Right dataType -> case LF.dataCons dataType of\n    LF.DataRecord re -> concatMap (typeConFieldsNames world) re"
  },
  {
    "id" : "cf410b80-4fd4-4b50-bf87-6e10bd8b3702",
    "prId" : 2673,
    "comments" : [
      {
        "id" : "8e6bb465-13af-4259-8da2-eff052aaa8bf",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Why did you change the type here? It looks like you still only use the template. Changing the type seems fine in principle (although I’m not sure it helps with anything here either) but I would suggest that you also change `subGraphHeader` in that case. It seems odd to have different types for `subGraphHeader` and `subGraphEnd`.",
        "createdAt" : "2019-08-28T07:18:05Z",
        "updatedAt" : "2019-09-05T14:29:06Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "2c6af1d4-7341-4929-b11f-97e67fb4d4fb",
        "parentId" : "8e6bb465-13af-4259-8da2-eff052aaa8bf",
        "author" : {
          "login" : "akalburgi",
          "name" : "Anup Kalburgi",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/42743833?v=4"
        },
        "body" : "Ah I see that could look odd. I had to change this as I need to access all the fields to add to the label in towards the end of the subgraph. Let me change the type of Header so that it is same as subgraph end. ",
        "createdAt" : "2019-08-28T18:03:04Z",
        "updatedAt" : "2019-09-05T14:29:06Z",
        "lastEditedBy" : {
          "login" : "akalburgi",
          "name" : "Anup Kalburgi",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/42743833?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "a9c4dc6c-f776-4965-ba55-f77df2efde0f",
        "parentId" : "8e6bb465-13af-4259-8da2-eff052aaa8bf",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Oh I see, I missed the call to `templateFields` below. Somehow my browser search failed me :(",
        "createdAt" : "2019-08-28T18:10:29Z",
        "updatedAt" : "2019-09-05T14:29:06Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "f132fa8499359d43acb8be985d25f7293c76ce03",
    "line" : 105,
    "diffHunk" : "@@ -1,1 +216,220 @@\nsubGraphEnd :: SubGraph -> String\nsubGraphEnd sg = \"label=<\" ++ tHeader ++ tTitle ++ tBody  ++ tclose ++ \">\" ++ \";color=\" ++ \"blue\" ++ \"\\n}\"\n    where tHeader = \"<table align = \\\"left\\\" border=\\\"0\\\" cellborder=\\\"0\\\" cellspacing=\\\"1\\\">\\n\"\n          tTitle =  \"<tr><td align=\\\"center\\\"><b>\" ++  DAP.renderPretty (LF.tplTypeCon $ clusterTemplate sg) ++ \"</b></td></tr>\""
  },
  {
    "id" : "59e4554a-af1b-40f9-9402-be42f582b1f5",
    "prId" : 2597,
    "comments" : [
      {
        "id" : "c5409a95-02e2-445c-8827-d7d33ee6d916",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Instead of accepting a list of modules and a world, why not just use the world and the `_worldSelf` field for the package and the modules that you visualize?",
        "createdAt" : "2019-08-20T06:58:42Z",
        "updatedAt" : "2019-08-26T14:36:04Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "abae57e4-1b13-4170-b897-a8bf8e5c9e58",
        "parentId" : "c5409a95-02e2-445c-8827-d7d33ee6d916",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "That comment still applies afaict.",
        "createdAt" : "2019-08-26T06:56:48Z",
        "updatedAt" : "2019-08-26T14:36:05Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "47416ce2-c5cc-4259-bab1-cdf17eea6ac2",
        "parentId" : "c5409a95-02e2-445c-8827-d7d33ee6d916",
        "author" : {
          "login" : "akalburgi",
          "name" : "Anup Kalburgi",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/42743833?v=4"
        },
        "body" : "I will do that in a different PR. ",
        "createdAt" : "2019-08-26T14:35:32Z",
        "updatedAt" : "2019-08-26T14:36:05Z",
        "lastEditedBy" : {
          "login" : "akalburgi",
          "name" : "Anup Kalburgi",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/42743833?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "1b1fd2cb67bf8f3d8e5f6fa576f088fc36bd49fc",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +200,204 @@\n\ndotFileGen :: [LF.Module] -> LF.World -> String\ndotFileGen modules world = constructDotGraph subgraphClusters graphConnectedEdges\n    where templatesAndModules = concatMap (moduleAndTemplates world) modules"
  }
]