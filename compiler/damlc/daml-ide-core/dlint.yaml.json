[
  {
    "id" : "8bf39552-8189-42bd-a4ac-c7e9cb558fcd",
    "prId" : 6423,
    "comments" : [
      {
        "id" : "2ed695be-7018-47ae-8936-854cb3599433",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Totally agree that disabling this is sensible. IME a lot of DAML projects have already disabled this since it’s pretty aggressive and triggers even for fairly tiny amounts of duplication.",
        "createdAt" : "2020-06-19T06:57:24Z",
        "updatedAt" : "2020-06-19T17:52:14Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "8d1d4fdf697ac5c029167f8d8e4fd28d3f308c8f",
    "line" : 7,
    "diffHunk" : "@@ -663,6 +663,10 @@\n \n # Not popular or useful\n - ignore: {name: Use camelCase}\n+# Interacts badly with desugaring and the hack for\n+# -Wunused-matches. Also, it's generally considered by Neil to be\n+# dodgy.\n+- ignore: {name: Reduce duplication}"
  },
  {
    "id" : "f2e1ffa0-2889-4923-b1be-ff23cdd000da",
    "prId" : 5933,
    "comments" : [
      {
        "id" : "54e80d1c-af69-4b95-9f31-c354b6bfc5f6",
        "parentId" : null,
        "author" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "body" : "@da-tanabe I think just delete these. We can always add them back. ",
        "createdAt" : "2020-05-11T16:02:00Z",
        "updatedAt" : "2020-05-11T16:16:42Z",
        "lastEditedBy" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "9634052f047346dc30a8f7b9a90a21a80f05c3b3",
    "line" : null,
    "diffHunk" : "@@ -392,13 +392,14 @@\n \n     # MONAD LIST\n \n-    - warn: {lhs: fmap unzip (mapA f x), rhs: DA.Action.mapAndUnzipM f x}\n-    - warn: {lhs: sequence (zipWith f x y), rhs: DA.Action.zipWithM f x y}\n-    - warn: {lhs: sequence_ (zipWith f x y), rhs: DA.Action.zipWithM_ f x y}\n-    - warn: {lhs: sequence (replicate n x), rhs: DA.Action.replicateM n x}\n-    - warn: {lhs: sequence_ (replicate n x), rhs: DA.Action.replicateM_ n x}\n-    - warn: {lhs: mapA f (replicate n x), rhs: DA.Action.replicateM n (f x)}\n-    - warn: {lhs: mapA_ f (replicate n x), rhs: DA.Action.replicateM_ n (f x)}\n+    # TODO(DKT): Commented out because neither `mapAndUnzipA` nor `zipWithA` are in the stdlib"
  },
  {
    "id" : "38c696c2-cbbd-4219-bc10-3c251caf1951",
    "prId" : 5627,
    "comments" : [
      {
        "id" : "ac2f75d2-d606-462e-8e0c-9f83b2e2c963",
        "parentId" : null,
        "author" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "body" : "Is it intentional that the `==` has become `compare`?",
        "createdAt" : "2020-04-20T12:51:45Z",
        "updatedAt" : "2020-04-20T16:35:59Z",
        "lastEditedBy" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "d88fc792-acd1-4fc5-bf7f-5f207af425c3",
        "parentId" : "ac2f75d2-d606-462e-8e0c-9f83b2e2c963",
        "author" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "body" : "Ok, answering myself, I expect that it if you are not supplying a custom predicate then it is.",
        "createdAt" : "2020-04-20T12:53:37Z",
        "updatedAt" : "2020-04-20T16:35:59Z",
        "lastEditedBy" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "a92af1db-8763-4aa9-a531-d15e6ce65acd",
        "parentId" : "ac2f75d2-d606-462e-8e0c-9f83b2e2c963",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Our `dedupBy` avoids being quadratic by relying on `Ord`. That’s why it needs `compare` instead of `==`.",
        "createdAt" : "2020-04-20T12:54:49Z",
        "updatedAt" : "2020-04-20T16:35:59Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "51f26b39b842152e0fd5bf09a1ee553c2cd58f96",
    "line" : 5,
    "diffHunk" : "@@ -193,7 +193,7 @@\n     - warn: {lhs: intersectBy (==), rhs: intersect}\n     - warn: {lhs: maximumBy compare, rhs: maximum}\n     - warn: {lhs: minimumBy compare, rhs: minimum}\n-    - warn: {lhs: nubBy (==), rhs: nub}\n+    - warn: {lhs: dedupBy compare, rhs: dedup}"
  },
  {
    "id" : "e4306d40-5036-417c-9bae-ea66a2fd16f5",
    "prId" : 5123,
    "comments" : [
      {
        "id" : "4326ea71-b92b-4527-8425-c410907e2026",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "That hint is wrong. `unwords` operates on `Text` which is not a list in `DAML`.",
        "createdAt" : "2020-03-22T15:04:44Z",
        "updatedAt" : "2020-03-22T16:01:39Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "004e1b41-c7a0-46ed-9a15-6bc19f8b83b1",
        "parentId" : "4326ea71-b92b-4527-8425-c410907e2026",
        "author" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "body" : "Removed the rule",
        "createdAt" : "2020-03-22T15:24:38Z",
        "updatedAt" : "2020-03-22T16:01:39Z",
        "lastEditedBy" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "ef219f1763d7684a1ed673985f1f6409a04531a8",
    "line" : null,
    "diffHunk" : "@@ -117,12 +117,12 @@\n     - hint: {lhs: \"[] == x\", rhs: null x}\n     - hint: {lhs: length x /= 0, rhs: not (null x), name: Use null}\n     - hint: {lhs: 0 /= length x, rhs: not (null x), name: Use null}\n-    - hint: {lhs: \"\\\\x -> [x]\", rhs: \"(:[])\", name: \"Use :\"}\n+    - hint: {lhs: \"\\\\x -> [x]\", rhs: \"(::[])\", name: \"Use :\"}\n     - warn: {lhs: map (uncurry f) (zip x y), rhs: zipWith f x y}\n     - hint: {lhs: map f (zip x y), rhs: zipWith (curry f) x y, side: isVar f}\n     - warn: {lhs: not (elem x y), rhs: notElem x y}\n     - hint: {lhs: foldr f z (map g x), rhs: foldr (f . g) z x, name: Fuse foldr/map}\n-    - warn: {lhs: \"x ++ concatMap (' ':) y\", rhs: \"unwords (x:y)\"}\n+    - warn: {lhs: \"x ++ concatMap (' '::) y\", rhs: \"unwords (x::y)\"}"
  },
  {
    "id" : "a392b993-addf-4c17-812e-485c9d5a66eb",
    "prId" : 5123,
    "comments" : [
      {
        "id" : "abf76eaf-1a09-4258-b02f-a3a10f99d75a",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "```suggestion\r\n    - hint: {lhs: \"\\\\x -> [x]\", rhs: \"(::[])\", name: \"Use ::\"}\r\n```",
        "createdAt" : "2020-03-22T15:05:19Z",
        "updatedAt" : "2020-03-22T16:01:39Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "3328688b-457a-4506-91da-91170088dc47",
        "parentId" : "abf76eaf-1a09-4258-b02f-a3a10f99d75a",
        "author" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "body" : "Done",
        "createdAt" : "2020-03-22T15:24:46Z",
        "updatedAt" : "2020-03-22T16:01:39Z",
        "lastEditedBy" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "ef219f1763d7684a1ed673985f1f6409a04531a8",
    "line" : null,
    "diffHunk" : "@@ -117,12 +117,12 @@\n     - hint: {lhs: \"[] == x\", rhs: null x}\n     - hint: {lhs: length x /= 0, rhs: not (null x), name: Use null}\n     - hint: {lhs: 0 /= length x, rhs: not (null x), name: Use null}\n-    - hint: {lhs: \"\\\\x -> [x]\", rhs: \"(:[])\", name: \"Use :\"}\n+    - hint: {lhs: \"\\\\x -> [x]\", rhs: \"(::[])\", name: \"Use :\"}"
  },
  {
    "id" : "5944d168-26f0-4390-bbd3-627370547fba",
    "prId" : 3795,
    "comments" : [
      {
        "id" : "8b123f84-5a78-4a35-86ed-70cf19e2e24a",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Afaik we don’t have `&` in DAML. I guess this rule doesn’t do any harm in that case but it’s a bit confusing.",
        "createdAt" : "2019-12-10T07:14:06Z",
        "updatedAt" : "2019-12-10T11:48:31Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "fb972ec0-faeb-4505-b788-bc5dc51d760f",
        "parentId" : "8b123f84-5a78-4a35-86ed-70cf19e2e24a",
        "author" : null,
        "body" : "Ok",
        "createdAt" : "2019-12-10T11:14:40Z",
        "updatedAt" : "2019-12-10T11:48:31Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "94eaa0caa2c659b5aabcea0d36a851681ce58f93",
    "line" : 197,
    "diffHunk" : "@@ -276,13 +246,13 @@\n     - warn: {lhs: f (fst p) (snd p), rhs: uncurry f p}\n     - warn: {lhs: ($) . f, rhs: f, name: Redundant $}\n     - warn: {lhs: (f $), rhs: f, name: Redundant $}\n-    - warn: {lhs: (Data.Function.& f), rhs: f, name: Redundant Data.Function.&}"
  },
  {
    "id" : "3e64b349-62e3-42a6-a31a-acb1d36d0080",
    "prId" : 3795,
    "comments" : [
      {
        "id" : "3587889f-8467-4d86-9e0a-f56ebcee81b8",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "We do have type applications in DAML so why did you remove this check?",
        "createdAt" : "2019-12-10T07:14:31Z",
        "updatedAt" : "2019-12-10T11:48:31Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "0cff4664-35fe-4fac-a763-7735c8e11cf0",
        "parentId" : "3587889f-8467-4d86-9e0a-f56ebcee81b8",
        "author" : null,
        "body" : "Don't know. Looks like a mistake.",
        "createdAt" : "2019-12-10T11:14:56Z",
        "updatedAt" : "2019-12-10T11:48:31Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "94eaa0caa2c659b5aabcea0d36a851681ce58f93",
    "line" : 201,
    "diffHunk" : "@@ -276,13 +246,13 @@\n     - warn: {lhs: f (fst p) (snd p), rhs: uncurry f p}\n     - warn: {lhs: ($) . f, rhs: f, name: Redundant $}\n     - warn: {lhs: (f $), rhs: f, name: Redundant $}\n-    - warn: {lhs: (Data.Function.& f), rhs: f, name: Redundant Data.Function.&}\n+    - warn: {lhs: (& f), rhs: f, name: Redundant &}\n     - hint: {lhs: \\x -> y, rhs: const y, side: isAtom y && not (isWildcard y)}\n         # If any isWildcard recursively then x may be used but not mentioned explicitly\n     - warn: {lhs: flip f x y, rhs: f y x, side: isApp original}\n-    - warn: {lhs: id x, rhs: x, side: not (isTypeApp x)}"
  },
  {
    "id" : "2852b720-6414-4248-87d0-9ab6893cf16d",
    "prId" : 3795,
    "comments" : [
      {
        "id" : "cbf30425-ecdf-4505-8085-5319a1337f09",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "`IncreasesLaziness` doesn’t make sense for DAML.",
        "createdAt" : "2019-12-10T07:14:53Z",
        "updatedAt" : "2019-12-10T11:48:31Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "c648d1a2-c718-4fa5-9d44-69d44bbdc46d",
        "parentId" : "cbf30425-ecdf-4505-8085-5319a1337f09",
        "author" : null,
        "body" : "Yes. Will remove all such notes.",
        "createdAt" : "2019-12-10T11:16:49Z",
        "updatedAt" : "2019-12-10T11:48:31Z",
        "lastEditedBy" : null,
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "94eaa0caa2c659b5aabcea0d36a851681ce58f93",
    "line" : null,
    "diffHunk" : "@@ -330,36 +300,47 @@\n     # warn \"Too strict if\": {lhs: if c then f x else f y, rhs: f (if c then x else y), note: IncreasesLaziness}\n     # also breaks types, see #87\n \n-    # ARROW\n-\n-    - warn: {lhs: id *** g, rhs: second g}\n-    - warn: {lhs: f *** id, rhs: first f}\n-    - ignore: {lhs: zip (map f x) (map g x), rhs: map (f Control.Arrow.&&& g) x}\n-    - ignore: {lhs: \"\\\\(x,y) -> (f x, g y)\", rhs: f Control.Arrow.*** g}\n-    - ignore: {lhs: \"\\\\x -> (f x, g x)\", rhs: f Control.Arrow.&&& g}\n-    - ignore: {lhs: \"\\\\(x,y) -> (f x,y)\", rhs: Control.Arrow.first f}\n-    - ignore: {lhs: \"\\\\(x,y) -> (x,f y)\", rhs: Control.Arrow.second f}\n-    - ignore: {lhs: \"(f (fst x), g (snd x))\", rhs: (f Control.Arrow.*** g) x}\n-    - hint: {lhs: \"(fst x, snd x)\", rhs:  x, note: DecreasesLaziness, name: Redundant pair}\n+    # BIFUNCTOR\n+\n+    - warn: {lhs: bimap identity g, rhs: second g}\n+    - warn: {lhs: bimap f identity, rhs: first f}\n+    - warn: {lhs: first identity, rhs: identity}\n+    - warn: {lhs: second identity, rhs: identity}\n+    - warn: {lhs: bimap identity identity, rhs: id}\n+    - warn: {lhs: first f (second g x), rhs: bimap f g x}\n+    - warn: {lhs: second g (first f x), rhs: bimap f g x}\n+    - warn: {lhs: first f1 (first f2 x), rhs: first (f1 . f2) x}\n+    - warn: {lhs: second g1 (second g2 x), rhs: second (g1 . g2) x}\n+    - warn: {lhs: bimap f1 f2 (bimap g1 g2 x), rhs: bimap (f1 . f2) (g1 . g2) x}\n+    - warn: {lhs: first f1 (bimap f2 g x), rhs: bimap (f1 . f2) g x}\n+    - warn: {lhs: second g1 (bimap f g2 x), rhs: bimap f (g1 . g2) x}\n+    - warn: {lhs: bimap f1 g (first f2 x), rhs: bimap (f1 . f2) g x}\n+    - warn: {lhs: bimap f g1 (second g2 x), rhs: bimap f (g1 . g2) x}\n+    - hint: {lhs: \"\\\\(x,y) -> (f x, g y)\", rhs: DA.Bifunctor.bimap f g, note: IncreasesLaziness}"
  },
  {
    "id" : "465aaa9e-046c-49f4-9e60-650a1fc447c2",
    "prId" : 3795,
    "comments" : [
      {
        "id" : "8bcc51eb-47e3-4ca4-b79f-2e82eb8b1b89",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "All these `maybe`s should be `optional`.",
        "createdAt" : "2019-12-10T07:16:02Z",
        "updatedAt" : "2019-12-10T11:48:31Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "11a24870-e5ee-4483-ba63-679fbc7317d9",
        "parentId" : "8bcc51eb-47e3-4ca4-b79f-2e82eb8b1b89",
        "author" : null,
        "body" : "Ok",
        "createdAt" : "2019-12-10T11:20:23Z",
        "updatedAt" : "2019-12-10T11:48:31Z",
        "lastEditedBy" : null,
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "94eaa0caa2c659b5aabcea0d36a851681ce58f93",
    "line" : null,
    "diffHunk" : "@@ -477,46 +458,48 @@\n \n     # MAYBE\n \n-    - warn: {lhs: maybe x id, rhs: Data.Maybe.fromMaybe x}\n-    - warn: {lhs: maybe False (const True), rhs: Data.Maybe.isJust}\n-    - warn: {lhs: maybe True (const False), rhs: Data.Maybe.isNothing}\n-    - warn: {lhs: maybe False (== x), rhs: (== Just x)}\n-    - warn: {lhs: maybe True (/= x), rhs: (/= Just x)}\n-    - warn: {lhs: not (isNothing x), rhs: isJust x}\n-    - warn: {lhs: not (isJust x), rhs: isNothing x}\n+    - warn: {lhs: maybe x identity, rhs: DA.Optional.fromOptional x}"
  },
  {
    "id" : "86e98e47-bb0b-4939-8fb7-f2ae71b4eedf",
    "prId" : 3795,
    "comments" : [
      {
        "id" : "4ef4d057-348f-4a1b-b77d-6ecf432099ea",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "```suggestion\r\n    - warn: {lhs: optional mempty, rhs: foldMap}\r\n```",
        "createdAt" : "2019-12-10T07:18:00Z",
        "updatedAt" : "2019-12-10T11:48:31Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "9bb2fe5a-e778-4d01-8010-59e7757e51f4",
        "parentId" : "4ef4d057-348f-4a1b-b77d-6ecf432099ea",
        "author" : null,
        "body" : "Ok",
        "createdAt" : "2019-12-10T11:27:20Z",
        "updatedAt" : "2019-12-10T11:48:31Z",
        "lastEditedBy" : null,
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "94eaa0caa2c659b5aabcea0d36a851681ce58f93",
    "line" : null,
    "diffHunk" : "@@ -761,11 +703,11 @@\n     rules:\n     - warn: {lhs: maybe mempty, rhs: foldMap}"
  },
  {
    "id" : "8aee6e2c-b79e-4a90-9ae1-a3436fc2c7e2",
    "prId" : 3795,
    "comments" : [
      {
        "id" : "12021458-8811-4949-a218-cc52733c3fbb",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "```suggestion\r\n    - hint: {lhs: optional (pure ()), rhs: traverse_, note: IncreasesLaziness}\r\n```",
        "createdAt" : "2019-12-10T07:18:24Z",
        "updatedAt" : "2019-12-10T11:48:31Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "2f467bfd-ba3b-4855-9739-33a533a2bc7d",
        "parentId" : "12021458-8811-4949-a218-cc52733c3fbb",
        "author" : null,
        "body" : "Ok",
        "createdAt" : "2019-12-10T11:28:03Z",
        "updatedAt" : "2019-12-10T11:48:31Z",
        "lastEditedBy" : null,
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "94eaa0caa2c659b5aabcea0d36a851681ce58f93",
    "line" : null,
    "diffHunk" : "@@ -761,11 +703,11 @@\n     rules:\n     - warn: {lhs: maybe mempty, rhs: foldMap}\n     - warn: {lhs: either (const mempty), rhs: foldMap}\n-    - warn: {lhs: Data.Maybe.fromMaybe mempty, rhs: Data.Foldable.fold}\n-    - warn: {lhs: Data.Either.fromRight mempty, rhs: Data.Foldable.fold}\n-    - warn: {lhs: if f x then Just x else Nothing, rhs: mfilter f (Just x)}\n+    - warn: {lhs: DA.Optional.fromOptional mempty, rhs: DA.Foldable.fold}\n+    - warn: {lhs: DA.Either.fromRight mempty, rhs: DA.Foldable.fold}\n+    - warn: {lhs: if f x then Some x else None, rhs: mfilter f (Some x)}\n     - hint: {lhs: maybe (pure ()), rhs: traverse_, note: IncreasesLaziness}"
  },
  {
    "id" : "36d4e121-5053-4493-a14e-39aef0850fd5",
    "prId" : 2341,
    "comments" : [
      {
        "id" : "839341d4-6c27-49d9-a447-f41f14f2645c",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "This `note` doesn't make sense in the scope of DAML since DAML is strictly evaluated.",
        "createdAt" : "2019-07-31T07:55:08Z",
        "updatedAt" : "2019-07-31T07:56:37Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "233600a7db7df12f87af9bf01ff377d69c2ed308",
    "line" : 30,
    "diffHunk" : "@@ -504,7 +515,7 @@\n     - warn: {lhs: maybe x f (fmap g y), rhs: maybe x (f . g) y, name: Redundant fmap}\n     - warn: {lhs: isJust (fmap f x), rhs: isJust x}\n     - warn: {lhs: isNothing (fmap f x), rhs: isNothing x}\n-    - warn: {lhs: fromJust (fmap f x), rhs: f (fromJust x)}\n+    - warn: {lhs: fromJust (fmap f x), rhs: f (fromJust x), note: IncreasesLaziness}"
  },
  {
    "id" : "cf739534-152f-4e18-beb8-5e0ada272417",
    "prId" : 2341,
    "comments" : [
      {
        "id" : "12922ab0-2fa3-428a-9f36-fcb982c88124",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "As I wrote elsewhere, is there a way to turn this off by default and allow users to explicitly opt in here? Having to ignore a rule that doesn't make too much sense for DAML feels bad, at least for me.",
        "createdAt" : "2019-07-31T07:56:20Z",
        "updatedAt" : "2019-07-31T07:56:37Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "b621ed11-f774-4a27-a0b0-13ea3693cf2c",
        "parentId" : "12922ab0-2fa3-428a-9f36-fcb982c88124",
        "author" : null,
        "body" : "This line is turning it off. It can be re-enabled by users in their `.dlint.yaml`s if they want. ",
        "createdAt" : "2019-07-31T08:55:23Z",
        "updatedAt" : "2019-07-31T08:55:23Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "233600a7db7df12f87af9bf01ff377d69c2ed308",
    "line" : 42,
    "diffHunk" : "@@ -965,3 +976,8 @@\n # foo = typeOf (undefined :: a) -- typeRep (Proxy :: Proxy a)\n # {-# RULES \"Id-fmap-id\" forall (x :: Id a). fmap id x = x #-}\n # </TEST>\n+\n+# --\n+# DAML specific\n+\n+- ignore: {name: Use newtype instead of data}"
  }
]