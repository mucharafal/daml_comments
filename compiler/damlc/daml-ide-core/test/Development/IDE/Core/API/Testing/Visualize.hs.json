[
  {
    "id" : "6a48565b-4285-4653-b4e4-c2fd255ce808",
    "prId" : 5761,
    "comments" : [
      {
        "id" : "4d12a0a3-c4e6-446c-b900-548e3635c31a",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "I know that the code here is rather confusing (why is there no template? :confused:) but I deliberately tried to not touch more than absolutely necessary.",
        "createdAt" : "2020-04-28T15:27:00Z",
        "updatedAt" : "2020-04-28T15:27:01Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "9d3a3bf7e8f6fb35912440aad49e962450438cf1",
    "line" : 35,
    "diffHunk" : "@@ -0,0 +1,65 @@\n+-- Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+-- SPDX-License-Identifier: Apache-2.0\n+\n+module Development.IDE.Core.API.Testing.Visualize\n+    ( ExpectedGraph(..)\n+    , ExpectedSubGraph(..)\n+    , ExpectedChoiceDetails(..)\n+    , FailedGraphExpectation(..)\n+    , graphTest\n+    )\n+    where\n+\n+import Control.Monad\n+import Data.Bifunctor\n+import qualified Data.NameMap as NM\n+import qualified Data.Text as T\n+\n+import qualified DA.Daml.LF.Ast as LF\n+import qualified DA.Daml.Visual as V\n+\n+type TemplateName = String\n+type ChoiceName = String\n+\n+data ExpectedGraph = ExpectedGraph\n+    { expectedSubgraphs :: [ExpectedSubGraph]\n+    , expectedEdges :: [(ExpectedChoiceDetails, ExpectedChoiceDetails)]\n+    } deriving (Eq, Ord, Show )\n+\n+data ExpectedSubGraph = ExpectedSubGraph\n+    { expectedNodes :: [ChoiceName]\n+    , expectedTplFields :: [String]\n+    , expectedTemplate :: TemplateName\n+    } deriving (Eq, Ord, Show )\n+\n+data ExpectedChoiceDetails = ExpectedChoiceDetails"
  }
]