[
  {
    "id" : "bba473ad-c1e6-40f3-b1c2-14194095457a",
    "prId" : 4729,
    "comments" : [
      {
        "id" : "539f1ec3-3fc5-4225-a973-3ca9fdd9d115",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "We end up with a slightly different version of HLint that yells about these hints.",
        "createdAt" : "2020-02-26T16:46:34Z",
        "updatedAt" : "2020-02-26T18:12:13Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "3953e50eabc1fe12d2ef4d54b5bbc4c8c556d224",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +553,557 @@graphToExpectedGraph vGraph = ExpectedGraph vSubgrpaghs vEdges\n    where vSubgrpaghs = map subgraphToExpectedSubgraph (V.subgraphs vGraph)\n          vEdges = map (bimap expectedChcDetails expectedChcDetails) (V.edges vGraph)\n          expectedChcDetails chc = ExpectedChoiceDetails (V.consuming chc)\n                                ((T.unpack . LF.unChoiceName . V.displayChoiceName) chc)"
  },
  {
    "id" : "32fed67b-c2eb-4df6-9260-1d45dd3ed6df",
    "prId" : 2408,
    "comments" : [
      {
        "id" : "01974604-f429-496d-80f8-aebf9a20086f",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "You might want to add an unqualified import `import Data.Set (Set)` so you can avoid having to write `Set.Set` everywhere.",
        "createdAt" : "2019-08-06T07:45:08Z",
        "updatedAt" : "2019-08-06T16:16:26Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "e66f648ae22d4689f10dff3c20c6cea2187cd6d5",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +130,134 @@    { _cName :: String\n    , _consuming :: Bool\n    , _action :: Set.Set ExpectedChoiceAction\n    } deriving (Eq, Ord, Show )\n"
  },
  {
    "id" : "8a50ca97-1896-4e37-957b-cb99e7b23e45",
    "prId" : 2371,
    "comments" : [
      {
        "id" : "02403d4e-8d82-4fe0-9fd6-b33937063fb4",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "The `_action` field should be moved into `ExpectedChoices`.",
        "createdAt" : "2019-08-05T14:06:58Z",
        "updatedAt" : "2019-08-05T14:08:21Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "5df2c1a9-0dd5-4818-82fc-b47d70aa6063",
        "parentId" : "02403d4e-8d82-4fe0-9fd6-b33937063fb4",
        "author" : {
          "login" : "akalburgi",
          "name" : "Anup Kalburgi",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/42743833?v=4"
        },
        "body" : "Yup, thanks will move it",
        "createdAt" : "2019-08-05T15:25:53Z",
        "updatedAt" : "2019-08-05T15:25:53Z",
        "lastEditedBy" : {
          "login" : "akalburgi",
          "name" : "Anup Kalburgi",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/42743833?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "66b5b7e6be738ae8597dd2cb62a7f4df985506f7",
    "line" : 38,
    "diffHunk" : "@@ -1,1 +135,139 @@    { _tplName :: T.Text\n    , _choices :: Set.Set ExpectedChoices\n    , _action :: Set.Set ExpectedChoiceAction\n    } deriving (Eq, Ord, Show)\n"
  },
  {
    "id" : "8bca1f43-f997-41b7-8358-80cb72f09159",
    "prId" : 2371,
    "comments" : [
      {
        "id" : "f2dbd156-d45b-4b03-9b52-a5b8468753c5",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "```suggestion\r\ndata ExpectedChoice = ExpectedChoice\r\n```\r\nThis is just about one choice, right?",
        "createdAt" : "2019-08-05T14:07:30Z",
        "updatedAt" : "2019-08-05T14:08:21Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "66b5b7e6be738ae8597dd2cb62a7f4df985506f7",
    "line" : 28,
    "diffHunk" : "@@ -1,1 +127,131 @@    | Exercise TemplateName ChoiceName deriving (Eq, Ord, Show)\n\ndata ExpectedChoices = ExpectedChoices\n    { _cName :: String\n    , _consuming :: Bool"
  },
  {
    "id" : "d3e82cbd-cfd7-474c-95d9-a056a67d5a44",
    "prId" : 2325,
    "comments" : [
      {
        "id" : "c61fd100-b90e-437d-8264-551c2762b33c",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "A comment explaining what the `Int` represents would be nice. It looks like it is the sum of the number of actions for each choice? In that case `numActions` might be a better field name. Seems like a slightly weird property to test for but we can always change or extend this later so Iâ€™m happy to keep it for now.",
        "createdAt" : "2019-07-31T07:08:28Z",
        "updatedAt" : "2019-07-31T18:57:12Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "c79c8ca6-74dc-44f6-9dbd-b4d3348f5ab7",
        "parentId" : "c61fd100-b90e-437d-8264-551c2762b33c",
        "author" : {
          "login" : "akalburgi",
          "name" : "Anup Kalburgi",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/42743833?v=4"
        },
        "body" : "Yes this `Int` is not adding any value, this is intended to check the action from a choice. I will fill this out in a following PR",
        "createdAt" : "2019-07-31T15:30:00Z",
        "updatedAt" : "2019-07-31T18:57:12Z",
        "lastEditedBy" : {
          "login" : "akalburgi",
          "name" : "Anup Kalburgi",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/42743833?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "3a390e5baed8d24cb1eac9a25b9951eb49ad4db9",
    "line" : 72,
    "diffHunk" : "@@ -1,1 +125,129 @@data TemplateProp = TemplateProp\n    { _choices :: Set.Set ExpectedChoices\n    , _action :: Int\n    } deriving (Eq, Ord, Show)\n"
  },
  {
    "id" : "39ba9aef-8a2c-4007-a67e-b793f828e3c6",
    "prId" : 2325,
    "comments" : [
      {
        "id" : "3f510b3e-260d-4b5c-9c79-6c532485ace5",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "I would add an `expectNoErrors` call here. That way you get usable diagnostics if it fails.\r\nAnd then, I would just turn the `Nothing` case into a pattern match failure, e.g.,\r\n`Just dalf <- pure mbDalf`",
        "createdAt" : "2019-07-31T07:14:48Z",
        "updatedAt" : "2019-07-31T18:57:12Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "22a7d19e-3c3e-45c9-bd93-552dc2c92f0d",
        "parentId" : "3f510b3e-260d-4b5c-9c79-6c532485ace5",
        "author" : {
          "login" : "akalburgi",
          "name" : "Anup Kalburgi",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/42743833?v=4"
        },
        "body" : "Thanks for the help with this, Using monad fail now.",
        "createdAt" : "2019-07-31T18:31:41Z",
        "updatedAt" : "2019-07-31T18:57:12Z",
        "lastEditedBy" : {
          "login" : "akalburgi",
          "name" : "Anup Kalburgi",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/42743833?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "3a390e5baed8d24cb1eac9a25b9951eb49ad4db9",
    "line" : 104,
    "diffHunk" : "@@ -1,1 +529,533 @@expectedTemplatePoperties damlFilePath expectedProps = do\n    ideState <- ShakeTest $ Reader.asks steService\n    mbDalf <- liftIO $ API.runAction ideState (API.getDalf damlFilePath)\n    expectNoErrors\n    Just lfPkg <- pure mbDalf"
  }
]