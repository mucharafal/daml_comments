[
  {
    "id" : "6d27a8aa-9ca1-4dbd-a5e4-873da6878faa",
    "prId" : 4729,
    "comments" : [
      {
        "id" : "9b096efe-1a13-47e1-b3cf-37428b5de826",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "We end up with a slightly different version of HLint that yells about these hints.",
        "createdAt" : "2020-02-26T16:46:34Z",
        "updatedAt" : "2020-02-26T18:12:13Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "3953e50eabc1fe12d2ef4d54b5bbc4c8c556d224",
    "line" : 13,
    "diffHunk" : "@@ -551,7 +552,7 @@ subgraphToExpectedSubgraph vSubgraph = ExpectedSubGraph vNodes vFields vTplName\n graphToExpectedGraph :: V.Graph -> ExpectedGraph\n graphToExpectedGraph vGraph = ExpectedGraph vSubgrpaghs vEdges\n     where vSubgrpaghs = map subgraphToExpectedSubgraph (V.subgraphs vGraph)\n-          vEdges = map (\\(c1,c2) -> (expectedChcDetails c1, expectedChcDetails c2)) (V.edges vGraph)\n+          vEdges = map (bimap expectedChcDetails expectedChcDetails) (V.edges vGraph)"
  },
  {
    "id" : "8ddbacf1-7479-44ad-a77b-0b2622f1946d",
    "prId" : 2673,
    "comments" : [
      {
        "id" : "ea51c128-9412-48a5-bf3a-db7b37b2a8a6",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "One of those is not an expected graph but the actual graph right? Might make sense to be more generic in the names and add a comment here on what is actual and what is expected.",
        "createdAt" : "2019-09-05T11:32:14Z",
        "updatedAt" : "2019-09-05T14:29:06Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "af144c14-bdbd-4c66-bc98-be9968757395",
        "parentId" : "ea51c128-9412-48a5-bf3a-db7b37b2a8a6",
        "author" : {
          "login" : "akalburgi",
          "name" : "Anup Kalburgi",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/42743833?v=4"
        },
        "body" : "That was me not being careful. Changed one to be `Graph`",
        "createdAt" : "2019-09-05T13:55:26Z",
        "updatedAt" : "2019-09-05T14:29:06Z",
        "lastEditedBy" : {
          "login" : "akalburgi",
          "name" : "Anup Kalburgi",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/42743833?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "f132fa8499359d43acb8be985d25f7293c76ce03",
    "line" : null,
    "diffHunk" : "@@ -104,7 +103,7 @@ data ShakeTestError\n     | ExpectedVirtualResourceNote VirtualResource T.Text (Map VirtualResource T.Text)\n     | ExpectedNoVirtualResourceNote VirtualResource (Map VirtualResource T.Text)\n     | ExpectedNoErrors [D.FileDiagnostic]\n-    | ExpectedTemplateProps (Set.Set TemplateProp) (Set.Set TemplateProp)\n+    | ExpectedGraphProps ExpectedGraph ExpectedGraph"
  },
  {
    "id" : "900d94b5-bad6-42a7-a9ce-c46bbc631a70",
    "prId" : 2673,
    "comments" : [
      {
        "id" : "733c8069-4475-4835-b817-36b74941550c",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Your names are inconsistent: `expectedSubgraph` but `graphToExpectedGraph` instead of `expectedGraph` which also exists but does something different.",
        "createdAt" : "2019-09-05T12:19:07Z",
        "updatedAt" : "2019-09-05T14:29:06Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "ad470046-c967-4944-b591-0afff8f07862",
        "parentId" : "733c8069-4475-4835-b817-36b74941550c",
        "author" : {
          "login" : "akalburgi",
          "name" : "Anup Kalburgi",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/42743833?v=4"
        },
        "body" : "Thanks for point that out. Corrected it",
        "createdAt" : "2019-09-05T13:42:08Z",
        "updatedAt" : "2019-09-05T14:29:06Z",
        "lastEditedBy" : {
          "login" : "akalburgi",
          "name" : "Anup Kalburgi",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/42743833?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "f132fa8499359d43acb8be985d25f7293c76ce03",
    "line" : null,
    "diffHunk" : "@@ -538,33 +538,34 @@ timedSection targetDiffTime block = do\n         throwError $ TimedSectionTookTooLong targetDiffTime actualDiffTime\n     return value\n \n-actionsToChoiceActions :: Set.Set V.Action -> Set.Set ExpectedChoiceAction\n-actionsToChoiceActions acts = Set.map expectedChcAction acts\n-    where expectedChcAction = \\case\n-            V.ACreate tcon -> Create (DAP.renderPretty tcon)\n-            V.AExercise tcon choice -> Exercise (DAP.renderPretty tcon) (DAP.renderPretty choice)\n-\n-templateChoicesToProps :: V.TemplateChoices -> TemplateProp\n-templateChoicesToProps tca = TemplateProp tName choicesInTpl\n-    where tName = V.tplNameUnqual (V.template tca)\n-          choicesInTpl = Set.fromList $ map (\\ca -> ExpectedChoice (DAP.renderPretty $ V.choiceName ca) (V.choiceConsuming ca) (actionsToChoiceActions $ V.actions ca)) (V.choiceAndActions tca)\n-\n-graphTest :: LF.World -> LF.Package -> Set.Set TemplateProp -> ShakeTest ()\n-graphTest wrld lfPkg expectedProps = do\n-    let actual = Set.fromList $ map templateChoicesToProps tplPropsActual\n-        tplPropsActual = concatMap (V.moduleAndTemplates wrld) (NM.toList $ LF.packageModules lfPkg)\n-    unless (expectedProps == actual) $\n-        throwError $ ExpectedTemplateProps expectedProps actual\n-\n-expectedTemplatePoperties :: D.NormalizedFilePath -> Set.Set TemplateProp -> ShakeTest ()\n-expectedTemplatePoperties damlFilePath expectedProps = do\n+expectedSubgraph :: V.SubGraph -> ExpectedSubGraph"
  },
  {
    "id" : "3e535fb5-7a96-4577-a7f9-5290f358a5a5",
    "prId" : 2408,
    "comments" : [
      {
        "id" : "341f3dd8-ada9-4f5c-a610-40b137f1a3f0",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "You might want to add an unqualified import `import Data.Set (Set)` so you can avoid having to write `Set.Set` everywhere.",
        "createdAt" : "2019-08-06T07:45:08Z",
        "updatedAt" : "2019-08-06T16:16:26Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "e66f648ae22d4689f10dff3c20c6cea2187cd6d5",
    "line" : 17,
    "diffHunk" : "@@ -126,15 +126,15 @@ data ExpectedChoiceAction\n     = Create TemplateName\n     | Exercise TemplateName ChoiceName deriving (Eq, Ord, Show)\n \n-data ExpectedChoices = ExpectedChoices\n+data ExpectedChoice = ExpectedChoice\n     { _cName :: String\n     , _consuming :: Bool\n+    , _action :: Set.Set ExpectedChoiceAction"
  },
  {
    "id" : "fc797408-95f2-4eb4-b59e-d2eb247422be",
    "prId" : 2408,
    "comments" : [
      {
        "id" : "7ccd8a22-81b8-4b7d-b884-e4887b135a2d",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Looks like you forgot to remove this fully.",
        "createdAt" : "2019-08-06T07:50:30Z",
        "updatedAt" : "2019-08-06T16:16:26Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "425a231b-200e-4aec-8b1f-707de3de1589",
        "parentId" : "7ccd8a22-81b8-4b7d-b884-e4887b135a2d",
        "author" : {
          "login" : "akalburgi",
          "name" : "Anup Kalburgi",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/42743833?v=4"
        },
        "body" : ":( ",
        "createdAt" : "2019-08-06T16:10:37Z",
        "updatedAt" : "2019-08-06T16:16:26Z",
        "lastEditedBy" : {
          "login" : "akalburgi",
          "name" : "Anup Kalburgi",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/42743833?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "e66f648ae22d4689f10dff3c20c6cea2187cd6d5",
    "line" : null,
    "diffHunk" : "@@ -523,17 +523,16 @@ timedSection targetDiffTime block = do\n         throwError $ TimedSectionTookTooLong targetDiffTime actualDiffTime\n     return value\n \n-actionsToChoiceActions :: Set.Set V.Action -> [ExpectedChoiceAction]\n-actionsToChoiceActions acts = Set.toList $ Set.map expectedChcAction acts\n+actionsToChoiceActions :: Set.Set V.Action -> Set.Set ExpectedChoiceAction\n+actionsToChoiceActions acts = Set.map expectedChcAction acts\n     where expectedChcAction = \\case\n             V.ACreate tcon -> Create (DAP.renderPretty tcon)\n             V.AExercise tcon choice -> Exercise (DAP.renderPretty tcon) (DAP.renderPretty choice)\n \n templateChoicesToProps :: V.TemplateChoices -> TemplateProp\n-templateChoicesToProps tca = TemplateProp tName choicesInTpl $ Set.fromList allActions\n+templateChoicesToProps tca = TemplateProp tName choicesInTpl -- $ Set.fromList allActions"
  },
  {
    "id" : "8aad23d6-bc66-4db6-9547-5c69f2071bae",
    "prId" : 2371,
    "comments" : [
      {
        "id" : "cf02bf6c-19b1-4b2c-b8fb-8e724dd99af1",
        "parentId" : null,
        "author" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "body" : "You don't need this much indentation - I think we decided on 4 spaces as the convention? Also an extra space:\r\n```suggestion\r\n        where expectedChcAction = \\case\r\n```",
        "createdAt" : "2019-08-01T18:59:37Z",
        "updatedAt" : "2019-08-01T20:21:14Z",
        "lastEditedBy" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "66b5b7e6be738ae8597dd2cb62a7f4df985506f7",
    "line" : null,
    "diffHunk" : "@@ -513,15 +521,21 @@ timedSection targetDiffTime block = do\n         throwError $ TimedSectionTookTooLong targetDiffTime actualDiffTime\n     return value\n \n+actionsToChoiceActions :: Set.Set V.Action -> [ExpectedChoiceAction]\n+actionsToChoiceActions acts = Set.toList $ Set.map expectedChcAction acts\n+        where expectedChcAction  = \\case"
  },
  {
    "id" : "db6d5f6c-6725-40e2-a081-e65c06d9016a",
    "prId" : 2371,
    "comments" : [
      {
        "id" : "6a491558-b9bd-4ccf-aa6b-ce1dda279aaf",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "The `_action` field should be moved into `ExpectedChoices`.",
        "createdAt" : "2019-08-05T14:06:58Z",
        "updatedAt" : "2019-08-05T14:08:21Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "a2d27be7-dae5-457d-a7cf-be9e2cf1a192",
        "parentId" : "6a491558-b9bd-4ccf-aa6b-ce1dda279aaf",
        "author" : {
          "login" : "akalburgi",
          "name" : "Anup Kalburgi",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/42743833?v=4"
        },
        "body" : "Yup, thanks will move it",
        "createdAt" : "2019-08-05T15:25:53Z",
        "updatedAt" : "2019-08-05T15:25:53Z",
        "lastEditedBy" : {
          "login" : "akalburgi",
          "name" : "Anup Kalburgi",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/42743833?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "66b5b7e6be738ae8597dd2cb62a7f4df985506f7",
    "line" : 38,
    "diffHunk" : "@@ -118,13 +119,22 @@ data ShakeTestEnv = ShakeTestEnv\n     , steVirtualResourcesNotes :: TVar (Map VirtualResource T.Text)\n     }\n \n+type TemplateName = String\n+type ChoiceName = String\n+\n+data ExpectedChoiceAction\n+    = Create TemplateName\n+    | Exercise TemplateName ChoiceName deriving (Eq, Ord, Show)\n+\n data ExpectedChoices = ExpectedChoices\n     { _cName :: String\n     , _consuming :: Bool\n     } deriving (Eq, Ord, Show )\n+\n data TemplateProp = TemplateProp\n-    { _choices :: Set.Set ExpectedChoices\n-    , _action :: Int\n+    { _tplName :: T.Text\n+    , _choices :: Set.Set ExpectedChoices\n+    , _action :: Set.Set ExpectedChoiceAction"
  },
  {
    "id" : "cea28778-7c1f-4f30-8880-85e51f689dec",
    "prId" : 2371,
    "comments" : [
      {
        "id" : "2895d2e1-31b3-4278-8fa5-263b6b7f20a8",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "```suggestion\r\ndata ExpectedChoice = ExpectedChoice\r\n```\r\nThis is just about one choice, right?",
        "createdAt" : "2019-08-05T14:07:30Z",
        "updatedAt" : "2019-08-05T14:08:21Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "66b5b7e6be738ae8597dd2cb62a7f4df985506f7",
    "line" : 28,
    "diffHunk" : "@@ -118,13 +119,22 @@ data ShakeTestEnv = ShakeTestEnv\n     , steVirtualResourcesNotes :: TVar (Map VirtualResource T.Text)\n     }\n \n+type TemplateName = String\n+type ChoiceName = String\n+\n+data ExpectedChoiceAction\n+    = Create TemplateName\n+    | Exercise TemplateName ChoiceName deriving (Eq, Ord, Show)\n+\n data ExpectedChoices = ExpectedChoices"
  },
  {
    "id" : "db01632d-2b0e-47ae-9cf7-d0b30f8c628f",
    "prId" : 2325,
    "comments" : [
      {
        "id" : "ff4c1be1-6b6b-4d1b-b627-3927930038c2",
        "parentId" : null,
        "author" : {
          "login" : "akalburgi",
          "name" : "Anup Kalburgi",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/42743833?v=4"
        },
        "body" : "Maybe this is a bad idea or should I move the tests which use this to this module?",
        "createdAt" : "2019-07-29T21:00:36Z",
        "updatedAt" : "2019-07-31T18:57:12Z",
        "lastEditedBy" : {
          "login" : "akalburgi",
          "name" : "Anup Kalburgi",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/42743833?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "b8062df0-ce43-430c-af0a-eb05d2f0fc7e",
        "parentId" : "ff4c1be1-6b6b-4d1b-b627-3927930038c2",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "`ExpectedNoMismatch` seems a bit too generator. How about `ExpectedTemplateProps [TemplateProps] [TemplateProps]` where the two lists correspond to actual and expected.",
        "createdAt" : "2019-07-30T07:25:27Z",
        "updatedAt" : "2019-07-31T18:57:12Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "3a390e5baed8d24cb1eac9a25b9951eb49ad4db9",
    "line" : null,
    "diffHunk" : "@@ -89,6 +91,7 @@ data ShakeTestError\n     | ExpectedVirtualResourceNote VirtualResource T.Text (Map VirtualResource T.Text)\n     | ExpectedNoVirtualResourceNote VirtualResource (Map VirtualResource T.Text)\n     | ExpectedNoErrors [D.FileDiagnostic]\n+    | ExpectedNoMisMatch String String"
  },
  {
    "id" : "0b3aa7b4-5ee4-45ce-ba18-8e56e7b6ff5d",
    "prId" : 2325,
    "comments" : [
      {
        "id" : "31a1d1c2-9ad9-41cf-8ab6-f1381e90757e",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "I would prefer to not expose all those internals.\r\nInstead, add a new combinator to this module something like `expectTemplateProps :: NormalizedFilePath -> [TemplateProp] -> ShakeTest ()` that takes care of all of this.",
        "createdAt" : "2019-07-30T07:24:31Z",
        "updatedAt" : "2019-07-31T18:57:12Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "13695b4c-44bc-436f-80f2-1adae32d90d4",
        "parentId" : "31a1d1c2-9ad9-41cf-8ab6-f1381e90757e",
        "author" : {
          "login" : "akalburgi",
          "name" : "Anup Kalburgi",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/42743833?v=4"
        },
        "body" : "Done",
        "createdAt" : "2019-07-30T16:48:54Z",
        "updatedAt" : "2019-07-31T18:57:12Z",
        "lastEditedBy" : {
          "login" : "akalburgi",
          "name" : "Anup Kalburgi",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/42743833?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "3a390e5baed8d24cb1eac9a25b9951eb49ad4db9",
    "line" : null,
    "diffHunk" : "@@ -9,7 +9,9 @@\n \n -- | Testing framework for Shake API.\n module Development.IDE.Core.API.Testing\n-    ( ShakeTest\n+    ( ShakeTest (..)"
  },
  {
    "id" : "829f45fe-17a7-4fff-b06d-a2382dd1f039",
    "prId" : 2325,
    "comments" : [
      {
        "id" : "012d7a48-6c22-44a7-b627-63b17116b6c8",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "```suggestion\r\n    , expectTemplateProperties\r\n```\r\nMatches the naming scheme of the other `expect*` functions.\r\nI would also move it down in the export list to be next to those.",
        "createdAt" : "2019-07-31T07:03:46Z",
        "updatedAt" : "2019-07-31T18:57:12Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "c4d7897b-8839-4d29-96a0-9c359b93fbed",
        "parentId" : "012d7a48-6c22-44a7-b627-63b17116b6c8",
        "author" : {
          "login" : "akalburgi",
          "name" : "Anup Kalburgi",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/42743833?v=4"
        },
        "body" : " Yup makes sense. Done",
        "createdAt" : "2019-07-31T15:34:32Z",
        "updatedAt" : "2019-07-31T18:57:12Z",
        "lastEditedBy" : {
          "login" : "akalburgi",
          "name" : "Anup Kalburgi",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/42743833?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "3a390e5baed8d24cb1eac9a25b9951eb49ad4db9",
    "line" : null,
    "diffHunk" : "@@ -10,9 +10,12 @@\n -- | Testing framework for Shake API.\n module Development.IDE.Core.API.Testing\n     ( ShakeTest\n+    , TemplateProp(..)\n+    , ExpectedChoices(..)\n     , GoToDefinitionPattern (..)\n     , HoverExpectation (..)\n     , D.DiagnosticSeverity(..)\n+    , expectedPoperties"
  },
  {
    "id" : "67cb74eb-6ec3-4adc-8dae-6da70049ca98",
    "prId" : 2325,
    "comments" : [
      {
        "id" : "82d054f8-a872-4def-9f91-b94556621f2c",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "```suggestion\r\ntemplateChoicesToProps tca = TemplateProp choicesInTpl (sum $ map (length . actions) (choiceAndActions tca))\r\n```",
        "createdAt" : "2019-07-31T07:04:20Z",
        "updatedAt" : "2019-07-31T18:57:12Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "2a6f5ac1-690f-487c-8a21-4264e64985de",
        "parentId" : "82d054f8-a872-4def-9f91-b94556621f2c",
        "author" : {
          "login" : "akalburgi",
          "name" : "Anup Kalburgi",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/42743833?v=4"
        },
        "body" : ":( ",
        "createdAt" : "2019-07-31T15:37:12Z",
        "updatedAt" : "2019-07-31T18:57:12Z",
        "lastEditedBy" : {
          "login" : "akalburgi",
          "name" : "Anup Kalburgi",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/42743833?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "3a390e5baed8d24cb1eac9a25b9951eb49ad4db9",
    "line" : null,
    "diffHunk" : "@@ -491,6 +509,29 @@ timedSection targetDiffTime block = do\n         throwError $ TimedSectionTookTooLong targetDiffTime actualDiffTime\n     return value\n \n+\n+templateChoicesToProps :: TemplateChoices -> TemplateProp\n+templateChoicesToProps tca = TemplateProp choicesInTpl (sum $ map (length . actions ) (choiceAndActions tca))"
  },
  {
    "id" : "772d2c54-36b2-43c8-bdb6-137c8f9b1ae5",
    "prId" : 2325,
    "comments" : [
      {
        "id" : "b4aaa2d8-72b5-40ec-81e1-c3f94efa09ac",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "A comment explaining what the `Int` represents would be nice. It looks like it is the sum of the number of actions for each choice? In that case `numActions` might be a better field name. Seems like a slightly weird property to test for but we can always change or extend this later so I’m happy to keep it for now.",
        "createdAt" : "2019-07-31T07:08:28Z",
        "updatedAt" : "2019-07-31T18:57:12Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "45e820b9-f0f9-48b2-9f85-179993c36296",
        "parentId" : "b4aaa2d8-72b5-40ec-81e1-c3f94efa09ac",
        "author" : {
          "login" : "akalburgi",
          "name" : "Anup Kalburgi",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/42743833?v=4"
        },
        "body" : "Yes this `Int` is not adding any value, this is intended to check the action from a choice. I will fill this out in a following PR",
        "createdAt" : "2019-07-31T15:30:00Z",
        "updatedAt" : "2019-07-31T18:57:12Z",
        "lastEditedBy" : {
          "login" : "akalburgi",
          "name" : "Anup Kalburgi",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/42743833?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "3a390e5baed8d24cb1eac9a25b9951eb49ad4db9",
    "line" : 72,
    "diffHunk" : "@@ -107,6 +116,15 @@ data ShakeTestEnv = ShakeTestEnv\n     , steVirtualResourcesNotes :: TVar (Map VirtualResource T.Text)\n     }\n \n+data ExpectedChoices = ExpectedChoices\n+    { _cName :: String\n+    , _consuming :: Bool\n+    } deriving (Eq, Ord, Show )\n+data TemplateProp = TemplateProp\n+    { _choices :: Set.Set ExpectedChoices\n+    , _action :: Int"
  },
  {
    "id" : "f67a2fd9-94d5-4d0c-86dd-e55c05c1763e",
    "prId" : 2325,
    "comments" : [
      {
        "id" : "db9616f4-3f8a-42fa-a47a-00e7b0dd52de",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "```suggestion\r\ngraphTest :: LF.World -> LF.Package -> Set.Set TemplateProp -> ShakeTest ()\r\n```",
        "createdAt" : "2019-07-31T07:09:53Z",
        "updatedAt" : "2019-07-31T18:57:12Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "3a390e5baed8d24cb1eac9a25b9951eb49ad4db9",
    "line" : null,
    "diffHunk" : "@@ -491,6 +509,29 @@ timedSection targetDiffTime block = do\n         throwError $ TimedSectionTookTooLong targetDiffTime actualDiffTime\n     return value\n \n+\n+templateChoicesToProps :: TemplateChoices -> TemplateProp\n+templateChoicesToProps tca = TemplateProp choicesInTpl (sum $ map (length . actions ) (choiceAndActions tca))\n+    where choicesInTpl = Set.fromList $ map (\\ca -> ExpectedChoices ( DAP.renderPretty $ choiceName ca) (choiceConsuming ca)) (choiceAndActions tca)\n+\n+graphTest :: LF.World -> LF.Package -> Set.Set TemplateProp -> Either [TemplateProp] ()"
  },
  {
    "id" : "b64568c7-1574-40a5-b5f2-08ab7821feee",
    "prId" : 2325,
    "comments" : [
      {
        "id" : "d171b528-8c7e-4834-8a1e-b4fe7c1261b4",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "I would suggest that you move this to `ShakeTest`. That way you can slightly simply things by not having to pattern match on the result at the callsite.\r\n```haskell\r\ngraphTest :: LF.World -> LF.Package -> Set.Set TemplateProp -> ShakeTest ()\r\ngraphTest wrld lfPkg expectedProps = do\r\n    let actual = Set.fromList $ map templateChoicesToProps tplPropsActual\r\n    unless expectedProps == actual $\r\n        throwError $ ExpectedTemplateProps expectedProps actual",
        "createdAt" : "2019-07-31T07:13:15Z",
        "updatedAt" : "2019-07-31T18:57:12Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "5961e42c-cf30-4526-832a-c35aa02c6d71",
        "parentId" : "d171b528-8c7e-4834-8a1e-b4fe7c1261b4",
        "author" : {
          "login" : "akalburgi",
          "name" : "Anup Kalburgi",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/42743833?v=4"
        },
        "body" : "cool. That looks better. Done",
        "createdAt" : "2019-07-31T17:21:58Z",
        "updatedAt" : "2019-07-31T18:57:12Z",
        "lastEditedBy" : {
          "login" : "akalburgi",
          "name" : "Anup Kalburgi",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/42743833?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "3a390e5baed8d24cb1eac9a25b9951eb49ad4db9",
    "line" : null,
    "diffHunk" : "@@ -491,6 +509,29 @@ timedSection targetDiffTime block = do\n         throwError $ TimedSectionTookTooLong targetDiffTime actualDiffTime\n     return value\n \n+\n+templateChoicesToProps :: TemplateChoices -> TemplateProp\n+templateChoicesToProps tca = TemplateProp choicesInTpl (sum $ map (length . actions ) (choiceAndActions tca))\n+    where choicesInTpl = Set.fromList $ map (\\ca -> ExpectedChoices ( DAP.renderPretty $ choiceName ca) (choiceConsuming ca)) (choiceAndActions tca)\n+\n+graphTest :: LF.World -> LF.Package -> Set.Set TemplateProp -> Either [TemplateProp] ()\n+graphTest wrld lfPkg expectedProps =\n+    if expectedProps == (Set.fromList $ map templateChoicesToProps tplPropsActual)"
  },
  {
    "id" : "548f2764-8956-4388-a589-76e67685de2e",
    "prId" : 2325,
    "comments" : [
      {
        "id" : "23cfc3da-cb1a-4ca2-864c-b27a599c9f6b",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "I would add an `expectNoErrors` call here. That way you get usable diagnostics if it fails.\r\nAnd then, I would just turn the `Nothing` case into a pattern match failure, e.g.,\r\n`Just dalf <- pure mbDalf`",
        "createdAt" : "2019-07-31T07:14:48Z",
        "updatedAt" : "2019-07-31T18:57:12Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "21636e47-4d37-4ba7-92a5-fca89208221c",
        "parentId" : "23cfc3da-cb1a-4ca2-864c-b27a599c9f6b",
        "author" : {
          "login" : "akalburgi",
          "name" : "Anup Kalburgi",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/42743833?v=4"
        },
        "body" : "Thanks for the help with this, Using monad fail now.",
        "createdAt" : "2019-07-31T18:31:41Z",
        "updatedAt" : "2019-07-31T18:57:12Z",
        "lastEditedBy" : {
          "login" : "akalburgi",
          "name" : "Anup Kalburgi",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/42743833?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "3a390e5baed8d24cb1eac9a25b9951eb49ad4db9",
    "line" : 104,
    "diffHunk" : "@@ -491,6 +509,29 @@ timedSection targetDiffTime block = do\n         throwError $ TimedSectionTookTooLong targetDiffTime actualDiffTime\n     return value\n \n+\n+templateChoicesToProps :: TemplateChoices -> TemplateProp\n+templateChoicesToProps tca = TemplateProp choicesInTpl (sum $ map (length . actions ) (choiceAndActions tca))\n+    where choicesInTpl = Set.fromList $ map (\\ca -> ExpectedChoices ( DAP.renderPretty $ choiceName ca) (choiceConsuming ca)) (choiceAndActions tca)\n+\n+graphTest :: LF.World -> LF.Package -> Set.Set TemplateProp -> Either [TemplateProp] ()\n+graphTest wrld lfPkg expectedProps =\n+    if expectedProps == (Set.fromList $ map templateChoicesToProps tplPropsActual)\n+        then Right ()\n+        else Left $ map templateChoicesToProps tplPropsActual\n+    where tplPropsActual = concatMap (moduleAndTemplates wrld) (NM.toList $ LF.packageModules lfPkg)\n+\n+expectedPoperties :: D.NormalizedFilePath -> Set.Set TemplateProp -> ShakeTest ()\n+expectedPoperties damlFilePath expectedProps = do\n+    ideState <- ShakeTest $ Reader.asks steService\n+    mbDalf <- liftIO $ API.runAction ideState (API.getDalf damlFilePath)"
  },
  {
    "id" : "7b57ad12-a150-45b5-b39d-05658719954d",
    "prId" : 2141,
    "comments" : [
      {
        "id" : "4603eec4-bfc2-45f2-bd81-55389ee845c6",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "```suggestion\r\n            modifyTVar' virtualResources (Map.insert vr doc)\r\n```",
        "createdAt" : "2019-07-15T11:30:52Z",
        "updatedAt" : "2019-07-22T07:54:41Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "0daa7be342dc63694da9cd5a53a357e8c4fbb3af",
    "line" : null,
    "diffHunk" : "@@ -115,14 +120,26 @@ pattern EventVirtualResourceChanged vr doc <-\n              (Aeson.parseMaybe Aeson.parseJSON ->\n               Just (VirtualResourceChangedParams (parseURI . T.unpack >=> uriToVirtualResource -> Just vr) doc)))\n \n+pattern EventVirtualResourceNoteSet :: VirtualResource -> T.Text -> FromServerMessage\n+pattern EventVirtualResourceNoteSet vr note <-\n+    NotCustomServer\n+        (NotificationMessage _\n+             (CustomServerMethod ((== virtualResourceNoteSetNotification) -> True))\n+             (Aeson.parseMaybe Aeson.parseJSON ->\n+              Just (VirtualResourceNoteSetParams (parseURI . T.unpack >=> uriToVirtualResource -> Just vr) note)))\n+\n \n -- | Run shake test on freshly initialised shake service.\n runShakeTest :: Maybe SS.Handle -> ShakeTest () -> IO (Either ShakeTestError ShakeTestResults)\n runShakeTest mbScenarioService (ShakeTest m) = do\n     hlintDataDir <-locateRunfiles $ mainWorkspace </> \"compiler/damlc/daml-ide-core\"\n     options <- mkOptions $ (defaultOptions Nothing){optHlintUsage=Just(HlintEnabled hlintDataDir)}\n     virtualResources <- newTVarIO Map.empty\n-    let eventLogger (EventVirtualResourceChanged vr doc) = modifyTVar' virtualResources(Map.insert vr doc)\n+    virtualResourcesNotes <- newTVarIO Map.empty\n+    let eventLogger (EventVirtualResourceChanged vr doc) = do\n+            modifyTVar' virtualResources(Map.insert vr doc)"
  },
  {
    "id" : "0f445f53-3a5c-4000-803e-e1dae6b16a26",
    "prId" : 2141,
    "comments" : [
      {
        "id" : "34f3794d-d65f-4c3b-9c1b-09f4df08024f",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "```suggestion\r\n            modifyTVar' virtualResourcesNotes (Map.delete vr)\r\n```",
        "createdAt" : "2019-07-15T11:31:01Z",
        "updatedAt" : "2019-07-22T07:54:41Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "0daa7be342dc63694da9cd5a53a357e8c4fbb3af",
    "line" : null,
    "diffHunk" : "@@ -115,14 +120,26 @@ pattern EventVirtualResourceChanged vr doc <-\n              (Aeson.parseMaybe Aeson.parseJSON ->\n               Just (VirtualResourceChangedParams (parseURI . T.unpack >=> uriToVirtualResource -> Just vr) doc)))\n \n+pattern EventVirtualResourceNoteSet :: VirtualResource -> T.Text -> FromServerMessage\n+pattern EventVirtualResourceNoteSet vr note <-\n+    NotCustomServer\n+        (NotificationMessage _\n+             (CustomServerMethod ((== virtualResourceNoteSetNotification) -> True))\n+             (Aeson.parseMaybe Aeson.parseJSON ->\n+              Just (VirtualResourceNoteSetParams (parseURI . T.unpack >=> uriToVirtualResource -> Just vr) note)))\n+\n \n -- | Run shake test on freshly initialised shake service.\n runShakeTest :: Maybe SS.Handle -> ShakeTest () -> IO (Either ShakeTestError ShakeTestResults)\n runShakeTest mbScenarioService (ShakeTest m) = do\n     hlintDataDir <-locateRunfiles $ mainWorkspace </> \"compiler/damlc/daml-ide-core\"\n     options <- mkOptions $ (defaultOptions Nothing){optHlintUsage=Just(HlintEnabled hlintDataDir)}\n     virtualResources <- newTVarIO Map.empty\n-    let eventLogger (EventVirtualResourceChanged vr doc) = modifyTVar' virtualResources(Map.insert vr doc)\n+    virtualResourcesNotes <- newTVarIO Map.empty\n+    let eventLogger (EventVirtualResourceChanged vr doc) = do\n+            modifyTVar' virtualResources(Map.insert vr doc)\n+            modifyTVar' virtualResourcesNotes(Map.delete vr)"
  },
  {
    "id" : "239e1ea7-792b-4d26-bc7b-e56bed37a559",
    "prId" : 2141,
    "comments" : [
      {
        "id" : "431abf4e-b7b7-4cf8-b01c-cabf13f574b9",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "```suggestion\r\n        eventLogger (EventVirtualResourceNoteSet vr note) = modifyTVar' virtualResourcesNotes (Map.insert vr note)\r\n```\r\nI like spaces :slightly_smiling_face: ",
        "createdAt" : "2019-07-15T11:31:43Z",
        "updatedAt" : "2019-07-22T07:54:41Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "0daa7be342dc63694da9cd5a53a357e8c4fbb3af",
    "line" : null,
    "diffHunk" : "@@ -115,14 +120,26 @@ pattern EventVirtualResourceChanged vr doc <-\n              (Aeson.parseMaybe Aeson.parseJSON ->\n               Just (VirtualResourceChangedParams (parseURI . T.unpack >=> uriToVirtualResource -> Just vr) doc)))\n \n+pattern EventVirtualResourceNoteSet :: VirtualResource -> T.Text -> FromServerMessage\n+pattern EventVirtualResourceNoteSet vr note <-\n+    NotCustomServer\n+        (NotificationMessage _\n+             (CustomServerMethod ((== virtualResourceNoteSetNotification) -> True))\n+             (Aeson.parseMaybe Aeson.parseJSON ->\n+              Just (VirtualResourceNoteSetParams (parseURI . T.unpack >=> uriToVirtualResource -> Just vr) note)))\n+\n \n -- | Run shake test on freshly initialised shake service.\n runShakeTest :: Maybe SS.Handle -> ShakeTest () -> IO (Either ShakeTestError ShakeTestResults)\n runShakeTest mbScenarioService (ShakeTest m) = do\n     hlintDataDir <-locateRunfiles $ mainWorkspace </> \"compiler/damlc/daml-ide-core\"\n     options <- mkOptions $ (defaultOptions Nothing){optHlintUsage=Just(HlintEnabled hlintDataDir)}\n     virtualResources <- newTVarIO Map.empty\n-    let eventLogger (EventVirtualResourceChanged vr doc) = modifyTVar' virtualResources(Map.insert vr doc)\n+    virtualResourcesNotes <- newTVarIO Map.empty\n+    let eventLogger (EventVirtualResourceChanged vr doc) = do\n+            modifyTVar' virtualResources(Map.insert vr doc)\n+            modifyTVar' virtualResourcesNotes(Map.delete vr)\n+        eventLogger (EventVirtualResourceNoteSet vr note) = modifyTVar' virtualResourcesNotes(Map.insert vr note)"
  }
]