[
  {
    "id" : "f9ffc3d1-d79b-4fb9-984b-55e077e090e5",
    "prId" : 4391,
    "comments" : [
      {
        "id" : "fd022720-3a62-4f3c-bb79-e8aa888530ce",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Instead of injecting the base imports here, I would suggest to do this in `initPackageDb` if `isProject` returns `False`.",
        "createdAt" : "2020-02-05T08:33:21Z",
        "updatedAt" : "2020-02-18T11:12:21Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "fa4b912a-e453-46e2-8a93-f892270092cf",
        "parentId" : "fd022720-3a62-4f3c-bb79-e8aa888530ce",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "The base import injection is now done in: \r\n`compiler/damlc/daml-opts/daml-opts/DA/Daml/Options.hs`",
        "createdAt" : "2020-02-11T22:15:20Z",
        "updatedAt" : "2020-02-18T11:12:21Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "e29eddf5d338724158422a9fd62bf47e4131c5c1",
    "line" : null,
    "diffHunk" : "@@ -157,6 +170,7 @@ mkOptions opts@Options {..} = do\n     ghcVersionFile <- locateRunfiles (mainWorkspace </> \"compiler\" </> \"damlc\" </> \"ghcversion.h\")\n \n     pure opts {\n+        optPackageImports = optPackageImports ++ basePackageImports optMbPackageName,"
  },
  {
    "id" : "918869ab-dd71-4460-8064-9661ebb0494f",
    "prId" : 3503,
    "comments" : [
      {
        "id" : "4321b1c5-3089-474a-aa47-6bb0c50b0f1c",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "This seems to have gotten to the point where it deserves a custom record type instead of `(String, Bool, [(String, String)])`.",
        "createdAt" : "2019-11-18T12:17:21Z",
        "updatedAt" : "2019-11-18T20:20:05Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "e11899fa2735e5f9588b587ccc13106f6598a88d",
    "line" : 6,
    "diffHunk" : "@@ -42,8 +42,9 @@ data Options = Options\n     -- ^ alternative directory to write interface files to. Default is <current working dir>.daml/interfaces.\n   , optHideAllPkgs :: Bool\n     -- ^ hide all imported packages\n-  , optPackageImports :: [(String, [(String, String)])]\n-    -- ^ list of explicit package imports and modules with aliases\n+  , optPackageImports :: [(String, Bool, [(String, String)])]"
  },
  {
    "id" : "805ce0c2-4d05-4e72-89dc-9bb7cbfc5cb8",
    "prId" : 3003,
    "comments" : [
      {
        "id" : "3b898563-b612-47ed-95ef-179769022ecf",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "If we only have disable/enable states, I would just make this a newtype around a `Bool`.",
        "createdAt" : "2019-09-24T14:51:30Z",
        "updatedAt" : "2019-09-25T08:01:54Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "3fb68825c3c5aa62891a92ec08a49980aca9758f",
    "line" : null,
    "diffHunk" : "@@ -86,8 +86,8 @@ data DlintUsage\n   deriving Show\n \n data ScenarioValidation\n-    = ScenarioValidationLight\n-    | ScenarioValidationFull\n+    = ScenarioValidationDisable"
  },
  {
    "id" : "29f74396-75c9-4fca-97d6-5871de6881cb",
    "prId" : 3003,
    "comments" : [
      {
        "id" : "94e86b81-630a-48dc-b155-efc0bc551914",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Please use a newtype for this.",
        "createdAt" : "2019-09-24T16:18:04Z",
        "updatedAt" : "2019-09-25T08:01:54Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "3fb68825c3c5aa62891a92ec08a49980aca9758f",
    "line" : null,
    "diffHunk" : "@@ -161,7 +154,7 @@ defaultOptions mbVersion =\n         , optDebug = False\n         , optGhcCustomOpts = []\n         , optScenarioService = EnableScenarioService True\n-        , optScenarioValidation = ScenarioValidationFull\n+        , optScenarioValidation = True"
  },
  {
    "id" : "c2efda2c-f530-44f7-942a-b7eef4926aac",
    "prId" : 3003,
    "comments" : [
      {
        "id" : "90b1fff1-9b6d-45ef-a6ed-115c0eea73fd",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "```suggestion\r\ndata ScenarioSkipValidation = ScenarioSkipValidation { getSkipScenarioValidation :: Bool }\r\n```",
        "createdAt" : "2019-09-25T07:46:23Z",
        "updatedAt" : "2019-09-25T08:01:54Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "3fb68825c3c5aa62891a92ec08a49980aca9758f",
    "line" : null,
    "diffHunk" : "@@ -85,10 +84,8 @@ data DlintUsage\n   | DlintDisabled\n   deriving Show\n \n-data ScenarioValidation\n-    = ScenarioValidationLight\n-    | ScenarioValidationFull\n-    deriving Show\n+data ScenarioSkipValidation = ScenarioSkipValidation { getFlag :: Bool }"
  },
  {
    "id" : "00863c4b-589e-488d-a231-cecaddd4bb76",
    "prId" : 2878,
    "comments" : [
      {
        "id" : "ae6d7a7e-0326-4b47-8fb6-406525371485",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "```suggestion\r\n    -- as part of our runfiles.\r\n```",
        "createdAt" : "2019-09-11T11:19:07Z",
        "updatedAt" : "2019-09-11T14:44:31Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "f500578c-b03b-4fc4-a58c-2e93196fdbcb",
        "parentId" : "ae6d7a7e-0326-4b47-8fb6-406525371485",
        "author" : null,
        "body" : "Thanks!",
        "createdAt" : "2019-09-11T14:46:25Z",
        "updatedAt" : "2019-09-11T14:46:25Z",
        "lastEditedBy" : null,
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "4b4ee9add38694378a528445e0e9b48ef1ab7dec",
    "line" : null,
    "diffHunk" : "@@ -70,6 +70,11 @@ data Options = Options\n     -- ^ Whether to enable linting of the generated GHC Core. (Used in testing.)\n   , optHaddock :: Haddock\n     -- ^ Whether to enable lexer option `Opt_Haddock` (default is `Haddock False`).\n+  , optCppPath :: Maybe FilePath\n+    -- ^ Enable CPP, by giving filepath to the executable.\n+  , optGhcVersionFile :: Maybe FilePath\n+    -- ^ Path to \"ghcversion.h\". Needed for running CPP. We ship this\n+    -- an part of our runfiles."
  },
  {
    "id" : "c9f3bbed-d785-4467-8408-f126f4d75e18",
    "prId" : 2878,
    "comments" : [
      {
        "id" : "045c0cd5-e4c6-4190-a3f3-eb73f9f5bde9",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Do we care about being able to configure this?",
        "createdAt" : "2019-09-11T11:23:36Z",
        "updatedAt" : "2019-09-11T14:44:31Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "ed5f10bd-6f9e-4993-9636-ace81ba99a6f",
        "parentId" : "045c0cd5-e4c6-4190-a3f3-eb73f9f5bde9",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Answering my own question: No, this isn’t actually configurable, `mkOptions` will always overwrite it. Maybe we should error out in `mkOptions` if this is already set.",
        "createdAt" : "2019-09-11T11:24:47Z",
        "updatedAt" : "2019-09-11T14:44:31Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "d29a068b-efc2-4fb2-b72d-1e999a6b9881",
        "parentId" : "045c0cd5-e4c6-4190-a3f3-eb73f9f5bde9",
        "author" : null,
        "body" : "I added a comment saying it's set by `mkOptions` at least",
        "createdAt" : "2019-09-11T14:44:45Z",
        "updatedAt" : "2019-09-11T14:44:45Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "4b4ee9add38694378a528445e0e9b48ef1ab7dec",
    "line" : 6,
    "diffHunk" : "@@ -70,6 +70,11 @@ data Options = Options\n     -- ^ Whether to enable linting of the generated GHC Core. (Used in testing.)\n   , optHaddock :: Haddock\n     -- ^ Whether to enable lexer option `Opt_Haddock` (default is `Haddock False`).\n+  , optCppPath :: Maybe FilePath\n+    -- ^ Enable CPP, by giving filepath to the executable.\n+  , optGhcVersionFile :: Maybe FilePath"
  },
  {
    "id" : "bc3f0750-d406-465e-82dd-00394f39fee2",
    "prId" : 2343,
    "comments" : [
      {
        "id" : "ba9afc8e-0718-40b1-b521-c80599aacfdb",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Should this maybe go into `mkOptions`? That seems to match how we handle things like the package db.",
        "createdAt" : "2019-07-31T06:54:53Z",
        "updatedAt" : "2019-07-31T06:55:27Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "ecf776ff07fbf114d0ee21c837a6904f83ce17a1",
    "line" : 14,
    "diffHunk" : "@@ -116,11 +116,14 @@ mkOptions opts@Options {..} = do\n           unless ok $ fail $ \"Required directory does not exist: \" <> f\n         versionSuffix = renderPretty optDamlLfVersion\n \n--- | Default configuration for the compiler with package database set according to daml-lf version\n--- and located runfiles. If the version argument is Nothing it is set to the default daml-lf\n--- version.\n+-- | Default configuration for the compiler with package database set\n+-- according to daml-lf version and located runfiles. If the version\n+-- argument is Nothing it is set to the default daml-lf\n+-- version. Linting is enabled but not '.dlint.yaml' overrides.\n defaultOptionsIO :: Maybe LF.Version -> IO Options\n-defaultOptionsIO mbVersion = mkOptions $ defaultOptions mbVersion\n+defaultOptionsIO mbVersion = do\n+  hlintDataDir <-locateRunfiles $ mainWorkspace </> \"compiler/damlc/daml-ide-core\""
  },
  {
    "id" : "835be663-01d3-40f6-9d14-5290b5a2bf79",
    "prId" : 2147,
    "comments" : [
      {
        "id" : "10eb1885-89cf-4f2b-bcfa-e86ff3b910da",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Does this work on Windows if the default package db is not in the runfiles? I would have expected that this fails to return a location.",
        "createdAt" : "2019-07-15T13:06:52Z",
        "updatedAt" : "2019-07-16T16:30:25Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "b2308ecc-5dfa-4354-b965-c4fbb57224b0",
        "parentId" : "10eb1885-89cf-4f2b-bcfa-e86ff3b910da",
        "author" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "body" : "I took a look at the generated manifest file and it had an entry for `pkg-db_dir`. ",
        "createdAt" : "2019-07-15T13:22:44Z",
        "updatedAt" : "2019-07-16T16:30:25Z",
        "lastEditedBy" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "d680fbc7-d2db-45e4-b689-1e01dc42b6bf",
        "parentId" : "10eb1885-89cf-4f2b-bcfa-e86ff3b910da",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Even for `damlc_bootstrap`? There definitely should be one for `damlc` but we had the case for the non-exist pkg db dir for bootstrapping purposes afaik.",
        "createdAt" : "2019-07-15T13:23:54Z",
        "updatedAt" : "2019-07-16T16:30:25Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "c9cc104e-8274-49ca-afd7-9f095269830e",
        "parentId" : "10eb1885-89cf-4f2b-bcfa-e86ff3b910da",
        "author" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "body" : "No, but for `damlc-bootstrap` there's no entry for `pkg-db` either way. I.e. neither `compiler/damlc/pkg-db` nor `compiler/damlc/pkg-db/pkg-db_dir` in neither `.runfiles_manifest` nor `.runfiles`.",
        "createdAt" : "2019-07-15T13:32:06Z",
        "updatedAt" : "2019-07-16T16:30:25Z",
        "lastEditedBy" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "f0714f40-f31b-4371-9b3b-5046066f4103",
        "parentId" : "10eb1885-89cf-4f2b-bcfa-e86ff3b910da",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "What I don’t understand is why this is not an error. What does `locateRunfiles` return if the directory does not exist?",
        "createdAt" : "2019-07-15T13:35:39Z",
        "updatedAt" : "2019-07-16T16:30:25Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "93f88147-f27b-4a10-8de0-8d86f4c4d926",
        "parentId" : "10eb1885-89cf-4f2b-bcfa-e86ff3b910da",
        "author" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "body" : "`rlocation` does not check if the path actually exists. This is also following the Bazel spec:\r\n\r\n> Directory-based: appends the runfile's path to the runfiles root. The client is responsible for checking that the resulting path exists.\r\n\r\nTracing the result of `locateRunfiles` when building `//compiler/damlc/pkg-db:daml-prim-1.5` shows that the `pkg-db` path indeed does not exist. But, as long as it's not read that's not an error. ",
        "createdAt" : "2019-07-15T13:57:39Z",
        "updatedAt" : "2019-07-16T16:30:25Z",
        "lastEditedBy" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "6bb681b1-0335-44d4-ba2b-c1a7f4d648c2",
        "parentId" : "10eb1885-89cf-4f2b-bcfa-e86ff3b910da",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "The reason why I am confused is that I don’t understand how we can produce any reasonable path existing or not on Windows since the paths there are read from the manifest instead of simply concatenated. Sounds like I am misunderstanding how things work here?",
        "createdAt" : "2019-07-15T14:00:50Z",
        "updatedAt" : "2019-07-16T16:30:25Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "21911bc8-ab06-471f-86ad-500445de9bef",
        "parentId" : "10eb1885-89cf-4f2b-bcfa-e86ff3b910da",
        "author" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "body" : "I see, yes, on Windows the fallback is to just return the original path, which will typically not exist. It's not pretty, but it seems like the most consistent solution across Windows and Unix. It doesn't cause an error down the line in this case, because of the check if the directory exists in the following line.",
        "createdAt" : "2019-07-15T14:11:36Z",
        "updatedAt" : "2019-07-16T16:30:25Z",
        "lastEditedBy" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "0185af4a-728d-4d6e-8502-68e87ba68586",
        "parentId" : "10eb1885-89cf-4f2b-bcfa-e86ff3b910da",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Thank you for the explanation! Now I understand what’s going on.",
        "createdAt" : "2019-07-15T14:38:29Z",
        "updatedAt" : "2019-07-16T16:30:25Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "21c2459b-2b7b-450c-9628-949f7e38243d",
        "parentId" : "10eb1885-89cf-4f2b-bcfa-e86ff3b910da",
        "author" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "body" : "Turns out this is problematic with `locateRunfiles` in the `package_app` case. I misunderstood `locateRunfiles`, in the `package_app` case it is meant to just return the `resources` directory and the use-site then knows what relative path to append to find the actual runfiles. In the non-`package_app` case `locateRunfiles` falls back to bazel-runfiles to find the corresponding directory.\r\n\r\nI've changed things to match this behavior. On the bright side it reduces the code even further.",
        "createdAt" : "2019-07-15T16:40:17Z",
        "updatedAt" : "2019-07-16T16:30:25Z",
        "lastEditedBy" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "d449cbf9a4b454e6345de93e636b8044fe4cb34e",
    "line" : null,
    "diffHunk" : "@@ -103,9 +102,8 @@ basePackages = [\"daml-prim\", \"daml-stdlib\"]\n mkOptions :: Options -> IO Options\n mkOptions opts@Options {..} = do\n     mapM_ checkDirExists $ optImportPath <> optPackageDbs\n-    mbDefaultPkgDb <- locateRunfilesMb (mainWorkspace </> \"compiler\" </> \"damlc\" </> \"pkg-db\")\n-    let mbDefaultPkgDbDir = fmap (</> \"pkg-db_dir\") mbDefaultPkgDb\n-    pkgDbs <- filterM Dir.doesDirectoryExist (toList mbDefaultPkgDbDir ++ [projectPackageDatabase])\n+    defaultPkgDbDir <- locateRunfiles (mainWorkspace </> \"compiler\" </> \"damlc\" </> \"pkg-db\" </> \"pkg-db_dir\")"
  },
  {
    "id" : "90aa5310-c4ae-4ca4-828b-4ef4c28ef228",
    "prId" : 2138,
    "comments" : [
      {
        "id" : "cd91caeb-d299-41ca-b14b-fde13da15286",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Why is this a `Maybe`? What is the difference between `Nothing` and `HlintDisabled`?",
        "createdAt" : "2019-07-15T06:55:34Z",
        "updatedAt" : "2019-07-15T06:56:38Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "04ee1536-01fb-4f45-aac9-9faa601f94cc",
        "parentId" : "cd91caeb-d299-41ca-b14b-fde13da15286",
        "author" : null,
        "body" : "In truth not much:\r\n  - `--hlint-enabled f` => `Just HlintEnabled f`\r\n  - `--hlint-disabled`  => `Just HlintDisabled`\r\n  - `{- nothing -}`     => `Nothing`\r\nThe code for parsing the options looks like this:\r\n```haskell\r\nhlintEnabledOpt :: Parser HlintUsage\r\nhlintEnabledOpt = HlintEnabled <$> strOption\r\n  ( long \"with-hlint\"\r\n    <> metavar \"DIR\"\r\n    <> help \"Enable hlint with hlint.yaml directory\"\r\n  )\r\n\r\nhlintDisabledOpt :: Parser HlintUsage\r\nhlintDisabledOpt = flag' HlintDisabled\r\n  ( long \"without-hlint\"\r\n    <> help \"Disable hlint\"\r\n  )\r\n\r\nhlintUsageOpt :: Parser (Maybe HlintUsage)\r\nhlintUsageOpt = optional (hlintEnabledOpt <|> hlintDisabledOpt)\r\n```\r\nThe sad truth is that I haven't yet been able to work out how to express an \"optional with a default\".",
        "createdAt" : "2019-07-15T09:13:09Z",
        "updatedAt" : "2019-07-15T09:13:09Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "35e867dd-278a-4d71-a5d5-0dffcb535b4b",
        "parentId" : "cd91caeb-d299-41ca-b14b-fde13da15286",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "```haskell\r\nhlintEnabledOpt = option reader (long \"with-hlint\" <> metavar \"DIR\" <> help \"Enable hlint with hlint.yaml directory\" <> value HLintDisabled)\r\n  where reader = HLintEnabled readerAsk\r\n```\r\nThat should get you pretty close.",
        "createdAt" : "2019-07-15T09:16:56Z",
        "updatedAt" : "2019-07-15T09:17:15Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "19f892f3-6c2a-4981-9c9c-533e8d8d6e06",
        "parentId" : "cd91caeb-d299-41ca-b14b-fde13da15286",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Another alternative would be to parse into a `Maybe` first and then convert that to `HLintUsage` using an `fmap` or just use a `Maybe` directly instead of `HLintUsage` (don’t feel particularly strongly about that either way).",
        "createdAt" : "2019-07-15T09:18:39Z",
        "updatedAt" : "2019-07-15T09:18:39Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "9a5c5e028fdb1b9ffda8f82b7ce5c53e2b7aa402",
    "line" : 16,
    "diffHunk" : "@@ -58,14 +59,17 @@ data Options = Options\n     -- ^ Controls whether the scenario service server runs all checks\n     -- or only a subset of them. This is mostly used to run additional\n     -- checks on CI while keeping the IDE fast.\n-  , optHlintEnabled :: Bool\n-  -- ^ Whether or not to enable hlint\n-  , optHlintDataDir :: Maybe FilePath\n-    -- ^ Where hlint's base configuration file (hlint.yaml) resides\n+  , optHlintUsage :: Maybe HlintUsage"
  },
  {
    "id" : "1d9ca512-b63f-428b-818d-c083f42a7a7e",
    "prId" : 2115,
    "comments" : [
      {
        "id" : "8ffe5d04-9ea6-4930-8f08-1437afa78f85",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "It looks like you are already switching on `optHlintDataDir` so this option seems to be redundant.",
        "createdAt" : "2019-07-12T12:04:26Z",
        "updatedAt" : "2019-07-12T15:42:21Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "cfe912c8-3142-47cb-99f0-6dfdfa3b6533",
        "parentId" : "8ffe5d04-9ea6-4930-8f08-1437afa78f85",
        "author" : null,
        "body" : "Going to get reworked.",
        "createdAt" : "2019-07-12T14:54:55Z",
        "updatedAt" : "2019-07-12T15:42:21Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "70dbda3a4e6f6e2c8b607e944eb807553787c2c2",
    "line" : 4,
    "diffHunk" : "@@ -55,6 +55,10 @@ data Options = Options\n     -- ^ Controls whether the scenario service server runs all checks\n     -- or only a subset of them. This is mostly used to run additional\n     -- checks on CI while keeping the IDE fast.\n+  , optHlintEnabled :: Bool"
  },
  {
    "id" : "fd733f7b-c718-4a8c-9c7b-a5013e370042",
    "prId" : 2115,
    "comments" : [
      {
        "id" : "c5e6f8c7-8c42-47df-a0a0-d9ed6eac0e88",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "You really love pressing `M-q` ;)",
        "createdAt" : "2019-07-12T12:04:51Z",
        "updatedAt" : "2019-07-12T15:42:21Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "535f103f-bbc6-49c4-bcb0-83e51d6a6a72",
        "parentId" : "c5e6f8c7-8c42-47df-a0a0-d9ed6eac0e88",
        "author" : null,
        "body" : "`M-q`, `M-q`, `M-q` again!",
        "createdAt" : "2019-07-12T12:19:07Z",
        "updatedAt" : "2019-07-12T15:42:21Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "70dbda3a4e6f6e2c8b607e944eb807553787c2c2",
    "line" : 20,
    "diffHunk" : "@@ -82,19 +86,21 @@ distDir = damlArtifactDir </> \"dist\"\n basePackages :: [String]\n basePackages = [\"daml-prim\", \"daml-stdlib\"]\n \n--- | Check that import paths and package db directories exist\n--- and add the default package db if it exists\n+-- | Check that import paths and package db directories exist and add"
  },
  {
    "id" : "4783b579-7590-4589-a21c-f0b1f08c81d3",
    "prId" : 2115,
    "comments" : [
      {
        "id" : "9001ca40-4092-42c3-839c-2db73bd90ea1",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "```suggestion\r\n          unless ok $ fail $ \"Required directory does not exist: \" <> f\r\n```",
        "createdAt" : "2019-07-12T12:05:43Z",
        "updatedAt" : "2019-07-12T15:42:21Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "70dbda3a4e6f6e2c8b607e944eb807553787c2c2",
    "line" : null,
    "diffHunk" : "@@ -82,19 +86,21 @@ distDir = damlArtifactDir </> \"dist\"\n basePackages :: [String]\n basePackages = [\"daml-prim\", \"daml-stdlib\"]\n \n--- | Check that import paths and package db directories exist\n--- and add the default package db if it exists\n+-- | Check that import paths and package db directories exist and add\n+-- the default package db if it exists\n mkOptions :: Options -> IO Options\n mkOptions opts@Options {..} = do\n     mapM_ checkDirExists $ optImportPath <> optPackageDbs\n     mbDefaultPkgDb <- locateRunfilesMb (mainWorkspace </> \"compiler\" </> \"damlc\" </> \"pkg-db\")\n     let mbDefaultPkgDbDir = fmap (</> \"pkg-db_dir\") mbDefaultPkgDb\n     pkgDbs <- filterM Dir.doesDirectoryExist (toList mbDefaultPkgDbDir ++ [projectPackageDatabase])\n-    pure opts {optPackageDbs = map (</> versionSuffix) $ pkgDbs ++ optPackageDbs}\n+    hlintDataDir <- locateRunfiles $ mainWorkspace </> \"compiler/damlc/daml-ide-core\"\n+    checkDirExists hlintDataDir\n+    pure opts {optPackageDbs = map (</> versionSuffix) $ pkgDbs ++ optPackageDbs\n+              , optHlintDataDir=Just hlintDataDir}\n   where checkDirExists f =\n           Dir.doesDirectoryExist f >>= \\ok ->\n-          unless ok $ error $\n-            \"Required configuration/package database directory does not exist: \" <> f\n+          unless ok $ error $ \"Required directory does not exist: \" <> f"
  }
]