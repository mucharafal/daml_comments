[
  {
    "id" : "d049a690-8e0c-47f4-bee3-b34fb0eb042c",
    "prId" : 7662,
    "comments" : [
      {
        "id" : "7cff581d-0bc6-4f55-81ff-f6c49d718430",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "The `Ord` instance for `Extension` has been added to GHC after we forked off. Thus, I use `EnumSet` instead of a regular `Data.Set` here.",
        "createdAt" : "2020-10-15T16:37:45Z",
        "updatedAt" : "2020-10-15T17:00:53Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "ee08b5ca-21c0-4ecd-99aa-c514e8fcd6a5",
        "parentId" : "7cff581d-0bc6-4f55-81ff-f6c49d718430",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Seems reasonable although you could also just throw an orphan instance somewhere.",
        "createdAt" : "2020-10-15T16:40:19Z",
        "updatedAt" : "2020-10-15T17:00:53Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "91690c85-1170-4630-ab21-8abf7694f47f",
        "parentId" : "7cff581d-0bc6-4f55-81ff-f6c49d718430",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "After spending so much time thinking about typeclass issues, I strongly dislike orphan instances. 😰",
        "createdAt" : "2020-10-15T16:52:56Z",
        "updatedAt" : "2020-10-15T17:00:59Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "e3f23b1d5318f31cad2e008d6d135042c951a898",
    "line" : 44,
    "diffHunk" : "@@ -265,10 +272,22 @@ xExtensionsSet =\n   , DamlSyntax\n   ]\n \n+-- | Extensions which we support with data-dependencies.\n+dataDependableExtensions :: ES.EnumSet Extension"
  },
  {
    "id" : "6cbaca6b-77f6-4b21-827d-cd62d22f9c34",
    "prId" : 7318,
    "comments" : [
      {
        "id" : "eda02b9f-b9a7-4b15-a57f-2a7abfbcaa36",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "If we put the DALF for DAML Script into the DAR for DAML Triggers, wouldn't that solve the problem as well? If so, I would prefer that approach over having this custom hook here.",
        "createdAt" : "2020-09-04T11:33:23Z",
        "updatedAt" : "2020-09-04T11:33:35Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "adf80b5f-d4fa-4e6d-b9cb-5bcc7478cda3",
        "parentId" : "eda02b9f-b9a7-4b15-a57f-2a7abfbcaa36",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "No it doesn’t. We need the GHC interface files.",
        "createdAt" : "2020-09-04T11:38:42Z",
        "updatedAt" : "2020-09-04T11:38:43Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "fb3ec2e69f03603a52bca3208b99778dd56cb0d6",
    "line" : 22,
    "diffHunk" : "@@ -470,6 +470,14 @@ expandSdkPackages lfVersion dars = do\n             Just sdkPath -> pure $ sdkPath </> \"daml-libs\" </> fp <> sdkSuffix <.> \"dar\"\n             Nothing -> fail $ \"Cannot resolve SDK dependency '\" ++ fp ++ \"'. Use daml assistant.\"\n       | otherwise = pure fp\n+    -- For `dependencies` you need to specify all transitive dependencies."
  },
  {
    "id" : "c9ddda14-b479-44e4-854f-970088699801",
    "prId" : 6467,
    "comments" : [
      {
        "id" : "c42694f4-a8b6-4e72-a7f0-49de95858e75",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Not sure we want to. It might cause a fair amount of noise for some projects that haven’t payed attention to this so far and it’s purely a stylistic thing not a bug.",
        "createdAt" : "2020-06-23T15:39:58Z",
        "updatedAt" : "2020-06-23T15:41:01Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "0c3d03d9-84b8-45bc-815b-2aa8eca9c825",
        "parentId" : "c42694f4-a8b6-4e72-a7f0-49de95858e75",
        "author" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "body" : "Well, of course, I am biased 🤣 ",
        "createdAt" : "2020-06-23T15:42:22Z",
        "updatedAt" : "2020-06-23T15:42:22Z",
        "lastEditedBy" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "43180ac6-55e8-4f05-8ce2-302278692a25",
        "parentId" : "c42694f4-a8b6-4e72-a7f0-49de95858e75",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "I would enable it on _my_ projects but that’s different from throwing potentially thousands of warnings at our users :slightly_smiling_face: ",
        "createdAt" : "2020-06-23T15:44:07Z",
        "updatedAt" : "2020-06-23T15:59:44Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "51372921-9f0f-4644-9747-d5df8bea526b",
        "parentId" : "c42694f4-a8b6-4e72-a7f0-49de95858e75",
        "author" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "body" : "Oh wow! We almost never agree on these sorts of things! 🤣 ",
        "createdAt" : "2020-06-23T16:01:40Z",
        "updatedAt" : "2020-06-23T16:01:41Z",
        "lastEditedBy" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "567deb06e19c8c134cfcd488ee6df7d410b0a1ba",
    "line" : 4,
    "diffHunk" : "@@ -284,9 +284,21 @@ xFlagsSet options =\n wOptsSet :: [ WarningFlag ]\n wOptsSet =\n   [ Opt_WarnUnusedImports\n+-- Can enable when we are on GHC >= 8.10 (we should, after all we"
  },
  {
    "id" : "34828dcb-d8bc-417b-be60-b41a515faece",
    "prId" : 6423,
    "comments" : [
      {
        "id" : "3174619f-8e04-4860-86f2-62aa2cd61d0e",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "I’m not sure we want to turn it on by default. We don’t even turn on other unused warnings (e.g. unused top-level binds). I would suggest that we split things in two: In this PR make the warning usable and let people enable it manually. Then in the future we can decide to enable this and other unused warnings by default.",
        "createdAt" : "2020-06-19T06:56:27Z",
        "updatedAt" : "2020-06-19T17:52:14Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "a876b3c9-5299-4a48-8060-be2aeb1d50fc",
        "parentId" : "3174619f-8e04-4860-86f2-62aa2cd61d0e",
        "author" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "body" : "✔️ ",
        "createdAt" : "2020-06-19T13:41:48Z",
        "updatedAt" : "2020-06-19T17:52:14Z",
        "lastEditedBy" : {
          "login" : "shayne-fletcher",
          "name" : "Shayne Fletcher",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1500167?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "8d1d4fdf697ac5c029167f8d8e4fd28d3f308c8f",
    "line" : null,
    "diffHunk" : "@@ -287,6 +287,7 @@ wOptsSet =\n --  , Opt_WarnPrepositiveQualifiedModule\n   , Opt_WarnOverlappingPatterns\n   , Opt_WarnIncompletePatterns\n+  , Opt_WarnUnusedMatches"
  },
  {
    "id" : "b5d0b33f-35fb-4cf3-bc89-b9e33b65bb3b",
    "prId" : 4391,
    "comments" : [
      {
        "id" : "22aeb550-3c14-436d-953a-bec5f1a94361",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "```suggestion\r\ntoCompileOpts options@Options{..} reportProgress =\r\n```\r\nno need to make the diff unnecessarily noisy and this `do` doesn’t make any sense.",
        "createdAt" : "2020-02-12T08:16:03Z",
        "updatedAt" : "2020-02-18T11:12:21Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "a0bde032-4a1d-430f-b5a5-caa3db16fa0a",
        "parentId" : "22aeb550-3c14-436d-953a-bec5f1a94361",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "done\r\n(there was `let` added here, but it got moved in `getDamlGhcSession` after the last rebase)",
        "createdAt" : "2020-02-12T12:35:23Z",
        "updatedAt" : "2020-02-18T11:12:21Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "e29eddf5d338724158422a9fd62bf47e4131c5c1",
    "line" : null,
    "diffHunk" : "@@ -48,9 +49,22 @@ import DA.Daml.Preprocessor\n import Development.IDE.GHC.Util\n import qualified Development.IDE.Types.Options as Ghcide\n \n+mkPackageFlag :: UnitId -> PackageFlag\n+mkPackageFlag unitId = ExposePackage \"--package \" (UnitIdArg unitId) (ModRenaming True [])\n+\n+mkBaseUnits :: Maybe String -> [UnitId]\n+mkBaseUnits optMbPackageName\n+  | optMbPackageName == Just \"daml-prim\" =\n+      []\n+  | optMbPackageName == Just damlStdlib =\n+      [ stringToUnitId \"daml-prim\" ]\n+  | otherwise =\n+      [ stringToUnitId \"daml-prim\"\n+      , stringToUnitId damlStdlib ]\n+\n -- | Convert to ghcide’s IdeOptions type.\n toCompileOpts :: Options -> Ghcide.IdeReportProgress -> Ghcide.IdeOptions\n-toCompileOpts options@Options{..} reportProgress =\n+toCompileOpts options@Options{..} reportProgress = do"
  },
  {
    "id" : "40823c27-23a1-43e6-a1de-50d8d273d445",
    "prId" : 4391,
    "comments" : [
      {
        "id" : "b5bf7add-e8a6-493a-a72a-9abd29a91555",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "I think it probably makes more sense to put `optPackageImports` at the end so you can infer the inferred flags.",
        "createdAt" : "2020-02-18T08:05:43Z",
        "updatedAt" : "2020-02-18T11:12:21Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "5f2a75e9-b4a1-4bb6-8296-d7fc3bd04098",
        "parentId" : "b5bf7add-e8a6-493a-a72a-9abd29a91555",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "I did as you suggest. I assume this is because later options can override/extend earlier ones.",
        "createdAt" : "2020-02-18T11:18:32Z",
        "updatedAt" : "2020-02-18T11:18:33Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "e29eddf5d338724158422a9fd62bf47e4131c5c1",
    "line" : null,
    "diffHunk" : "@@ -83,10 +96,18 @@ getDamlGhcSession :: Options -> IO (FilePath -> Action HscEnvEq)\n getDamlGhcSession options@Options{..} = do\n     findProjectRoot <- memoIO findProjectRoot\n     getSession <- memoIO $ \\mbProjectRoot -> do\n+        let base = mkBaseUnits optMbPackageName\n+        optPackageImports <-\n+          if getInferDependantPackages optInferDependantPackages\n+          then do\n+            more <- dependantUnitsFromDamlYaml mbProjectRoot\n+            pure $ optPackageImports ++ map mkPackageFlag (base ++ more)"
  },
  {
    "id" : "8ca6e595-2b0f-463b-9c73-043e32bce147",
    "prId" : 4391,
    "comments" : [
      {
        "id" : "eae28911-efb3-4b1f-aa51-22774fd0dfcf",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "The string here should include the unit id. See https://github.com/digital-asset/daml/pull/4516.",
        "createdAt" : "2020-02-18T08:08:56Z",
        "updatedAt" : "2020-02-18T11:12:21Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "e29eddf5d338724158422a9fd62bf47e4131c5c1",
    "line" : null,
    "diffHunk" : "@@ -399,3 +419,90 @@ checkDFlags Options {..} dflags@DynFlags {..}\n                 \" imports a package with the same name. \\\n             \\ Please check your dependencies and rename the package you are compiling \\\n             \\ or the dependency.\"\n+\n+-- Expand SDK package dependencies using the SDK root path.\n+-- E.g. `daml-trigger` --> `$DAML_SDK/daml-libs/daml-trigger.dar`\n+-- When invoked outside of the SDK, we will only error out\n+-- if there is actually an SDK package so that\n+-- When there is no SDK\n+expandSdkPackages :: [FilePath] -> IO [FilePath]\n+expandSdkPackages dars = do\n+    mbSdkPath <- handleIO (\\_ -> pure Nothing) $ Just <$> getSdkPath\n+    mapM (expand mbSdkPath) dars\n+  where\n+    isSdkPackage fp = takeExtension fp `notElem` [\".dar\", \".dalf\"]\n+    expand mbSdkPath fp\n+      | fp `elem` basePackages = pure fp\n+      | isSdkPackage fp = case mbSdkPath of\n+            Just sdkPath -> pure $ sdkPath </> \"daml-libs\" </> fp <.> \"dar\"\n+            Nothing -> fail $ \"Cannot resolve SDK dependency '\" ++ fp ++ \"'. Use daml assistant.\"\n+      | otherwise = pure fp\n+\n+\n+mkPackageFlag :: UnitId -> PackageFlag\n+mkPackageFlag unitId = ExposePackage \"--package \" (UnitIdArg unitId) (ModRenaming True [])"
  },
  {
    "id" : "a223e999-24a4-4793-8cbb-993df29156d6",
    "prId" : 4391,
    "comments" : [
      {
        "id" : "7c8f9790-3590-4a1a-af58-9fd46ec92da8",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Why do we have to change the directory here? Is that only so that `calcUnitsFromDeps` resolves relative file paths directly? If so, I would prefer to instead pass on the directory to `calcUnitsFromDeps`. CWD is process-global state so modifying it is a bit fishy and will almost certainly break in some cases without a lock.",
        "createdAt" : "2020-02-18T08:11:23Z",
        "updatedAt" : "2020-02-18T11:12:21Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "cf4cd06d-d11e-415b-bc03-682ff38ea300",
        "parentId" : "7c8f9790-3590-4a1a-af58-9fd46ec92da8",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "ok, `withCurrentDirectory` is removed",
        "createdAt" : "2020-02-18T11:19:18Z",
        "updatedAt" : "2020-02-18T11:19:19Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "e29eddf5d338724158422a9fd62bf47e4131c5c1",
    "line" : null,
    "diffHunk" : "@@ -399,3 +419,90 @@ checkDFlags Options {..} dflags@DynFlags {..}\n                 \" imports a package with the same name. \\\n             \\ Please check your dependencies and rename the package you are compiling \\\n             \\ or the dependency.\"\n+\n+-- Expand SDK package dependencies using the SDK root path.\n+-- E.g. `daml-trigger` --> `$DAML_SDK/daml-libs/daml-trigger.dar`\n+-- When invoked outside of the SDK, we will only error out\n+-- if there is actually an SDK package so that\n+-- When there is no SDK\n+expandSdkPackages :: [FilePath] -> IO [FilePath]\n+expandSdkPackages dars = do\n+    mbSdkPath <- handleIO (\\_ -> pure Nothing) $ Just <$> getSdkPath\n+    mapM (expand mbSdkPath) dars\n+  where\n+    isSdkPackage fp = takeExtension fp `notElem` [\".dar\", \".dalf\"]\n+    expand mbSdkPath fp\n+      | fp `elem` basePackages = pure fp\n+      | isSdkPackage fp = case mbSdkPath of\n+            Just sdkPath -> pure $ sdkPath </> \"daml-libs\" </> fp <.> \"dar\"\n+            Nothing -> fail $ \"Cannot resolve SDK dependency '\" ++ fp ++ \"'. Use daml assistant.\"\n+      | otherwise = pure fp\n+\n+\n+mkPackageFlag :: UnitId -> PackageFlag\n+mkPackageFlag unitId = ExposePackage \"--package \" (UnitIdArg unitId) (ModRenaming True [])\n+\n+mkBaseUnits :: Maybe String -> [UnitId]\n+mkBaseUnits optMbPackageName\n+  | optMbPackageName == Just \"daml-prim\" =\n+      []\n+  | optMbPackageName == Just damlStdlib =\n+      [ stringToUnitId \"daml-prim\" ]\n+  | otherwise =\n+      [ stringToUnitId \"daml-prim\"\n+      , stringToUnitId damlStdlib ]\n+\n+dependantUnitsFromDamlYaml :: Maybe FilePath -> IO [UnitId]\n+dependantUnitsFromDamlYaml mbRoot = do\n+  let dir = fromMaybe \".\" mbRoot\n+  withCurrentDirectory dir $ do"
  },
  {
    "id" : "5ef7702d-2c1a-49c0-830d-482f7c8a25b3",
    "prId" : 4391,
    "comments" : [
      {
        "id" : "fca2590d-aec1-4681-a857-f57187d07393",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "```suggestion\r\n        Archive.decodeArchivePackageId dalf\r\n```\r\nSee https://github.com/digital-asset/daml/pull/4550",
        "createdAt" : "2020-02-18T08:13:11Z",
        "updatedAt" : "2020-02-18T11:12:21Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "b899f6df-0c42-44fc-9ed4-00baa57fa059",
        "parentId" : "fca2590d-aec1-4681-a857-f57187d07393",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "rebased, and made this change",
        "createdAt" : "2020-02-18T11:19:39Z",
        "updatedAt" : "2020-02-18T11:19:40Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "e29eddf5d338724158422a9fd62bf47e4131c5c1",
    "line" : null,
    "diffHunk" : "@@ -399,3 +419,90 @@ checkDFlags Options {..} dflags@DynFlags {..}\n                 \" imports a package with the same name. \\\n             \\ Please check your dependencies and rename the package you are compiling \\\n             \\ or the dependency.\"\n+\n+-- Expand SDK package dependencies using the SDK root path.\n+-- E.g. `daml-trigger` --> `$DAML_SDK/daml-libs/daml-trigger.dar`\n+-- When invoked outside of the SDK, we will only error out\n+-- if there is actually an SDK package so that\n+-- When there is no SDK\n+expandSdkPackages :: [FilePath] -> IO [FilePath]\n+expandSdkPackages dars = do\n+    mbSdkPath <- handleIO (\\_ -> pure Nothing) $ Just <$> getSdkPath\n+    mapM (expand mbSdkPath) dars\n+  where\n+    isSdkPackage fp = takeExtension fp `notElem` [\".dar\", \".dalf\"]\n+    expand mbSdkPath fp\n+      | fp `elem` basePackages = pure fp\n+      | isSdkPackage fp = case mbSdkPath of\n+            Just sdkPath -> pure $ sdkPath </> \"daml-libs\" </> fp <.> \"dar\"\n+            Nothing -> fail $ \"Cannot resolve SDK dependency '\" ++ fp ++ \"'. Use daml assistant.\"\n+      | otherwise = pure fp\n+\n+\n+mkPackageFlag :: UnitId -> PackageFlag\n+mkPackageFlag unitId = ExposePackage \"--package \" (UnitIdArg unitId) (ModRenaming True [])\n+\n+mkBaseUnits :: Maybe String -> [UnitId]\n+mkBaseUnits optMbPackageName\n+  | optMbPackageName == Just \"daml-prim\" =\n+      []\n+  | optMbPackageName == Just damlStdlib =\n+      [ stringToUnitId \"daml-prim\" ]\n+  | otherwise =\n+      [ stringToUnitId \"daml-prim\"\n+      , stringToUnitId damlStdlib ]\n+\n+dependantUnitsFromDamlYaml :: Maybe FilePath -> IO [UnitId]\n+dependantUnitsFromDamlYaml mbRoot = do\n+  let dir = fromMaybe \".\" mbRoot\n+  withCurrentDirectory dir $ do\n+    (deps,dataDeps) <- depsFromDamlYaml (ProjectPath dir)\n+    deps <- expandSdkPackages (filter (`notElem` basePackages) deps)\n+    calcUnitsFromDeps (deps ++ dataDeps)\n+\n+depsFromDamlYaml :: ProjectPath -> IO ([FilePath],[FilePath])\n+depsFromDamlYaml projectPath = do\n+  try (readProjectConfig projectPath) >>= \\case\n+    Left (_::ConfigError) -> return ([],[])\n+    Right project -> return $ projectDeps project\n+\n+projectDeps :: ProjectConfig -> ([FilePath],[FilePath])\n+projectDeps project = do\n+  let deps = fromMaybe [] $ either (error . show) id $ queryProjectConfig [\"dependencies\"] project\n+  let dataDeps = fromMaybe [] $ either (error . show) id $ queryProjectConfig [\"data-dependencies\"] project\n+  (deps,dataDeps)\n+\n+calcUnitsFromDeps :: [FilePath] -> IO [UnitId]\n+calcUnitsFromDeps deps = do\n+  let (fpDars, fpDalfs) = partition ((== \".dar\") . takeExtension) deps\n+  entries <- mapM mainEntryOfDar fpDars\n+  let dalfsFromDars =\n+        [ ( dropExtension $ takeFileName $ ZipArchive.eRelativePath e\n+          , BSL.toStrict $ ZipArchive.fromEntry e)\n+        | e <- entries ]\n+  dalfsFromFps <-\n+    forM fpDalfs $ \\fp -> do\n+      bs <- BS.readFile fp\n+      pure (dropExtension $ takeFileName fp, bs)\n+  let mainDalfs = dalfsFromDars ++ dalfsFromFps\n+  flip mapMaybeM mainDalfs $ \\(name, dalf) -> runMaybeT $ do\n+    (pkgId, _package) <-\n+        liftIO $\n+        either (fail . DA.Pretty.renderPretty) pure $\n+        Archive.decodeArchive Archive.DecodeAsMain dalf"
  },
  {
    "id" : "257cd9be-0a34-4e59-a510-ac5a2ab3aaef",
    "prId" : 4391,
    "comments" : [
      {
        "id" : "45b66cbf-d70c-4feb-a091-45ced4ff1160",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "```suggestion\r\n    pkgId <-\r\n```",
        "createdAt" : "2020-02-18T08:13:23Z",
        "updatedAt" : "2020-02-18T11:12:21Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "e29eddf5d338724158422a9fd62bf47e4131c5c1",
    "line" : null,
    "diffHunk" : "@@ -399,3 +419,90 @@ checkDFlags Options {..} dflags@DynFlags {..}\n                 \" imports a package with the same name. \\\n             \\ Please check your dependencies and rename the package you are compiling \\\n             \\ or the dependency.\"\n+\n+-- Expand SDK package dependencies using the SDK root path.\n+-- E.g. `daml-trigger` --> `$DAML_SDK/daml-libs/daml-trigger.dar`\n+-- When invoked outside of the SDK, we will only error out\n+-- if there is actually an SDK package so that\n+-- When there is no SDK\n+expandSdkPackages :: [FilePath] -> IO [FilePath]\n+expandSdkPackages dars = do\n+    mbSdkPath <- handleIO (\\_ -> pure Nothing) $ Just <$> getSdkPath\n+    mapM (expand mbSdkPath) dars\n+  where\n+    isSdkPackage fp = takeExtension fp `notElem` [\".dar\", \".dalf\"]\n+    expand mbSdkPath fp\n+      | fp `elem` basePackages = pure fp\n+      | isSdkPackage fp = case mbSdkPath of\n+            Just sdkPath -> pure $ sdkPath </> \"daml-libs\" </> fp <.> \"dar\"\n+            Nothing -> fail $ \"Cannot resolve SDK dependency '\" ++ fp ++ \"'. Use daml assistant.\"\n+      | otherwise = pure fp\n+\n+\n+mkPackageFlag :: UnitId -> PackageFlag\n+mkPackageFlag unitId = ExposePackage \"--package \" (UnitIdArg unitId) (ModRenaming True [])\n+\n+mkBaseUnits :: Maybe String -> [UnitId]\n+mkBaseUnits optMbPackageName\n+  | optMbPackageName == Just \"daml-prim\" =\n+      []\n+  | optMbPackageName == Just damlStdlib =\n+      [ stringToUnitId \"daml-prim\" ]\n+  | otherwise =\n+      [ stringToUnitId \"daml-prim\"\n+      , stringToUnitId damlStdlib ]\n+\n+dependantUnitsFromDamlYaml :: Maybe FilePath -> IO [UnitId]\n+dependantUnitsFromDamlYaml mbRoot = do\n+  let dir = fromMaybe \".\" mbRoot\n+  withCurrentDirectory dir $ do\n+    (deps,dataDeps) <- depsFromDamlYaml (ProjectPath dir)\n+    deps <- expandSdkPackages (filter (`notElem` basePackages) deps)\n+    calcUnitsFromDeps (deps ++ dataDeps)\n+\n+depsFromDamlYaml :: ProjectPath -> IO ([FilePath],[FilePath])\n+depsFromDamlYaml projectPath = do\n+  try (readProjectConfig projectPath) >>= \\case\n+    Left (_::ConfigError) -> return ([],[])\n+    Right project -> return $ projectDeps project\n+\n+projectDeps :: ProjectConfig -> ([FilePath],[FilePath])\n+projectDeps project = do\n+  let deps = fromMaybe [] $ either (error . show) id $ queryProjectConfig [\"dependencies\"] project\n+  let dataDeps = fromMaybe [] $ either (error . show) id $ queryProjectConfig [\"data-dependencies\"] project\n+  (deps,dataDeps)\n+\n+calcUnitsFromDeps :: [FilePath] -> IO [UnitId]\n+calcUnitsFromDeps deps = do\n+  let (fpDars, fpDalfs) = partition ((== \".dar\") . takeExtension) deps\n+  entries <- mapM mainEntryOfDar fpDars\n+  let dalfsFromDars =\n+        [ ( dropExtension $ takeFileName $ ZipArchive.eRelativePath e\n+          , BSL.toStrict $ ZipArchive.fromEntry e)\n+        | e <- entries ]\n+  dalfsFromFps <-\n+    forM fpDalfs $ \\fp -> do\n+      bs <- BS.readFile fp\n+      pure (dropExtension $ takeFileName fp, bs)\n+  let mainDalfs = dalfsFromDars ++ dalfsFromFps\n+  flip mapMaybeM mainDalfs $ \\(name, dalf) -> runMaybeT $ do\n+    (pkgId, _package) <-"
  },
  {
    "id" : "a539ce53-f6f9-434d-83d2-ef8172329bf9",
    "prId" : 4323,
    "comments" : [
      {
        "id" : "3419b748-d0f8-45ca-8d90-9a75155c4770",
        "parentId" : null,
        "author" : null,
        "body" : "Taking these two file paths positionally without newtyping them makes me a bit nervous.",
        "createdAt" : "2020-01-31T12:50:08Z",
        "updatedAt" : "2020-01-31T13:00:13Z",
        "lastEditedBy" : null,
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "e9635266-8ff9-47ef-ad72-d2015eeea70f",
        "parentId" : "3419b748-d0f8-45ca-8d90-9a75155c4770",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "I’ve newtyped the version header.",
        "createdAt" : "2020-01-31T13:00:16Z",
        "updatedAt" : "2020-01-31T13:00:16Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "791a0306-ae2c-4b66-921d-20e00d5e6dd3",
        "parentId" : "3419b748-d0f8-45ca-8d90-9a75155c4770",
        "author" : null,
        "body" : "Thank you :)",
        "createdAt" : "2020-01-31T13:27:43Z",
        "updatedAt" : "2020-01-31T13:27:44Z",
        "lastEditedBy" : null,
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "cee325cb7e1a4040e935574bc792c8e2f45ffb5e",
    "line" : null,
    "diffHunk" : "@@ -205,8 +206,8 @@ wOptsUnset =\n   ]\n \n \n-adjustDynFlags :: Options -> FilePath -> DynFlags -> DynFlags\n-adjustDynFlags options@Options{..} tmpDir dflags\n+adjustDynFlags :: Options -> FilePath -> FilePath -> DynFlags -> DynFlags"
  },
  {
    "id" : "d20138eb-abd9-4a4b-bc08-027ef86897e8",
    "prId" : 4127,
    "comments" : [
      {
        "id" : "3ce4a974-8199-4f84-8b37-55d38eaec2fc",
        "parentId" : null,
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "Is this a user-facing change which needs documenting and/or added to the change log?",
        "createdAt" : "2020-01-21T10:11:19Z",
        "updatedAt" : "2020-01-21T10:19:34Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "6d1a87ba-c6db-4644-b6e7-fe39f31eec8a",
        "parentId" : "3ce4a974-8199-4f84-8b37-55d38eaec2fc",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "No, as mentioned in the comment this is only something used in error messages and we don’t really expect users to use the `-package` flag at all. That said, after thinking about it a bit more I’ve changed it to `--package` which makes more sense since that’s the flag name accepted by `damlc` (`-package-id` is what GHC calls the corresponding flag).",
        "createdAt" : "2020-01-21T10:17:13Z",
        "updatedAt" : "2020-01-21T10:19:34Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "c13751501ee81db96da75a9686afe3c0c5089acc",
    "line" : null,
    "diffHunk" : "@@ -119,8 +119,9 @@ setPackageDbs paths dflags =\n setPackageImports :: Bool -> [(UnitId, ModRenaming)] -> DynFlags -> DynFlags\n setPackageImports hideAllPkgs pkgImports dflags = dflags {\n     packageFlags = packageFlags dflags ++\n-        [ExposePackage (\"-package \" <> unitIdString pkgName) (UnitIdArg pkgName) renaming\n-        -- The first string is only used in error messages.\n+        [ExposePackage (\"-package-id \" <> unitIdString pkgName) (UnitIdArg pkgName) renaming"
  },
  {
    "id" : "f9e78a18-fceb-476b-96dc-6b608129ee4c",
    "prId" : 2891,
    "comments" : [
      {
        "id" : "bc91f414-6ff0-402c-a101-b07816be649f",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "We should have a ticket to not lose track of this.",
        "createdAt" : "2019-09-12T13:31:09Z",
        "updatedAt" : "2019-09-12T14:25:38Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "b572469c-0f15-46e3-bac3-323098f9fd32",
        "parentId" : "bc91f414-6ff0-402c-a101-b07816be649f",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Can we use https://hackage.haskell.org/package/directory-1.3.4.0/docs/System-Directory.html#v:getTemporaryDirectory instead?",
        "createdAt" : "2019-09-12T13:34:15Z",
        "updatedAt" : "2019-09-12T14:25:38Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "4e47f556-7113-417f-a6c8-32f3a5b36b2f",
        "parentId" : "bc91f414-6ff0-402c-a101-b07816be649f",
        "author" : null,
        "body" : "Ah, yeah. I can pass it in from `setupDamlGHC`.",
        "createdAt" : "2019-09-12T13:40:27Z",
        "updatedAt" : "2019-09-12T14:25:38Z",
        "lastEditedBy" : null,
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "40449777-5684-48cd-ac58-c1cd9eaeb298",
        "parentId" : "bc91f414-6ff0-402c-a101-b07816be649f",
        "author" : null,
        "body" : "That makes this much less of a hack. :) ",
        "createdAt" : "2019-09-12T13:42:36Z",
        "updatedAt" : "2019-09-12T14:25:38Z",
        "lastEditedBy" : null,
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "87882f788573b0ac3ab572e295800fc81285d42f",
    "line" : null,
    "diffHunk" : "@@ -253,6 +254,8 @@ adjustDynFlags options@Options{..} dflags\n                 -- pragmas, line numbers may be wrong up when using CPP.\n                 -- Ideally we fix the issue with the daml parser and\n                 -- then remove this flag.\n+            , sTmpDir = if isWindows then \"C:\\\\Windows\\\\Temp\" else \"/tmp\"\n+                -- awful hack ... sometimes this is required by CPP?"
  },
  {
    "id" : "f497bfde-341f-4779-9599-1dbebe1eb027",
    "prId" : 2878,
    "comments" : [
      {
        "id" : "607af287-5290-4a9e-9684-3346898e0ded",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "What is the relationship between this and https://github.com/digital-asset/ghcide/blob/44b11667d8593ae84c48ca88e96f4f227deec096/src/Development/IDE/GHC/Util.hs#L95?",
        "createdAt" : "2019-09-11T11:22:42Z",
        "updatedAt" : "2019-09-11T14:44:31Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "f786b795-2aa1-4ecb-a6cd-44899e93dd48",
        "parentId" : "607af287-5290-4a9e-9684-3346898e0ded",
        "author" : null,
        "body" : "Ah, I didn't see that. Maybe I should try to copy those platform values and see if that is defined enough for CPP. (I don't think it will be, because CPP exposes platform info as `-D` flags.)",
        "createdAt" : "2019-09-11T11:37:57Z",
        "updatedAt" : "2019-09-11T14:44:31Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "bce8087d-eae5-4d68-b113-40fd5fd746f7",
        "parentId" : "607af287-5290-4a9e-9684-3346898e0ded",
        "author" : null,
        "body" : "The `fakeDynFlags` platform settings does not work for `CPP`! It's missing required fields.\r\n\r\nI changed `platformUnregisterised` to `True` to match `fakeDynflags` though. Thanks :-)",
        "createdAt" : "2019-09-11T14:46:12Z",
        "updatedAt" : "2019-09-11T14:46:12Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "4b4ee9add38694378a528445e0e9b48ef1ab7dec",
    "line" : 46,
    "diffHunk" : "@@ -226,14 +227,48 @@ adjustDynFlags options@Options{..} dflags\n   $ apply xopt_set xExtensionsSet\n   $ apply xopt_unset xExtensionsUnset\n   $ apply gopt_set (xFlagsSet options)\n+  $ addPlatformFlags\n+  $ addCppFlags\n   dflags{\n     mainModIs = mkModule primUnitId (mkModuleName \"NotAnExistingName\"), -- avoid DEL-6770\n     debugLevel = 1,\n-    ghcLink = NoLink, hscTarget = HscNothing -- avoid generating .o or .hi files\n+    ghcLink = NoLink, hscTarget = HscNothing, -- avoid generating .o or .hi files\n     {-, dumpFlags = Opt_D_ppr_debug `EnumSet.insert` dumpFlags dflags -- turn on debug output from GHC-}\n+    ghcVersionFile = optGhcVersionFile\n   }\n-  where apply f xs d = foldl' f d xs\n-\n+  where\n+    apply f xs d = foldl' f d xs\n+    alterSettings f d = d { settings = f (settings d) }\n+    addCppFlags = case optCppPath of\n+        Nothing -> id\n+        Just cppPath -> alterSettings $ \\s -> s\n+            { sPgm_P = (cppPath, [])\n+            , sOpt_P = [\"-P\"]\n+                -- We add \"-P\" here to suppress #line pragmas from the\n+                -- preprocessor (hpp, specifically) because the daml\n+                -- parser can't handle them. This is a non-issue right now\n+                -- because ghcversion.h is empty, but if it weren't empty\n+                -- it would result in #line pragmas. By suppressing these\n+                -- pragmas, line numbers may be wrong up when using CPP.\n+                -- Ideally we fix the issue with the daml parser and\n+                -- then remove this flag.\n+            }\n+\n+    -- We need to add platform info in order to run CPP. To prevent\n+    -- .hi file incompatibilities, we set the platform the same way\n+    -- for everyone even if they don't use CPP.\n+    addPlatformFlags = alterSettings $ \\s -> s\n+        { sTargetPlatform = P.Platform"
  },
  {
    "id" : "d91c85bb-5c9d-45d8-a979-919aa3ee0787",
    "prId" : 2871,
    "comments" : [
      {
        "id" : "72d2217e-a83b-49cb-99c7-a038e653da5d",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : ":ghost:",
        "createdAt" : "2019-09-11T08:15:49Z",
        "updatedAt" : "2019-09-11T08:58:14Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "40382b239dcd82ff6195ff55027641feacaa396f",
    "line" : 5,
    "diffHunk" : "@@ -149,7 +149,7 @@ xExtensionsSet =\n   , ConstraintKinds\n     -- type classes\n   , MultiParamTypeClasses, FlexibleContexts, FlexibleInstances, GeneralizedNewtypeDeriving, TypeSynonymInstances\n-  , DefaultSignatures, StandaloneDeriving, FunctionalDependencies, DeriveFunctor\n+  , DefaultSignatures, StandaloneDeriving, FunctionalDependencies, DeriveFunctor, UndecidableSuperClasses"
  }
]