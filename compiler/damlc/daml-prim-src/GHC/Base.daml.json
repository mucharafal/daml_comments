[
  {
    "id" : "c018faeb-9ec4-4bbb-b2fc-e46032661498",
    "prId" : 2203,
    "comments" : [
      {
        "id" : "000b2eff-57c5-4e22-8c91-e485c76bd024",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Isn't something like\r\n\r\n> `map f xs` applies `f` to all elements of `xs` and returns the list of results (in the same order as `xs`).\r\n\r\neasier to understand?",
        "createdAt" : "2019-07-17T14:42:11Z",
        "updatedAt" : "2019-07-17T15:41:35Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "81173d4f-1bcc-48a6-bd04-c00d0d26c3aa",
        "parentId" : "000b2eff-57c5-4e22-8c91-e485c76bd024",
        "author" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "body" : "Much better, thanks!",
        "createdAt" : "2019-07-17T15:39:47Z",
        "updatedAt" : "2019-07-17T15:41:35Z",
        "lastEditedBy" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "2aebf000215a856fb6744cfa41948bb17074da55",
    "line" : null,
    "diffHunk" : "@@ -21,24 +21,35 @@ import GHC.Integer.Type() -- required so Integer optimisation works\n import GHC.Prim\n import GHC.Types\n \n+-- | Used as an alternative in conditions.\n otherwise : Bool\n otherwise = True\n \n+-- | HIDE\n getTag : a -> Int#\n getTag = magic @\"getTag\"\n \n -- This is referenced from error messages generated by ghc.\n+-- | Concatenate two lists.\n (++) : Text -> Text -> Text\n (++) = primitive @\"BEAppendText\"\n infixr 5 ++\n \n+-- | Takes a function from values of type `a` to values of type `b`, "
  },
  {
    "id" : "5a64d3dd-5a29-411c-9a97-0c610af1ca72",
    "prId" : 2203,
    "comments" : [
      {
        "id" : "ac00b577-8dcd-4dc5-85f4-d4f21768707c",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "```suggestion\r\n-- | Append two lists.\r\n```",
        "createdAt" : "2019-07-17T14:42:35Z",
        "updatedAt" : "2019-07-17T15:41:35Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "2aebf000215a856fb6744cfa41948bb17074da55",
    "line" : null,
    "diffHunk" : "@@ -21,24 +21,35 @@ import GHC.Integer.Type() -- required so Integer optimisation works\n import GHC.Prim\n import GHC.Types\n \n+-- | Used as an alternative in conditions.\n otherwise : Bool\n otherwise = True\n \n+-- | HIDE\n getTag : a -> Int#\n getTag = magic @\"getTag\"\n \n -- This is referenced from error messages generated by ghc.\n+-- | Concatenate two lists."
  },
  {
    "id" : "6ce9358d-9a2d-461d-961d-e923352d24db",
    "prId" : 2203,
    "comments" : [
      {
        "id" : "b1b3977b-dea5-4f15-bf69-8cf64dc89b75",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "```suggestion\r\n-- Note that foldr works from right-to-left over the list elements.\r\n```",
        "createdAt" : "2019-07-17T14:43:04Z",
        "updatedAt" : "2019-07-17T15:41:35Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "2aebf000215a856fb6744cfa41948bb17074da55",
    "line" : null,
    "diffHunk" : "@@ -21,24 +21,35 @@ import GHC.Integer.Type() -- required so Integer optimisation works\n import GHC.Prim\n import GHC.Types\n \n+-- | Used as an alternative in conditions.\n otherwise : Bool\n otherwise = True\n \n+-- | HIDE\n getTag : a -> Int#\n getTag = magic @\"getTag\"\n \n -- This is referenced from error messages generated by ghc.\n+-- | Concatenate two lists.\n (++) : Text -> Text -> Text\n (++) = primitive @\"BEAppendText\"\n infixr 5 ++\n \n+-- | Takes a function from values of type `a` to values of type `b`, \n+-- and a list of values of type `a`. Applies the function to all of the\n+-- elements in the list, to get a list of type `b`.\n map : (a -> b) -> [a] -> [b]\n map f = foldr (\\x xs -> f x :: xs) []\n \n+-- | This function is a right fold, which you can use to manipulate lists. \n+-- `foldr f i xs` performs a right fold over the list `xs` using\n+-- the function `f`, using the starting value `i`. \n+-- \n+-- Note that foldr works from right-to-left over the list arguments."
  },
  {
    "id" : "175916f3-cabe-4728-a60b-d9b49318300e",
    "prId" : 2203,
    "comments" : [
      {
        "id" : "4c36fc26-a368-4a05-8d28-a997c085178f",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "```suggestion\r\n-- | Composes two functions, i.e., `(f . g) x = f (g x)`.\r\n```",
        "createdAt" : "2019-07-17T14:43:35Z",
        "updatedAt" : "2019-07-17T15:41:35Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "2aebf000215a856fb6744cfa41948bb17074da55",
    "line" : null,
    "diffHunk" : "@@ -21,24 +21,35 @@ import GHC.Integer.Type() -- required so Integer optimisation works\n import GHC.Prim\n import GHC.Types\n \n+-- | Used as an alternative in conditions.\n otherwise : Bool\n otherwise = True\n \n+-- | HIDE\n getTag : a -> Int#\n getTag = magic @\"getTag\"\n \n -- This is referenced from error messages generated by ghc.\n+-- | Concatenate two lists.\n (++) : Text -> Text -> Text\n (++) = primitive @\"BEAppendText\"\n infixr 5 ++\n \n+-- | Takes a function from values of type `a` to values of type `b`, \n+-- and a list of values of type `a`. Applies the function to all of the\n+-- elements in the list, to get a list of type `b`.\n map : (a -> b) -> [a] -> [b]\n map f = foldr (\\x xs -> f x :: xs) []\n \n+-- | This function is a right fold, which you can use to manipulate lists. \n+-- `foldr f i xs` performs a right fold over the list `xs` using\n+-- the function `f`, using the starting value `i`. \n+-- \n+-- Note that foldr works from right-to-left over the list arguments.\n foldr : (a -> b -> b) -> b -> [a] -> b\n foldr = primitive @\"BEFoldr\"\n \n--- | Function composition.\n+-- | Composes two functions."
  }
]