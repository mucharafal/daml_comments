[
  {
    "id" : "7ceb4e2a-293d-468f-99b9-a08e61b14e7c",
    "prId" : 7815,
    "comments" : [
      {
        "id" : "919254e3-4ef8-4ae7-a550-23ab6121c1dd",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Why do we need all this special casing for default handling? Isn’t not specifying a minimal pragma equivalent to all methods being part of the default pragma and we can just aways reconstruct the pragma?",
        "createdAt" : "2020-10-27T14:50:23Z",
        "updatedAt" : "2020-10-28T09:48:00Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "0b3fe27a-7a4e-44e5-a5bb-267be5b10943",
        "parentId" : "919254e3-4ef8-4ae7-a550-23ab6121c1dd",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "nvm, of course it isn’t equivalent.",
        "createdAt" : "2020-10-27T14:58:47Z",
        "updatedAt" : "2020-10-28T09:48:00Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "ac9ecff2-5183-4f3a-9b38-c5435bd9f391",
        "parentId" : "919254e3-4ef8-4ae7-a550-23ab6121c1dd",
        "author" : {
          "login" : "sofiafaro-da",
          "name" : "Sofia Faro",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/63245722?u=b440e86239cc6cb4a8b4aacdc19fff8f1b61068d&v=4"
        },
        "body" : "A good reason is to avoid encoding the minimal pragmas unless we have to, to keep DAR size down. A certain codebase has a lot of typeclasses...",
        "createdAt" : "2020-10-27T15:04:38Z",
        "updatedAt" : "2020-10-28T09:48:00Z",
        "lastEditedBy" : {
          "login" : "sofiafaro-da",
          "name" : "Sofia Faro",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/63245722?u=b440e86239cc6cb4a8b4aacdc19fff8f1b61068d&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "323977ef2324d231a554726a69744fffb86d151b",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +556,560 @@                    | let names = [ name | BF.Var name <- map unLoc subclauses ]\n                    , length names == length subclauses\n                    -> sort names == methodsWithNoDefault\n                _ -> False\n        minimalType = encodeBooleanFormula minimal"
  },
  {
    "id" : "7377e6b6-29b1-457c-acac-60babc1f1147",
    "prId" : 7765,
    "comments" : [
      {
        "id" : "a30be87c-7c6d-4042-817c-9db1f56fbe9f",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Do we really want to support this?",
        "createdAt" : "2020-10-22T13:18:48Z",
        "updatedAt" : "2020-10-22T13:21:03Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "b669b383-c8f4-4808-a60c-fe0fa89ee867",
        "parentId" : "a30be87c-7c6d-4042-817c-9db1f56fbe9f",
        "author" : {
          "login" : "sofiafaro-da",
          "name" : "Sofia Faro",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/63245722?u=b440e86239cc6cb4a8b4aacdc19fff8f1b61068d&v=4"
        },
        "body" : "As far as damlc is concerned, it's an \"overlap mode\" pragma like any other. In this light, I don't have any problem with it, or any reason to oppose it, compared to any other overlap modes.\r\n\r\nOne okay reason to support it is because instances marked \"INCOHERENT\" always have the lowest priority, so they have a kind of a unique function as an \"ultimate default option\", if you're going to be relying on overlapping instances at all. ",
        "createdAt" : "2020-10-22T14:24:42Z",
        "updatedAt" : "2020-10-22T14:24:42Z",
        "lastEditedBy" : {
          "login" : "sofiafaro-da",
          "name" : "Sofia Faro",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/63245722?u=b440e86239cc6cb4a8b4aacdc19fff8f1b61068d&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "a8d17366-95e6-47bd-a3ee-e20acc97026d",
        "parentId" : "a30be87c-7c6d-4042-817c-9db1f56fbe9f",
        "author" : {
          "login" : "sofiafaro-da",
          "name" : "Sofia Faro",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/63245722?u=b440e86239cc6cb4a8b4aacdc19fff8f1b61068d&v=4"
        },
        "body" : "But I don't feel strongly either way. It is currently less work to support it than to emit a warning.",
        "createdAt" : "2020-10-22T14:35:08Z",
        "updatedAt" : "2020-10-22T14:35:08Z",
        "lastEditedBy" : {
          "login" : "sofiafaro-da",
          "name" : "Sofia Faro",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/63245722?u=b440e86239cc6cb4a8b4aacdc19fff8f1b61068d&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "c340f90b83721e8e33d79aa8f76e91309b67121a",
    "line" : 76,
    "diffHunk" : "@@ -1,1 +765,769 @@                Just (Overlapping _) -> Just \"OVERLAPPING\"\n                Just (Overlaps _) -> Just \"OVERLAPS\"\n                Just (Incoherent _) -> Just \"INCOHERENT\"\n        overlapModeDef =\n            [ defValue name (overlapModeName, TText) (EBuiltin (BEText mode))"
  },
  {
    "id" : "e887c70c-915f-4f37-a1da-c88d87fc839e",
    "prId" : 7765,
    "comments" : [
      {
        "id" : "a38c1baa-8b6c-4d5b-ad63-29100a404487",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "This refactoring reminds me of something I did a few days ago. Is that the change I reverted?",
        "createdAt" : "2020-10-22T13:20:13Z",
        "updatedAt" : "2020-10-22T13:21:03Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "a96077fe-5999-436a-8e23-1683dc72805c",
        "parentId" : "a38c1baa-8b6c-4d5b-ad63-29100a404487",
        "author" : {
          "login" : "sofiafaro-da",
          "name" : "Sofia Faro",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/63245722?u=b440e86239cc6cb4a8b4aacdc19fff8f1b61068d&v=4"
        },
        "body" : "Yes ... I was working off the master that was reverted. This caused some merge conflicts due to the reversion, but actually having typeclass instances as a separate case in `convertBind` (as it is here) is more convenient, so the refactoring ended up sneaking back in. :) ",
        "createdAt" : "2020-10-22T14:16:29Z",
        "updatedAt" : "2020-10-22T14:16:30Z",
        "lastEditedBy" : {
          "login" : "sofiafaro-da",
          "name" : "Sofia Faro",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/63245722?u=b440e86239cc6cb4a8b4aacdc19fff8f1b61068d&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "c340f90b83721e8e33d79aa8f76e91309b67121a",
    "line" : 52,
    "diffHunk" : "@@ -1,1 +741,745 @@    = pure []\n\n    -- Typeclass instance dictionaries\n    | DFunId isNewtype <- idDetails name\n    = withRange (convNameLoc name) $ do"
  },
  {
    "id" : "2db93d0d-8ba0-4a28-9d6f-c76a37bdf003",
    "prId" : 7725,
    "comments" : [
      {
        "id" : "d25f33f4-a23a-430e-ae3e-a309ac33f92c",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Is this really only a problem in combination with typeclasses? I thought erased kinds cause problems everywhere.",
        "createdAt" : "2020-10-19T07:15:20Z",
        "updatedAt" : "2020-10-19T07:29:29Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "c0d0f07f-9ed1-41e6-91b3-e2b7379209c3",
        "parentId" : "d25f33f4-a23a-430e-ae3e-a309ac33f92c",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "You're right, erased kinds are problematic everywhere. With code using promoted kinds does not compile in the first case. Functions using promoted kinds in their signature will have a different signature after importing via data-dependencies. This might become annoying but does not stop a package from being imported. The problem with typeclasses is that you might end up with overlapping instances after kind erasure where there was no overlap before. This will prevent a package from being data-dependable. I still don't understand the full picture and I expect these warnings to extend to more places in the long run.",
        "createdAt" : "2020-10-19T08:13:47Z",
        "updatedAt" : "2020-10-19T08:13:47Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "263edefbe9170285fb42164094fed7944166b805",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +168,172 @@warnNotDataDependable what =\n    warn $ unlines\n        [ \"Using \" ++ what ++ \" in combination with type classes\"\n        , \"does not work properly with data-dependencies. This will stop the\"\n        , \"whole package from being extensible or upgradable using other versions\""
  },
  {
    "id" : "37b345ed-8917-4934-872a-623f81a60d94",
    "prId" : 7698,
    "comments" : [
      {
        "id" : "a5689671-95cf-483a-80de-dc2ea2da605b",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Perhaps worth adding a comment that we don’t care about this.",
        "createdAt" : "2020-10-15T14:02:20Z",
        "updatedAt" : "2020-10-15T14:15:49Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "87abaa3f-7ab8-4ade-a001-013c1a21ba2e",
        "parentId" : "a5689671-95cf-483a-80de-dc2ea2da605b",
        "author" : {
          "login" : "sofiafaro-da",
          "name" : "Sofia Faro",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/63245722?u=b440e86239cc6cb4a8b4aacdc19fff8f1b61068d&v=4"
        },
        "body" : "Good idea, added. :-) ",
        "createdAt" : "2020-10-15T14:15:53Z",
        "updatedAt" : "2020-10-15T14:15:53Z",
        "lastEditedBy" : {
          "login" : "sofiafaro-da",
          "name" : "Sofia Faro",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/63245722?u=b440e86239cc6cb4a8b4aacdc19fff8f1b61068d&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "4479fba4bdac074e6f2798d5cb3c3870ee1a1255",
    "line" : 46,
    "diffHunk" : "@@ -1,1 +531,535 @@        funDepName = ExprValName (\"$fd\" <> getOccText tycon)\n        funDepType = TForalls funDepTyVars (encodeFunDeps funDeps')\n        funDepExpr = EBuiltin BEError `ETyApp` funDepType `ETmApp`\n            EBuiltin (BEText \"undefined\") -- We only care about the type, not the expr.\n        funDepDef = defValue tycon (funDepName, funDepType) funDepExpr"
  },
  {
    "id" : "0cafc462-609d-442e-ad8b-7374158b8c4a",
    "prId" : 7698,
    "comments" : [
      {
        "id" : "020c080a-da0b-4f0e-8f39-b6b3144a092b",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Dictionaries start with `$f`. Can this become a problem? Should we try to find some definitely unoccupied space, like starting with `$$`?",
        "createdAt" : "2020-10-15T14:43:44Z",
        "updatedAt" : "2020-10-15T14:45:32Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "286c0a7a-02b7-4227-b848-fbb36bfcf4c7",
        "parentId" : "020c080a-da0b-4f0e-8f39-b6b3144a092b",
        "author" : {
          "login" : "sofiafaro-da",
          "name" : "Sofia Faro",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/63245722?u=b440e86239cc6cb4a8b4aacdc19fff8f1b61068d&v=4"
        },
        "body" : "Oh, shoot. And the PR merged already... I'll open a new PR to rename this.\r\n\r\nFortunately I don't think a conflict is actually possible with `$fd` because dictionary functions names always start with `$fT` where `T` is the name of the class, and `T` can never start with a lowercase `d`. ",
        "createdAt" : "2020-10-15T14:54:53Z",
        "updatedAt" : "2020-10-15T14:54:54Z",
        "lastEditedBy" : {
          "login" : "sofiafaro-da",
          "name" : "Sofia Faro",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/63245722?u=b440e86239cc6cb4a8b4aacdc19fff8f1b61068d&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "ade6362a-46a3-4a42-a114-01ce9d39d8ae",
        "parentId" : "020c080a-da0b-4f0e-8f39-b6b3144a092b",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Can you write instances like\r\n```haskell\r\ninstance (Functor a, Show a) => Foo (d a) where\r\n```\r\nMaybe I'm just paranoid but I'd prefer to be on the really safe side. 😺 ",
        "createdAt" : "2020-10-15T15:03:22Z",
        "updatedAt" : "2020-10-15T15:03:22Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "5c1087f0-5656-44d4-a1b6-094fc2ed7735",
        "parentId" : "020c080a-da0b-4f0e-8f39-b6b3144a092b",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "And thanks for changing it.",
        "createdAt" : "2020-10-15T15:05:11Z",
        "updatedAt" : "2020-10-15T15:05:11Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "09343a50-4620-4269-8e54-3d2b49e492f5",
        "parentId" : "020c080a-da0b-4f0e-8f39-b6b3144a092b",
        "author" : {
          "login" : "sofiafaro-da",
          "name" : "Sofia Faro",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/63245722?u=b440e86239cc6cb4a8b4aacdc19fff8f1b61068d&v=4"
        },
        "body" : "No, the dictionary function would be `$fFood` in that case.\r\n\r\nHere's the PR: https://github.com/digital-asset/daml/pull/7701",
        "createdAt" : "2020-10-15T15:29:36Z",
        "updatedAt" : "2020-10-15T15:29:36Z",
        "lastEditedBy" : {
          "login" : "sofiafaro-da",
          "name" : "Sofia Faro",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/63245722?u=b440e86239cc6cb4a8b4aacdc19fff8f1b61068d&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "a9de2c3d-7afd-4e1d-92ec-96222d2e3314",
        "parentId" : "020c080a-da0b-4f0e-8f39-b6b3144a092b",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "`$fFood`? That sounds yummy. 😋\r\n\r\nThanks for changing it.",
        "createdAt" : "2020-10-15T16:43:47Z",
        "updatedAt" : "2020-10-15T16:43:47Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "4479fba4bdac074e6f2798d5cb3c3870ee1a1255",
    "line" : 44,
    "diffHunk" : "@@ -1,1 +529,533 @@            -- We use the the type variables as types in the fundep encoding,\n            -- not as whatever kind they were previously defined.\n        funDepName = ExprValName (\"$fd\" <> getOccText tycon)\n        funDepType = TForalls funDepTyVars (encodeFunDeps funDeps')\n        funDepExpr = EBuiltin BEError `ETyApp` funDepType `ETmApp`"
  },
  {
    "id" : "4a60e059-4906-48d6-ac9d-9bc243dff762",
    "prId" : 7252,
    "comments" : [
      {
        "id" : "01e0c003-50dc-473c-b2a6-6a1026323725",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Answering my own question: No we don’t have to worry about backwards compatibility. `data-dependencies` only rely on types not values so they do not care about this.",
        "createdAt" : "2020-08-27T15:35:10Z",
        "updatedAt" : "2020-08-28T11:39:11Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "5cd8cd54f886d4b5d729f46c48c70c22c49f3082",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +887,891 @@    go env (VarIn DA_Action \"unless\") (LType monad : LExpr dict : LExpr x : LExpr y : args)\n        = fmap (, args) $ mkIf <$> convertExpr env x <*> mkPure env monad dict TUnit EUnit <*> convertExpr env y\n    go env submit@(VarIn DA_Internal_LF \"submit\") (LType m : LType cmds : LExpr dict : LType typ : LExpr callstack : LExpr pty : LExpr upd : args) = fmap (, args) $ do\n         m' <- convertType env m\n         typ' <- convertType env typ"
  },
  {
    "id" : "07503233-5340-453c-a7bb-1a9c0b38e8c8",
    "prId" : 6894,
    "comments" : [
      {
        "id" : "d54a0518-8cd4-4068-ae23-4962d5350848",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Is there a technical reason for moving this further down or is it just a stylistic thing? I'm fine either way but would like to understand the former if that's the case.",
        "createdAt" : "2020-07-28T12:06:48Z",
        "updatedAt" : "2020-07-28T13:34:05Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "d41cdafe-3b14-4197-b551-bd46153135c3",
        "parentId" : "d54a0518-8cd4-4068-ae23-4962d5350848",
        "author" : {
          "login" : "sofiafaro-da",
          "name" : "Sofia Faro",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/63245722?u=b440e86239cc6cb4a8b4aacdc19fff8f1b61068d&v=4"
        },
        "body" : "I moved it down below typeclasses and constraint tuples before realizing it doesn't make a difference anyway.",
        "createdAt" : "2020-07-28T12:32:33Z",
        "updatedAt" : "2020-07-28T13:34:05Z",
        "lastEditedBy" : {
          "login" : "sofiafaro-da",
          "name" : "Sofia Faro",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/63245722?u=b440e86239cc6cb4a8b4aacdc19fff8f1b61068d&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "59822d3a-56ba-474a-acd4-8418f1a4c96d",
        "parentId" : "d54a0518-8cd4-4068-ae23-4962d5350848",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Thanks for the explanation.",
        "createdAt" : "2020-07-28T13:20:57Z",
        "updatedAt" : "2020-07-28T13:34:05Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "dd8b14438d3d1adcf5a65aa01490d7b2fe3202d6",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +435,439 @@    -- convert the synonyms we can so that we can expose them via data-dependencies.\n    | isTypeSynonymTyCon t\n    -> convertTypeSynonym env t\n\n    -- Simple record types. This includes newtypes, and"
  },
  {
    "id" : "dbefc421-7f08-402f-a145-79fea94394a0",
    "prId" : 6894,
    "comments" : [
      {
        "id" : "e66a3679-5be8-4227-be49-17d9aae02736",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Aren't we translating empty type classes into empty structural records? Isn't that different from the unit type?",
        "createdAt" : "2020-07-28T12:07:46Z",
        "updatedAt" : "2020-07-28T13:34:05Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "ad23d9c2-cd5b-428d-9e7c-4cd8de813dff",
        "parentId" : "e66a3679-5be8-4227-be49-17d9aae02736",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "LF does not allow for empty structural records.",
        "createdAt" : "2020-07-28T12:14:05Z",
        "updatedAt" : "2020-07-28T13:34:05Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "ba830b49-bd6e-4f43-ac75-6f249728d61a",
        "parentId" : "e66a3679-5be8-4227-be49-17d9aae02736",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "I wonder why we decided to do it like that. I have no recollection... 🤔 ",
        "createdAt" : "2020-07-28T13:20:38Z",
        "updatedAt" : "2020-07-28T13:34:05Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "dd8b14438d3d1adcf5a65aa01490d7b2fe3202d6",
    "line" : 43,
    "diffHunk" : "@@ -1,1 +493,497 @@            TUnit -> pure []\n                -- We avoid converting TUnit type synonyms because it\n                -- clashes with the conversion of empty typeclasses.\n            _ -> pure [ defTypeSyn tsynName tsynParams tsynType ]\n"
  },
  {
    "id" : "16a5b1bb-c562-41f9-9693-1aff8827c6aa",
    "prId" : 6590,
    "comments" : [
      {
        "id" : "b34944a2-9705-4464-ba9f-89f8f23aec2c",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "In your PR description you mention that this will be a major challenge. Could you expand on that? I certainly see how it can be annoying to implement but I don’t see what exactly makes it challenging.",
        "createdAt" : "2020-07-03T07:08:27Z",
        "updatedAt" : "2020-07-03T09:22:38Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "67558fe1-2f95-448f-bd83-8a84883e5728",
        "parentId" : "b34944a2-9705-4464-ba9f-89f8f23aec2c",
        "author" : {
          "login" : "sofiafaro-da",
          "name" : "Sofia Faro",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/63245722?u=b440e86239cc6cb4a8b4aacdc19fff8f1b61068d&v=4"
        },
        "body" : "I slept on it and I think there's an easy way to do it actually -- rewrite it as an `ELet` expression to force the \"record\" argument to be evaluated before the field. Before I thought it would have to branch on each constructor.",
        "createdAt" : "2020-07-03T09:00:18Z",
        "updatedAt" : "2020-07-03T09:22:38Z",
        "lastEditedBy" : {
          "login" : "sofiafaro-da",
          "name" : "Sofia Faro",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/63245722?u=b440e86239cc6cb4a8b4aacdc19fff8f1b61068d&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "e9376d837f80d18b52ddb67f6b5420b992417047",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +770,774 @@                withTmArg env (varV2, record') args $ \\x2 args ->\n                    pure (ERecUpd (fromTCon record') (mkField $ fsToText name) x2 x1, args)\n        -- TODO: Also fix evaluation order for sum-of-record types.\n    -- NOTE(SF): We will need a `setFieldPrim` rule regardless, because\n    -- GeneralizedNewtypeDeriving will skip the typeclass instance."
  },
  {
    "id" : "b1567294-de83-4923-9ea9-e75cf2e61d48",
    "prId" : 4552,
    "comments" : [
      {
        "id" : "230e4f11-1edc-43e9-98b2-cd62b36d91d8",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "There's a bit of code shared between the handling of `>>=` and `>>`. I'll do a slight refactoring in a separate PR if you think that would improve the situation.",
        "createdAt" : "2020-02-17T16:39:00Z",
        "updatedAt" : "2020-02-18T13:22:23Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "e65fd8da34470a622c7f2e0a13f72ab5e3079ff7",
    "line" : 28,
    "diffHunk" : "@@ -1,1 +900,904 @@            EVal semi' <- convertExpr env semi\n            let bind' = EVal semi'{qualObject = mkVal \">>=\"}\n            pure $ mkEApps bind' [TyArg monad', TmArg dict', TyArg t1', TyArg t2', TmArg x', TmArg (ETmLam (mkVar \"_\", t1') y')]\n\n    go env (VarIn GHC_Types \"[]\") (LType (TypeCon (Is \"Char\") []) : args)"
  },
  {
    "id" : "33ad360c-0bf9-46ee-bb1b-4f1f3d3812a1",
    "prId" : 4552,
    "comments" : [
      {
        "id" : "77271ec9-bcf4-4b79-be28-3dbfea745b1e",
        "parentId" : null,
        "author" : null,
        "body" : "Worried about the future possibility that `>>` and `>>=` will move to different modules, and this will be hard to debug. But the tests should catch this at least.",
        "createdAt" : "2020-02-18T10:48:20Z",
        "updatedAt" : "2020-02-18T13:22:23Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "e65fd8da34470a622c7f2e0a13f72ab5e3079ff7",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +899,903 @@          _ -> do\n            EVal semi' <- convertExpr env semi\n            let bind' = EVal semi'{qualObject = mkVal \">>=\"}\n            pure $ mkEApps bind' [TyArg monad', TmArg dict', TyArg t1', TyArg t2', TmArg x', TmArg (ETmLam (mkVar \"_\", t1') y')]\n"
  },
  {
    "id" : "86df6e6a-f2de-4274-8d62-4ebb49fefc3b",
    "prId" : 3973,
    "comments" : [
      {
        "id" : "f757f20e-e224-40db-ac8a-dac38faf68c5",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Do we really need to add `Optional` to that list? It's a list of types defined in `DA.Internal.LF` whereas `Optional` is defined in `DA.Internal.Prelude`.",
        "createdAt" : "2020-01-08T12:49:45Z",
        "updatedAt" : "2020-01-08T12:49:46Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "a8da9463-1f75-4b91-8e8e-f085aecb8553",
        "parentId" : "f757f20e-e224-40db-ac8a-dac38faf68c5",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Good catch, that was leftover from when I tried to move it to `DA.Internal.LF`. Fixed in https://github.com/digital-asset/daml/pull/3981",
        "createdAt" : "2020-01-08T12:54:23Z",
        "updatedAt" : "2020-01-08T12:54:23Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "496f33167705e2653f7b3b2c2b6e8912a9e32853",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +780,784 @@-- deliberately remove 'GHC.Types.Opaque' as well.\ninternalTypes :: UniqSet FastString\ninternalTypes = mkUniqSet [\"Scenario\",\"Update\",\"ContractId\",\"Time\",\"Date\",\"Party\",\"Pair\", \"TextMap\", \"Map\", \"Any\", \"TypeRep\", \"Optional\"]\n\nconsumingTypes :: UniqSet FastString"
  },
  {
    "id" : "f3988719-1e4a-4600-aba4-0a42e89300b1",
    "prId" : 3702,
    "comments" : [
      {
        "id" : "a0354f1d-305f-4f0c-bd52-11a8a490158c",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "It would be nice to document here what we are tracking in those two variables and why we need it.",
        "createdAt" : "2019-12-02T19:43:24Z",
        "updatedAt" : "2019-12-03T08:54:12Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "c58a4a35d1fbcd28a5f6c3f8ca6c66310383f151",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +164,168 @@    ,envTemplateKeyData :: MS.Map TypeConName TemplateKeyData\n    ,envIsGenerated :: Bool\n    ,envTypeVars :: !(MS.Map Var TypeVarName)\n        -- ^ Maps GHC type variables in scope to their LF type variable names\n    ,envTypeVarNames :: !(S.Set TypeVarName)"
  },
  {
    "id" : "5ef0874f-424a-498a-b147-f06c4028bc35",
    "prId" : 3541,
    "comments" : [
      {
        "id" : "f7d25cab-d7f1-4130-b2f1-b8d658b0f2ee",
        "parentId" : null,
        "author" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "body" : "Why is this `TUnit`?",
        "createdAt" : "2019-11-20T08:37:24Z",
        "updatedAt" : "2019-11-20T09:34:16Z",
        "lastEditedBy" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "ea821e22-4b54-4689-a5fb-096881687444",
        "parentId" : "f7d25cab-d7f1-4130-b2f1-b8d658b0f2ee",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Because we translate `TAny` to `TUnit` for DAML-LF versions that don’t support `Any` and this now uses `Any` directly.",
        "createdAt" : "2019-11-20T08:42:59Z",
        "updatedAt" : "2019-11-20T09:34:16Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "0dcc9a77-17a9-45d0-a659-f5adabd9ba2b",
        "parentId" : "f7d25cab-d7f1-4130-b2f1-b8d658b0f2ee",
        "author" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "body" : "Ah, got it. Thanks for explaining!",
        "createdAt" : "2019-11-20T08:54:26Z",
        "updatedAt" : "2019-11-20T09:34:16Z",
        "lastEditedBy" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "e4d320e108de235fc3db045fb1ce33afd8c40cba",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +380,384 @@                                            (ETmLam (mkVar \"key\", keyType) $ EToAny keyType $ EVar $ mkVar \"key\"))\n                                  else EBuiltin BEError `ETyApp`\n                                       TForall (mkTypeVar \"proxy\", KArrow KStar KStar) (TApp (TVar $ mkTypeVar \"proxy\") polyType :-> keyType :-> TUnit) `ETmApp`\n                                       EBuiltin (BEText \"toAnyContractKey is not supported in this DAML-LF version\")\n                        let fromAnyContractKey ="
  },
  {
    "id" : "0abff31e-b85d-4ec7-afbd-b1a525ed3df3",
    "prId" : 3477,
    "comments" : [
      {
        "id" : "cb7249ef-156b-4ebe-9ec4-b08e447cdf9d",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Good catch, thanks!",
        "createdAt" : "2019-11-15T09:36:45Z",
        "updatedAt" : "2019-11-19T22:40:52Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "df46a0c0ece38f03f22149c7964ffc4d607dc43b",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +383,387 @@                                  else EBuiltin BEError `ETyApp`\n                                       TForall (mkTypeVar \"proxy\", KArrow KStar KStar) (TApp (TVar $ mkTypeVar \"proxy\") polyType :-> keyType :-> typeConAppToType anyContractKeyTy) `ETmApp`\n                                       EBuiltin (BEText \"toAnyContractKey is not supported in this DAML-LF version\")\n                        let fromAnyContractKey =\n                                if envLfVersion env `supports` featureAnyType"
  },
  {
    "id" : "e3859f48-3dec-423f-8b45-707d40c6cbaa",
    "prId" : 3477,
    "comments" : [
      {
        "id" : "4b496ebb-7a72-4a62-8618-a457d5cf0698",
        "parentId" : null,
        "author" : {
          "login" : "robin-da",
          "name" : "Robin Krom",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/14074936?u=1b47fdbdfd82ea534219fc1b94d646873c56a7d7&v=4"
        },
        "body" : "This is just a let binding, right?",
        "createdAt" : "2019-11-19T12:15:53Z",
        "updatedAt" : "2019-11-19T22:40:52Z",
        "lastEditedBy" : {
          "login" : "robin-da",
          "name" : "Robin Krom",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/14074936?u=1b47fdbdfd82ea534219fc1b94d646873c56a7d7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "29ca1eb7-0745-4e51-81d2-a7a2fc7aae4e",
        "parentId" : "4b496ebb-7a72-4a62-8618-a457d5cf0698",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "yes",
        "createdAt" : "2019-11-19T16:07:56Z",
        "updatedAt" : "2019-11-19T22:40:52Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "df46a0c0ece38f03f22149c7964ffc4d607dc43b",
    "line" : 33,
    "diffHunk" : "@@ -1,1 +1663,1667 @@    | [pkgId, modStr, templName, choiceName, method] <- splitOn \":\" primId\n    , Just LF.Template {tplTypeCon,tplChoices} <- lookup pkgId modStr templName\n    , choice <- ChoiceName (T.pack choiceName)\n    , Just TemplateChoice {chcSelfBinder,chcArgBinder} <- NM.lookup choice tplChoices = do\n        let pkgRef = PRImport $ PackageId $ T.pack pkgId"
  },
  {
    "id" : "c14a3462-cc24-41e1-a6bf-1ca36857b6a6",
    "prId" : 3477,
    "comments" : [
      {
        "id" : "28641785-c2d5-4ed8-94db-f1f40731b151",
        "parentId" : null,
        "author" : {
          "login" : "robin-da",
          "name" : "Robin Krom",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/14074936?u=1b47fdbdfd82ea534219fc1b94d646873c56a7d7&v=4"
        },
        "body" : "Can  we not add the implementation already for the lf versions that support `Any`?",
        "createdAt" : "2019-11-19T12:17:09Z",
        "updatedAt" : "2019-11-19T22:40:52Z",
        "lastEditedBy" : {
          "login" : "robin-da",
          "name" : "Robin Krom",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/14074936?u=1b47fdbdfd82ea534219fc1b94d646873c56a7d7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "4784c248-5e2b-4379-ad57-12bea818afe3",
        "parentId" : "28641785-c2d5-4ed8-94db-f1f40731b151",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "As discussed, let's leave this to a following PR",
        "createdAt" : "2019-11-19T16:18:05Z",
        "updatedAt" : "2019-11-19T22:40:52Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "df46a0c0ece38f03f22149c7964ffc4d607dc43b",
    "line" : 46,
    "diffHunk" : "@@ -1,1 +1676,1680 @@                EUpdate $ UExercise (qualify tplTypeCon) choice (EVar chcSelfBinder) Nothing (EVar choiceArg)\n          \"_toAnyChoice\" ->\n            -- TODO: envLfVersion env `supports` featureAnyType\n            EBuiltin BEError `ETyApp` lfType `ETmApp`\n            EBuiltin (BEText \"toAnyChoice is not supported in this DAML-LF version\")"
  },
  {
    "id" : "09c8b56b-5b0d-478e-91d0-b61a1d591900",
    "prId" : 3477,
    "comments" : [
      {
        "id" : "0ff3465b-99de-4302-a095-928c88bbc7eb",
        "parentId" : null,
        "author" : {
          "login" : "robin-da",
          "name" : "Robin Krom",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/14074936?u=1b47fdbdfd82ea534219fc1b94d646873c56a7d7&v=4"
        },
        "body" : "Thanks for these!",
        "createdAt" : "2019-11-19T12:18:21Z",
        "updatedAt" : "2019-11-19T22:40:52Z",
        "lastEditedBy" : {
          "login" : "robin-da",
          "name" : "Robin Krom",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/14074936?u=1b47fdbdfd82ea534219fc1b94d646873c56a7d7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "ec4d1e38-1110-4953-a9a5-0afac31ffe28",
        "parentId" : "0ff3465b-99de-4302-a095-928c88bbc7eb",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "you're welcome!",
        "createdAt" : "2019-11-19T16:08:10Z",
        "updatedAt" : "2019-11-19T22:40:52Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "df46a0c0ece38f03f22149c7964ffc4d607dc43b",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +393,397 @@                                  else EBuiltin BEError `ETyApp`\n                                       TForall (mkTypeVar \"proxy\", KArrow KStar KStar) (TApp (TVar $ mkTypeVar \"proxy\") polyType :-> typeConAppToType anyContractKeyTy :-> TOptional keyType) `ETmApp`\n                                       EBuiltin (BEText \"fromAnyContractKey is not supported in this DAML-LF version\")\n                        pure (Just $ TemplateKey keyType (applyThis key) (ETmApp maintainers hasKey), [hasKey, key, maintainers, fetchByKey, lookupByKey, toAnyContractKey, fromAnyContractKey], choices)\n                choices -> pure (Nothing, [], choices)"
  },
  {
    "id" : "4e283457-22f7-4c44-9fa7-41126a5b83b7",
    "prId" : 3434,
    "comments" : [
      {
        "id" : "fc0e5b3d-38ef-4cf6-83a2-0622e19fd17e",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Good catch!",
        "createdAt" : "2019-11-12T18:59:55Z",
        "updatedAt" : "2019-11-12T19:01:24Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "52581640eac42333bda95c3963414d7e418fa7e3",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +965,969 @@            TScenario{} -> asLet\n            TAny{} -> asLet\n            tcon | isSimpleRecordCon con -> do\n                fields <- convertRecordFields env con id\n                case zipExactMay vs fields of"
  },
  {
    "id" : "00942445-adc0-4491-8846-d4f268974448",
    "prId" : 3434,
    "comments" : [
      {
        "id" : "0ff5777a-d085-49da-9237-584854f28bfb",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "![sad panda](https://i.kym-cdn.com/photos/images/newsfeed/000/092/706/Sad_Panda_Chibi_by_mongrelssister.png)\r\n\r\nPanda wants existentials :wink: ",
        "createdAt" : "2019-11-13T07:50:27Z",
        "updatedAt" : "2019-11-13T07:50:38Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "bebd52c2-2a80-4250-9e6a-e1a80b6c9935",
        "parentId" : "0ff5777a-d085-49da-9237-584854f28bfb",
        "author" : null,
        "body" : "hahahaha :-)",
        "createdAt" : "2019-11-13T10:07:00Z",
        "updatedAt" : "2019-11-13T10:07:00Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "52581640eac42333bda95c3963414d7e418fa7e3",
    "line" : 80,
    "diffHunk" : "@@ -1,1 +1190,1194 @@        SimpleVariantCon -> do\n            when (length vs /= dataConRepArity con) $\n                unsupported \"Pattern match with existential type\" alt\n            when (length vs >= 2) $\n                unsupported \"Data constructor with multiple unnamed fields\" alt"
  },
  {
    "id" : "32c23a6f-f8ae-49fc-adac-286cb49d5aec",
    "prId" : 3358,
    "comments" : [
      {
        "id" : "6f3d4b01-f897-4b1b-bdf2-e1092637d465",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Why do we try to cram all information into a single string that we then have to deconstruct? It seems easier to just give `external` multiple parameters.",
        "createdAt" : "2019-11-06T14:17:02Z",
        "updatedAt" : "2019-11-06T17:52:03Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "69de872a-e446-4cf2-a52b-83fbf063ed55",
        "parentId" : "6f3d4b01-f897-4b1b-bdf2-e1092637d465",
        "author" : {
          "login" : "robin-da",
          "name" : "Robin Krom",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/14074936?u=1b47fdbdfd82ea534219fc1b94d646873c56a7d7&v=4"
        },
        "body" : "I think the parameter number will be different for Choice instances and I wouldn't want to have a second primitive for those. If not, I'm happy to have a `external @pkg @mod @templ @method` primitive.",
        "createdAt" : "2019-11-06T17:51:01Z",
        "updatedAt" : "2019-11-06T17:52:03Z",
        "lastEditedBy" : {
          "login" : "robin-da",
          "name" : "Robin Krom",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/14074936?u=1b47fdbdfd82ea534219fc1b94d646873c56a7d7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "e923192d-f886-4112-81f6-224d2193aa7b",
        "parentId" : "6f3d4b01-f897-4b1b-bdf2-e1092637d465",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "we should be able to match on the number of parameters that `external` is applied to. That said, it doesn’t seem that unreasonable to have two primitives.",
        "createdAt" : "2019-11-06T17:52:48Z",
        "updatedAt" : "2019-11-06T17:52:48Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "4b0aeb99ed4d3a42210e8653d7873d2ba828d51d",
    "line" : 89,
    "diffHunk" : "@@ -1,1 +1547,1551 @@convertExternal :: Env -> LF.PackageRef -> String -> LF.Type -> LF.Expr\nconvertExternal env stdlibRef primId lfType\n    | [pkgId, modStr, templName, method] <- splitOn \":\" primId\n    , Just LF.Template {..} <- lookup pkgId modStr templName =\n        let pkgRef = PRImport $ PackageId $ T.pack pkgId"
  },
  {
    "id" : "a638b9d3-b94e-4910-a539-25736844122b",
    "prId" : 3358,
    "comments" : [
      {
        "id" : "1c3d9275-9a11-4a1b-937a-7282abfc5dbe",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "This code is somewhat sketchy. I can give you a DALF where `archive` does something completely different and you will happily generate a `Template` instance using this choice as the `archive` implementation. I don’t have a great solution here apart from verifying that this choice is actually the archive choice that we expect. Another hint that archive should really be a primitive.",
        "createdAt" : "2019-11-06T14:24:35Z",
        "updatedAt" : "2019-11-06T17:52:03Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "c1a56245-c74a-4567-94cc-e8430833179c",
        "parentId" : "1c3d9275-9a11-4a1b-937a-7282abfc5dbe",
        "author" : {
          "login" : "robin-da",
          "name" : "Robin Krom",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/14074936?u=1b47fdbdfd82ea534219fc1b94d646873c56a7d7&v=4"
        },
        "body" : "I think that would actually be fine. We would archive the template in the way the signatories agreed to upfront. But I wouldn't mind if it would be a primitive either so that a weird `archive` can't happen.",
        "createdAt" : "2019-11-06T16:21:54Z",
        "updatedAt" : "2019-11-06T17:52:03Z",
        "lastEditedBy" : {
          "login" : "robin-da",
          "name" : "Robin Krom",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/14074936?u=1b47fdbdfd82ea534219fc1b94d646873c56a7d7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "568deb13-547f-4ef8-a8c4-87dadbc2e825",
        "parentId" : "1c3d9275-9a11-4a1b-937a-7282abfc5dbe",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "It’s fine in the sense that you can’t do anything people haven’t agreed to before but it means that `archive` is now no longer guaranteed to archive a template, e.g., I could give you a nonconsuming choice that doesn’t archive anything.",
        "createdAt" : "2019-11-06T16:23:37Z",
        "updatedAt" : "2019-11-06T17:52:03Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "4b0aeb99ed4d3a42210e8653d7873d2ba828d51d",
    "line" : 134,
    "diffHunk" : "@@ -1,1 +1592,1596 @@                                     \"convertExternal: archive is not implemented in external package\")\n                            Just TemplateChoice {..} ->\n                                case chcArgBinder of\n                                    (_, LF.TCon tcon) ->\n                                        let coid = mkVar \"$coid\""
  },
  {
    "id" : "fb20443b-c66b-403e-8a09-7577b67dff11",
    "prId" : 3085,
    "comments" : [
      {
        "id" : "7f8a4df2-e8bb-49e9-81f3-2e0d92908500",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Only catching this during LF conversion seems slightly ugly but admittedly I don’t know how to catch it earlier :disappointed: ",
        "createdAt" : "2019-10-02T13:21:30Z",
        "updatedAt" : "2019-10-02T13:29:09Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "f9631283dd43576f6c41d5712f5867927ac1fabc",
    "line" : 45,
    "diffHunk" : "@@ -1,1 +659,663 @@        = fmap (, args) $ convertRationalNumericMono env n top bot\n    go env (VarIs \"fromRational\") (LType scaleTyCoRep : LExpr (VarIs \":%\" `App` tyInteger `App` Lit (LitNumber _ top _) `App` Lit (LitNumber _ bot _)) : args)\n        = unsupported \"Polymorphic numeric literal. Specify a fixed scale by giving the type, e.g. (1.2345 : Numeric 10)\" ()\n    go env (VarIs \"negate\") (tyInt : LExpr (VarIs \"$fAdditiveInt\") : LExpr (untick -> VarIs \"fromInteger\" `App` Lit (LitNumber _ x _)) : args)\n        = fmap (, args) $ convertInt64 (negate x)"
  },
  {
    "id" : "e468e128-4673-4e15-b325-28f328f79d96",
    "prId" : 2950,
    "comments" : [
      {
        "id" : "a790ea34-56a1-444f-bc34-27b21d09402e",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "There's no need for a multiway if here. ;)",
        "createdAt" : "2019-09-23T16:24:10Z",
        "updatedAt" : "2019-09-24T14:18:02Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "bae243c1ecdc420b8ddb5e91675a9a0deec24993",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +242,246 @@convertRationalNumericMono :: Env -> Integer -> Integer -> Integer -> ConvertM LF.Expr\nconvertRationalNumericMono env scale num denom =\n    if  | scale < 0 || scale > 37 ->\n            unsupported\n                (\"Tried to construct value of type Numeric \" ++ show scale ++ \", but scale is out of bounds. Scale must be between 0 through 37, not \" ++ show scale ++ \".\")"
  },
  {
    "id" : "979612cd-30f6-4706-b4b2-ca0336df362a",
    "prId" : 2950,
    "comments" : [
      {
        "id" : "0af78c94-5bc4-48bf-8029-90e9b8553ac6",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "```suggestion\r\n    go env (VarIs \"fromRational\") (LType scaleTyCoRep : LExpr (VarIs \":%\" `App` tyInteger `App` Lit (LitNumber _ top _) `App` Lit (LitNumber _ bot _)) : args)\r\n        | Just n <- isNumLitTy scaleTyCoRep\r\n        = fmap (, args) $ convertRationalNumericMono env n top bot\r\n        | otherwise\r\n```\r\nand remove the case above. This will avoid some repetition.",
        "createdAt" : "2019-09-23T16:31:22Z",
        "updatedAt" : "2019-09-24T14:18:02Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "bae243c1ecdc420b8ddb5e91675a9a0deec24993",
    "line" : 97,
    "diffHunk" : "@@ -1,1 +688,692 @@    go env (VarIs \"fromRational\") (LType (isNumLitTy -> Just n) : LExpr (VarIs \":%\" `App` tyInteger `App` Lit (LitNumber _ top _) `App` Lit (LitNumber _ bot _)) : args)\n        = fmap (, args) $ convertRationalNumericMono env n top bot\n    go env (VarIs \"fromRational\") (LType scaleTyCoRep : LExpr (VarIs \":%\" `App` tyInteger `App` Lit (LitNumber _ top _) `App` Lit (LitNumber _ bot _)) : args)\n        = do\n            scaleType <- convertType env scaleTyCoRep"
  },
  {
    "id" : "01955f67-a629-4121-bb7e-a1373c52fa11",
    "prId" : 2779,
    "comments" : [
      {
        "id" : "149fcd21-0a89-417d-892d-44f430919c7a",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Not really new in this PR and might be consistent with other parts of this module but for me shadowing the GHC identifiers with the converted DAML-LF identifiers makes things harder to understand. I would prefer something like `polyTypeLf <- convertType env polyType`. Since they have different types anyway the main advantage of shadowing namely that you can’t accidentally refer to the old identifier does not apply.",
        "createdAt" : "2019-09-05T16:58:00Z",
        "updatedAt" : "2019-09-10T11:14:25Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "8e39c590-531a-4504-890f-1c6025fe2780",
        "parentId" : "149fcd21-0a89-417d-892d-44f430919c7a",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "I'll change this and a few other thing you mentioned in a cleanup PR. There's more stuff around there that needs some cleaning.",
        "createdAt" : "2019-09-05T19:47:19Z",
        "updatedAt" : "2019-09-10T11:14:25Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "1ad2528d6a9763bf396a1c03fb414d73fa20ebee",
    "line" : 56,
    "diffHunk" : "@@ -1,1 +292,296 @@    = do\n        let tplLocation = convNameLoc monoTyCon\n        Ctors{_cCtors = [Ctor _ fields _]} <- toCtors env polyTyCon\n        polyType@(TConApp polyTyCon polyTyArgs) <- convertType env polyType\n        let polyTCA = TypeConApp polyTyCon polyTyArgs"
  },
  {
    "id" : "d96d31a4-ef85-4af2-b8b5-1110a3da97de",
    "prId" : 2779,
    "comments" : [
      {
        "id" : "7bac7147-661d-4138-9ccf-df4be3ba5c9c",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "```suggestion\r\n        let coerceRecord fromType toType fromExpr =\r\n```\r\n`rec` is too overloaded (recursive, record, I’m sure you can come up with other things) especially since you use it in a binding here.",
        "createdAt" : "2019-09-05T16:58:52Z",
        "updatedAt" : "2019-09-10T11:14:25Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "1ad2528d6a9763bf396a1c03fb414d73fa20ebee",
    "line" : 64,
    "diffHunk" : "@@ -1,1 +297,301 @@        monoType@(TCon monoTyCon) <- convertTyCon env monoTyCon\n        let monoTCA = TypeConApp monoTyCon []\n        let coerceRec fromType toType fromExpr =\n                ELet (Binding (rec, typeConAppToType fromType) fromExpr) $\n                ERecCon toType $ map (\\field -> (field, ERecProj fromType field (EVar rec))) fields"
  },
  {
    "id" : "7931c03f-9e3b-4732-a00a-b2c9cdd12166",
    "prId" : 2779,
    "comments" : [
      {
        "id" : "ae16d88e-9372-4441-accf-fa9ff7c9fea3",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "This does look like it will make conversion more expensive both in runtime costs and codesize costs. Not necessarily an issue but worth keeping in mind.",
        "createdAt" : "2019-09-05T16:59:48Z",
        "updatedAt" : "2019-09-10T11:14:25Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "42ff6b94-b020-44d6-bf18-8a043dd94fa3",
        "parentId" : "ae16d88e-9372-4441-accf-fa9ff7c9fea3",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "One way to make codesize smaller would be to factor this out into top-level functions so you don’t have to inline it into every choice.",
        "createdAt" : "2019-09-05T17:37:52Z",
        "updatedAt" : "2019-09-10T11:14:25Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "07b67079-6bc7-46cf-8376-0983e2c4fcb6",
        "parentId" : "ae16d88e-9372-4441-accf-fa9ff7c9fea3",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "That's a good idea. I'll do that in a separate PR.",
        "createdAt" : "2019-09-05T19:48:11Z",
        "updatedAt" : "2019-09-10T11:14:25Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "1ad2528d6a9763bf396a1c03fb414d73fa20ebee",
    "line" : 71,
    "diffHunk" : "@@ -1,1 +303,307 @@                | null polyTyArgs = (id, id, id, id)\n                | otherwise =\n                    ( coerceRec monoTCA polyTCA\n                    , coerceRec polyTCA monoTCA\n                    , ETmApp $ mkETyApps (EBuiltin BECoerceContractId) [monoType, polyType]"
  },
  {
    "id" : "190e2fd6-0a67-455a-bfc3-7ce0f6334f8c",
    "prId" : 2779,
    "comments" : [
      {
        "id" : "b070747a-c4d9-4d9d-87a5-322bc5497565",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Do we really have no better way to detect this than to search for an `Instance` suffix? That seems quite easy to fool.",
        "createdAt" : "2019-09-05T17:00:37Z",
        "updatedAt" : "2019-09-10T11:14:25Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "015ccb92-de21-4daf-b798-c5399826621e",
        "parentId" : "b070747a-c4d9-4d9d-87a5-322bc5497565",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Right now, I can't thing of any better. My plan is to change the class name from `FooInstance` to `Foo:Instance` or something similar that cannot be written by the user since it doesn't match the lexical rules.",
        "createdAt" : "2019-09-05T19:49:23Z",
        "updatedAt" : "2019-09-10T11:14:25Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "1ad2528d6a9763bf396a1c03fb414d73fa20ebee",
    "line" : 105,
    "diffHunk" : "@@ -1,1 +427,431 @@    | isNewTyCon t\n    , ([], TypeCon tpl args) <- newTyConRhs t\n    , any (\\(c, args') -> getOccFS c == getOccFS tpl <> \"Instance\" && eqTypes args args') $ envInstances env\n    = do\n        ctors0 <- toCtors env tpl"
  },
  {
    "id" : "2ccf5972-1a50-4d8c-81e2-e389d81171d5",
    "prId" : 2730,
    "comments" : [
      {
        "id" : "593f0861-eaab-479f-9631-b9d839656b66",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "I liked the way this was factored out into a separate function before.",
        "createdAt" : "2019-09-03T06:49:14Z",
        "updatedAt" : "2019-09-03T06:51:10Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "4d1604d740ba4147cc7704c264ca375e2a788165",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +250,254 @@              NonRec name body\n                -- NOTE(MH): We can't cope with the generated Typeable stuff, so remove those bindings\n                | any (`T.isPrefixOf` getOccText name) [\"$krep\", \"$tc\", \"$trModule\"] -> []\n                | otherwise -> [(name, body)]\n              Rec binds -> binds"
  },
  {
    "id" : "d41cf2a9-10c2-4fc3-89ef-c83ed74fa850",
    "prId" : 2475,
    "comments" : [
      {
        "id" : "38a6375f-af2f-41d4-a168-40bc6bcb8ab5",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "@cocreature Unfortunately, comparing with `tupleDataCon Boxed 1` fails although that is exactly what we're looking for. Somehow the uniques don't match. Do you have an _immediate_ idea what could be going wrong?",
        "createdAt" : "2019-08-09T09:45:05Z",
        "updatedAt" : "2019-08-12T08:50:30Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "12f42e64-eba2-49e5-8904-e35b7868d57b",
        "parentId" : "38a6375f-af2f-41d4-a168-40bc6bcb8ab5",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "@hurryabit Which part exactly is the one that ends up getting a different unique?",
        "createdAt" : "2019-08-09T09:47:29Z",
        "updatedAt" : "2019-08-12T08:50:30Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "e5906768-53c8-47c6-a90e-2d8e432b1ae1",
        "parentId" : "38a6375f-af2f-41d4-a168-40bc6bcb8ab5",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "@cocreature The unique of `con` is different from the unique of `tupleDataCon Boxed 1` even when `con` matches the filter in line 1211. Does that answer your question?",
        "createdAt" : "2019-08-09T10:00:32Z",
        "updatedAt" : "2019-08-12T08:50:30Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "77d28314-f9c2-4cd7-b481-f849fcaf54c9",
        "parentId" : "38a6375f-af2f-41d4-a168-40bc6bcb8ab5",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Not sure what is going wrong here. Looking at the code, it seems like the unique in `tupleDataCon Boxed 1` should always be fixed so I guess the one in `con` is the one that varies? No idea why :confused: ",
        "createdAt" : "2019-08-09T10:47:50Z",
        "updatedAt" : "2019-08-12T08:50:30Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "7623b54ec5f1094aed76e39eb7b121105c038996",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +1209,1213 @@      -- If we omit this workaround, `GHC.Tuple.Unit` gets translated into a\n      -- variant rather than a record and the `SugarUnit` test will fail.\n      || (getOccFS con == \"Unit\" && nameModule (getName con) == gHC_TUPLE)\n    = map (mkField . T.cons '_' . T.pack . show) [1..dataConSourceArity con]\n    | flv == NewtypeFlavour && null lbls"
  },
  {
    "id" : "ba0965f8-9b55-4882-935d-fdfd64717ce8",
    "prId" : 2466,
    "comments" : [
      {
        "id" : "19a4d85f-c792-4b8d-b1b2-63702b35d717",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Maybe worth pulling `\\x -> mkVal $ \"$W\" <> x` into a top-level function? Having the assumptions about how GHC calls certain functions factored out into a few top-level functions seems much nicer than having this littered through the code.",
        "createdAt" : "2019-08-08T18:27:44Z",
        "updatedAt" : "2019-08-08T18:30:39Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "26e67ab8-ec21-477b-b0ae-da12a269c403",
        "parentId" : "19a4d85f-c792-4b8d-b1b2-63702b35d717",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Good point. I'll do it in a cleanup PR.",
        "createdAt" : "2019-08-08T18:35:29Z",
        "updatedAt" : "2019-08-08T18:35:29Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "8ed4ea23a1498fbba4293b55a70c352da3a1a045",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +413,417 @@  | isRecordCtor o\n  = pure $ [defDataType tconName tys $ DataRecord flds] ++\n      [ defValue name (mkVal $ \"$W\" <> getOccText ctor, mkTForalls tys $ mkTFuns fldTys (typeConAppToType tcon)) expr\n      | flavour == NewtypeFlavour\n      ]"
  },
  {
    "id" : "89ef1494-e01a-42b7-8007-7a393d0cc505",
    "prId" : 2249,
    "comments" : [
      {
        "id" : "d848cea3-ccbc-43ee-a296-e0a4e78a06de",
        "parentId" : null,
        "author" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "body" : "Now `_createX` etc",
        "createdAt" : "2019-07-22T16:22:29Z",
        "updatedAt" : "2019-07-22T16:43:15Z",
        "lastEditedBy" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "0f35d92cf0b18616e2341e0b92ac7330dd26a60b",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +609,613 @@    = pure []\n    -- NOTE(MH): Desugaring `template X` will result in a type class\n    -- `XInstance` which has methods `createX`, `fetchX` and `exerciseXY`\n    -- (among others). The implementations of these methods are replaced\n    -- with DAML-LF primitives in `convertGenericChoice` below. As part of"
  }
]