[
  {
    "id" : "7cd049df-f12d-4b56-8d2f-3931705fc111",
    "prId" : 4030,
    "comments" : [
      {
        "id" : "3dad495a-4b3a-407a-95b9-7c2b2a88fe7f",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "This comment seems outdated given that we have CPP now. The reason why we still need this is that template desugaring does not depend on the LF version.",
        "createdAt" : "2020-01-13T16:14:07Z",
        "updatedAt" : "2020-01-15T14:32:49Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "e4b54642-b09e-46d5-8ada-b866b1c5785c",
        "parentId" : "3dad495a-4b3a-407a-95b9-7c2b2a88fe7f",
        "author" : null,
        "body" : "Updated!",
        "createdAt" : "2020-01-13T17:58:56Z",
        "updatedAt" : "2020-01-15T14:32:49Z",
        "lastEditedBy" : null,
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "3a6d332937a2569a52ae38499c6fe1022c9fe04c",
    "line" : null,
    "diffHunk" : "@@ -254,13 +254,82 @@ convertPrim _ \"BETextReplicate\" (TInt64 :-> TText :-> TText) = EBuiltin BETextRe\n convertPrim _ \"BETextSplitOn\" (TText :-> TText :-> TList TText) = EBuiltin BETextSplitOn\n convertPrim _ \"BETextIntercalate\" (TText :-> TList TText :-> TText) = EBuiltin BETextIntercalate\n \n+-- Template Desugaring.\n+\n+convertPrim _ \"UCreate\" (TCon template :-> TUpdate (TContractId (TCon template')))\n+    | template == template' =\n+    -- TODO: restrict to known templates\n+    ETmLam (mkVar \"this\", TCon template) $\n+    EUpdate $ UCreate template (EVar (mkVar \"this\"))\n+\n+convertPrim _ \"UFetch\" (TContractId (TCon template) :-> TUpdate (TCon template'))\n+    | template == template' =\n+    -- TODO: restrict to known templates\n+    ETmLam (mkVar \"this\", TContractId (TCon template)) $\n+    EUpdate $ UFetch template (EVar (mkVar \"this\"))\n+\n+convertPrim _ \"UExercise\"\n+    (TContractId (TCon template) :-> TCon choice :-> TUpdate _returnTy) =\n+    -- TODO: restrict template, choice, returnTy to known triples\n+    ETmLam (mkVar \"this\", TContractId (TCon template)) $\n+    ETmLam (mkVar \"arg\", TCon choice) $\n+    EUpdate $ UExercise template choiceName (EVar (mkVar \"this\")) Nothing (EVar (mkVar \"arg\"))\n+  where\n+    choiceName = ChoiceName (T.intercalate \".\" $ unTypeConName $ qualObject choice)\n+\n+convertPrim _ \"ULookupByKey\" (key :-> TUpdate (TOptional (TContractId (TCon template)))) =\n+    -- TODO: restrict template and key to known template/key pairs\n+    ETmLam (mkVar \"key\", key) $ EUpdate $\n+        ULookupByKey $ RetrieveByKey template (EVar $ mkVar \"key\")\n+\n+convertPrim _ \"UFetchByKey\"\n+    (key :-> TUpdate ty@(TApp (TApp (TCon tuple) ty1@(TContractId (TCon template))) ty2))\n+    | ty2 == TCon template =\n+    -- TODO: restrict template and key to known template/key types\n+    ETmLam (mkVar \"key\", key) $\n+    EUpdate $ UBind\n+        (Binding (mkVar \"res\", TStruct\n+            [ (FieldName \"contractId\", ty1)\n+            , (FieldName \"contract\", ty2)])\n+            (EUpdate $ UFetchByKey (RetrieveByKey template (EVar $ mkVar \"key\"))))\n+        (EUpdate $ UPure ty $ ERecCon (TypeConApp tuple [ty1, ty2])\n+            [ (mkIndexedField 1, EStructProj (FieldName \"contractId\") (EVar (mkVar \"res\")))\n+            , (mkIndexedField 2, EStructProj (FieldName \"contract\") (EVar (mkVar \"res\")))\n+            ])\n+\n+convertPrim version \"EFromAnyTemplate\"\n+    ty@(TAny :-> TOptional (TCon template)) =\n+    -- TODO: restrict to known templates\n+    whenRuntimeSupports version featureAnyType ty $\n+        ETmLam (mkVar \"any\", TAny) $\n+        EFromAny (TCon template) (EVar $ mkVar \"any\")\n+\n+convertPrim version \"EFromAnyChoice\"\n+    ty@(TApp proxy (TCon template) :-> TAny :-> TOptional choice) =\n+    -- TODO: restrict to known template/choice pairs\n+    whenRuntimeSupports version featureAnyType ty $\n+        ETmLam (mkVar \"_\", TApp proxy (TCon template)) $\n+        ETmLam (mkVar \"any\", TAny) $\n+        EFromAny choice (EVar $ mkVar \"any\")\n+\n+convertPrim version \"EFromAnyContractKey\"\n+    ty@(TApp proxy (TCon template) :-> TAny :-> TOptional key) =\n+    -- TODO: restrict to known template/key pairs\n+    whenRuntimeSupports version featureAnyType ty $\n+        ETmLam (mkVar \"_\", TApp proxy (TCon template)) $\n+        ETmLam (mkVar \"any\", TAny) $\n+        EFromAny key (EVar $ mkVar \"any\")\n+\n+-- TODO: EToAnyTemplate, EToAnyChoice, EToAnyContractKey\n+\n+-- Unknown primitive.\n convertPrim _ x ty = error $ \"Unknown primitive \" ++ show x ++ \" at type \" ++ renderPretty ty\n \n -- | Some builtins are only supported in specific versions of DAML-LF.\n -- Since we don't have conditional compilation in daml-stdlib, we compile"
  },
  {
    "id" : "6a0439ef-32ae-433c-afe9-1248724f8f7e",
    "prId" : 4030,
    "comments" : [
      {
        "id" : "329f8cbe-1930-4818-8392-2a0382658c1d",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Given that `primitive` is only something that we use internally and this would be caught by the LF typechecker I don’t think we ever need to try to catch this here. Same for all the other TODOs here.",
        "createdAt" : "2020-01-14T09:20:52Z",
        "updatedAt" : "2020-01-15T14:32:49Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "0cd10b89-b261-4b07-b2e6-3cee4089ae56",
        "parentId" : "329f8cbe-1930-4818-8392-2a0382658c1d",
        "author" : null,
        "body" : "Hmm, makes sense, but I guess `ToAnyTemplate`/`FromAnyTemplate`/`ToAnyChoice`/... should still have checks? Because the typechecker isn't going to enforce anything there (it just sees `EFromAny` and `EToAny`).",
        "createdAt" : "2020-01-14T11:58:18Z",
        "updatedAt" : "2020-01-15T14:32:49Z",
        "lastEditedBy" : null,
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "3de6b0fa-b21f-4c77-b355-e64a23ca3730",
        "parentId" : "329f8cbe-1930-4818-8392-2a0382658c1d",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "good point I forgot about those! That said, I’m fine leaving this for a separate PR. This is still internal and not something we expose our users to.",
        "createdAt" : "2020-01-14T12:03:02Z",
        "updatedAt" : "2020-01-15T14:32:49Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "1a8b4e37-5224-4097-bc30-a16ca9049a49",
        "parentId" : "329f8cbe-1930-4818-8392-2a0382658c1d",
        "author" : null,
        "body" : "sounds good :)",
        "createdAt" : "2020-01-14T12:08:10Z",
        "updatedAt" : "2020-01-15T14:32:49Z",
        "lastEditedBy" : null,
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "3a6d332937a2569a52ae38499c6fe1022c9fe04c",
    "line" : null,
    "diffHunk" : "@@ -254,13 +254,108 @@ convertPrim _ \"BETextReplicate\" (TInt64 :-> TText :-> TText) = EBuiltin BETextRe\n convertPrim _ \"BETextSplitOn\" (TText :-> TText :-> TList TText) = EBuiltin BETextSplitOn\n convertPrim _ \"BETextIntercalate\" (TText :-> TList TText :-> TText) = EBuiltin BETextIntercalate\n \n+-- Template Desugaring.\n+\n+convertPrim _ \"UCreate\" (TCon template :-> TUpdate (TContractId (TCon template')))\n+    | template == template' =\n+    -- TODO: restrict to known templates"
  },
  {
    "id" : "90114a9f-81eb-49f6-9015-e85675c87b81",
    "prId" : 3815,
    "comments" : [
      {
        "id" : "fe71a6c9-b5cb-46b9-abb8-2e3962b2223c",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "I thought the plan was to keep `BEEqualContractId`, at least that’s what @remyhaemmerle-da  changed the spec to in https://github.com/digital-asset/daml/pull/3812",
        "createdAt" : "2019-12-11T11:35:34Z",
        "updatedAt" : "2019-12-11T11:36:25Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "a6a7d4e8-39c1-4e7c-a19d-99e53de85414",
        "parentId" : "fe71a6c9-b5cb-46b9-abb8-2e3962b2223c",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Looking at the code, I don’t really understand why we are not deprecating `BEEqualContractId`. I thought it was something about relative vs absolute contract ids but looking at the code they compile to the same thing in speedy.",
        "createdAt" : "2019-12-11T11:44:54Z",
        "updatedAt" : "2019-12-11T11:44:54Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "7ce75612-9f00-42b2-bcbc-065c3c5491b7",
        "parentId" : "fe71a6c9-b5cb-46b9-abb8-2e3962b2223c",
        "author" : null,
        "body" : "Let's deprecate it then. (-:",
        "createdAt" : "2019-12-11T11:50:14Z",
        "updatedAt" : "2019-12-11T11:50:15Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "6075fe40-019e-426b-bbeb-6f3077bfc900",
        "parentId" : "fe71a6c9-b5cb-46b9-abb8-2e3962b2223c",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Fine with me but @remyhaemmerle-da should take a look before we do this.",
        "createdAt" : "2019-12-11T11:52:09Z",
        "updatedAt" : "2019-12-11T11:52:10Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "55e0369e-dc3d-47f4-b154-73a9f341ae54",
        "parentId" : "fe71a6c9-b5cb-46b9-abb8-2e3962b2223c",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "I am fine with deprecating it. ",
        "createdAt" : "2019-12-11T12:02:00Z",
        "updatedAt" : "2019-12-11T12:11:49Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "ac5f477b7d51f4e3b6730bf6602cc5237cc0c32a",
    "line" : 17,
    "diffHunk" : "@@ -56,8 +58,10 @@ convertPrim _ \"BEGreater\" (TBuiltin a1 :-> TBuiltin a2 :-> TBool) | a1 == a2 =\n     EBuiltin $ BEGreater a1\n convertPrim _ \"BEEqualList\" ((a1 :-> a2 :-> TBool) :-> TList a3 :-> TList a4 :-> TBool) | a1 == a2, a2 == a3, a3 == a4 =\n     EBuiltin BEEqualList `ETyApp` a1\n-convertPrim _ \"BEEqualContractId\" (TContractId a1 :-> TContractId a2 :-> TBool) | a1 == a2 =\n-    EBuiltin BEEqualContractId `ETyApp` a1\n+convertPrim v \"BEEqualContractId\" (TContractId a1 :-> TContractId a2 :-> TBool) | a1 == a2 =\n+    if v `supports` featureGenMap\n+        then EBuiltin BEEqualGeneric `ETyApp` TContractId a1"
  },
  {
    "id" : "a80af0a3-2113-440d-bc0a-ab2a7adc5fe3",
    "prId" : 2921,
    "comments" : [
      {
        "id" : "022cc8d3-da05-4d9f-819c-208699c64b4d",
        "parentId" : null,
        "author" : null,
        "body" : "```suggestion\r\n    ETyApp (ETyApp (ETyApp (EBuiltin BEDivNumeric) (TNat 10)) (TNat 10)) (TNat 10)\r\n```",
        "createdAt" : "2019-09-17T08:55:37Z",
        "updatedAt" : "2019-09-17T13:37:19Z",
        "lastEditedBy" : null,
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "a4ae7fc2-fc08-4783-a077-08c2c4d7cc06",
        "parentId" : "022cc8d3-da05-4d9f-819c-208699c64b4d",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "I fixed before your commented it. Thanks for the catch anyway.   ",
        "createdAt" : "2019-09-17T09:03:00Z",
        "updatedAt" : "2019-09-17T13:37:19Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "77901924-4159-40a1-b66a-a23724b7d801",
        "parentId" : "022cc8d3-da05-4d9f-819c-208699c64b4d",
        "author" : null,
        "body" : "Nice 👍 ",
        "createdAt" : "2019-09-17T09:04:38Z",
        "updatedAt" : "2019-09-17T13:37:19Z",
        "lastEditedBy" : null,
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "9e61070d1abfe0748c83daae81b0ecd29c70c5aa",
    "line" : null,
    "diffHunk" : "@@ -164,9 +164,9 @@ convertPrim _ \"BEAddDecimal\" (TNumeric10 :-> TNumeric10 :-> TNumeric10) =\n convertPrim _ \"BESubDecimal\" (TNumeric10 :-> TNumeric10 :-> TNumeric10) =\n     ETyApp (EBuiltin BESubNumeric) (TNat 10)\n convertPrim _ \"BEMulDecimal\" (TNumeric10 :-> TNumeric10 :-> TNumeric10) =\n-    ETyApp (EBuiltin BEMulNumeric) (TNat 10)\n+    ETyApp (ETyApp (ETyApp (EBuiltin BEMulNumeric) (TNat 10)) (TNat 10)) (TNat 10)\n convertPrim _ \"BEDivDecimal\" (TNumeric10 :-> TNumeric10 :-> TNumeric10) =\n-    ETyApp (EBuiltin BEDivNumeric) (TNat 10)\n+    ETyApp (ETyApp (ETyApp (EBuiltin BEMulNumeric) (TNat 10)) (TNat 10)) (TNat 10)"
  },
  {
    "id" : "61077e0f-963e-49d8-aa87-8cdf74948969",
    "prId" : 2896,
    "comments" : [
      {
        "id" : "41323d4b-4c15-4d1f-9862-db6133237303",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "We should be able to remove this function now. This was our old hack around the fact that the stdlib could not depend on the DAML-LF version we're compiling to.",
        "createdAt" : "2019-09-18T12:07:56Z",
        "updatedAt" : "2019-09-18T12:08:10Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "6312a22b3f6ba7ed05585b762ba542cae9f75568",
    "line" : 5,
    "diffHunk" : "@@ -199,7 +199,7 @@ _whenRuntimeSupports version feature t e\n     | otherwise = runtimeUnsupported feature t\n \n runtimeUnsupported :: Feature -> Type -> Expr\n-runtimeUnsupported (Feature name version) t =\n+runtimeUnsupported (Feature name version _) t ="
  }
]