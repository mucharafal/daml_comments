[
  {
    "id" : "30f22ea0-0941-4b56-879a-f198e7758239",
    "prId" : 4030,
    "comments" : [
      {
        "id" : "2ee2dc7c-1004-47fc-bc5a-1da2bed328c2",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Much nicer than the silly name matching that I did before, thanks!",
        "createdAt" : "2020-01-14T09:21:49Z",
        "updatedAt" : "2020-01-15T14:32:49Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "3a6d332937a2569a52ae38499c6fe1022c9fe04c",
    "line" : null,
    "diffHunk" : "@@ -100,6 +101,62 @@ pattern DA_Internal_Prelude <- ModuleIn DamlStdlib \"DA.Internal.Prelude\"\n pattern DA_Internal_Record <- ModuleIn DamlStdlib \"DA.Internal.Record\"\n pattern DA_Internal_Desugar <- ModuleIn DamlStdlib \"DA.Internal.Desugar\"\n \n+-- | Deconstruct a dictionary function (DFun) identifier into a tuple\n+-- containing, in order:\n+--   1. the foralls\n+--   2. the dfun arguments (i.e. the instances it depends on)\n+--   3. the type class\n+--   4. the type class arguments\n+splitDFunId :: GHC.Var -> Maybe ([GHC.TyCoVar], [GHC.Type], GHC.Class, [GHC.Type])\n+splitDFunId v\n+    | DFunId _ <- idDetails v\n+    , (tyCoVars, ty1) <- splitForAllTys (varType v)\n+    , (dfunArgs, ty2) <- splitFunTys ty1\n+    , Just (tyCon, tyClsArgs) <- splitTyConApp_maybe ty2\n+    , Just tyCls <- tyConClass_maybe tyCon\n+    = Just (tyCoVars, dfunArgs, tyCls, tyClsArgs)\n+\n+    | otherwise\n+    = Nothing\n+\n+-- | Pattern for template desugaring DFuns.\n+pattern DesugarDFunId :: [GHC.TyCoVar] -> [GHC.Type] -> FastString -> [GHC.Type] -> GHC.Var\n+pattern DesugarDFunId tyCoVars dfunArgs clsName classArgs <-\n+    (splitDFunId -> Just\n+        ( tyCoVars\n+        , dfunArgs\n+        , GHC.className -> NameIn DA_Internal_Desugar clsName\n+        , classArgs\n+        )\n+    )\n+\n+pattern HasSignatoryDFunId, HasEnsureDFunId, HasAgreementDFunId, HasObserverDFunId"
  },
  {
    "id" : "88491b44-849c-4dce-a94e-3f56b5e08545",
    "prId" : 3667,
    "comments" : [
      {
        "id" : "7f79559e-1dbd-4b32-9603-13c4e27602aa",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "GHC has the best names.",
        "createdAt" : "2019-11-28T16:13:42Z",
        "updatedAt" : "2019-11-28T16:35:51Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "5e7e947c49297bdbff942b9e807224650ca4f775",
    "line" : 15,
    "diffHunk" : "@@ -97,6 +99,32 @@ pattern DA_Internal_LF <- ModuleIn DamlStdlib \"DA.Internal.LF\"\n pattern DA_Internal_Prelude <- ModuleIn DamlStdlib \"DA.Internal.Prelude\"\n pattern DA_Internal_Record <- ModuleIn DamlStdlib \"DA.Internal.Record\"\n \n+-- | Break down a constraint tuple projection function name\n+-- into an (index, arity) pair. These names have the form\n+-- \"$p1(%,%)\" \"$p2(%,%)\" \"$p1(%,,%)\" etc."
  }
]