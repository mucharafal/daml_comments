[
  {
    "id" : "0a8ddca7-f64c-427e-b36e-00ec54f32526",
    "prId" : 5025,
    "comments" : [
      {
        "id" : "f781bfc5-3123-4b14-8e58-211ff118935e",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Should we use these helpers in `DA.Daml.LFConversion.Primitives` as well?",
        "createdAt" : "2020-03-16T15:48:47Z",
        "updatedAt" : "2020-03-16T15:49:06Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "fe6a87fc-e125-4c54-804a-92f5393d1857",
        "parentId" : "f781bfc5-3123-4b14-8e58-211ff118935e",
        "author" : null,
        "body" : "Can't, those are more general (they work for any type, not just builtins).",
        "createdAt" : "2020-03-16T15:50:50Z",
        "updatedAt" : "2020-03-16T15:50:51Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "ab23dec9-88ef-4f28-a01e-475c63ea7dba",
        "parentId" : "f781bfc5-3123-4b14-8e58-211ff118935e",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Sorry should have been more clear: Would it make sense to generalize them so they work for both?",
        "createdAt" : "2020-03-16T15:53:14Z",
        "updatedAt" : "2020-03-16T15:53:14Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "b4a1077c-d388-42b9-8fda-26ca4f91283f",
        "parentId" : "f781bfc5-3123-4b14-8e58-211ff118935e",
        "author" : null,
        "body" : "I think it's a bit of a mismatch, it doesn't really work. It may look like there's duplication here, but there really isn't. \r\n\r\nThe reason is the implementation here is just replacing the case where you want to compare a builtin type, because that's what is needed in tagToEnum# and that's all that is available for older LF versions. OTOH, the implementation in Primitives.hs is exposing new functionality (comparison of types that are not builtin) when it is available. If I really wanted to unify these I would have to introduce a compiler error for the case where this function is called on a non-builtin type in older LF versions.",
        "createdAt" : "2020-03-16T15:59:32Z",
        "updatedAt" : "2020-03-16T15:59:58Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "55e9813c-5726-4b9c-92ed-a586b462a358",
        "parentId" : "f781bfc5-3123-4b14-8e58-211ff118935e",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Oh I see, thanks for the explanation!",
        "createdAt" : "2020-03-16T16:06:28Z",
        "updatedAt" : "2020-03-16T16:06:28Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "7f192d98-be0e-4b54-bcb6-3770fd02a383",
        "parentId" : "f781bfc5-3123-4b14-8e58-211ff118935e",
        "author" : null,
        "body" : "it's times like these that a very small amount of dependent types would help . . .",
        "createdAt" : "2020-03-16T16:09:32Z",
        "updatedAt" : "2020-03-16T16:09:32Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "b1552598fe91bdda3ae7176e1444e775ab51106f",
    "line" : 6,
    "diffHunk" : "@@ -109,3 +109,21 @@ instance Outputable Expr where\n sourceLocToRange :: SourceLoc -> Range\n sourceLocToRange (SourceLoc _ slin scol elin ecol) =\n   Range (Position slin scol) (Position elin ecol)\n+\n+mkBuiltinEqual :: Version -> BuiltinType -> Expr\n+mkBuiltinEqual v ty ="
  }
]