[
  {
    "id" : "81b7131f-d8c0-44c2-88fb-1c8b4f9870a4",
    "prId" : 7546,
    "comments" : [
      {
        "id" : "68c4fa2f-7db1-42bf-833e-18425118b43f",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "I’m confused by this. `thisSdkVer` is now in the GHC format. However `edSdkVersions` is the one read from the manifest which with this change should now be the actual SDK version. What am I missing?",
        "createdAt" : "2020-10-01T14:42:57Z",
        "updatedAt" : "2020-10-02T09:53:40Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "050286ee-e1a5-4d64-97aa-a55f88aaa14c",
        "parentId" : "68c4fa2f-7db1-42bf-833e-18425118b43f",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "You're missing nothing. I think I'm missing something now though. Where did we actually need the \"sanitized\" version? To me this looks like the only place we use the `PackageSdkVersion` is in the manifest.",
        "createdAt" : "2020-10-01T15:03:23Z",
        "updatedAt" : "2020-10-02T09:53:40Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "55a50599-6e3f-4675-9d6b-edc6af180eb3",
        "parentId" : "68c4fa2f-7db1-42bf-833e-18425118b43f",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "I’m a bit confused why CI even passes. Shouldn’t the comparison that dependencies have the same sdk version fail with this change? Does it only work because this is not a release build so the SDK version is 0.0.0? What happens if you set `DAML_SDK_RELEASE_VERSION` to a snapshot?\r\n\r\nAs to where this is used: We need to use the mangled version when building `daml-stdlib` and `daml-prim` but that is set in a Bazel build rather than our Haskell code. I’m not quite sure if we need the mangled version in our Haskell code.",
        "createdAt" : "2020-10-01T15:54:22Z",
        "updatedAt" : "2020-10-02T09:53:40Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "3c6f9242-c6c0-43af-8066-62001b379d22",
        "parentId" : "68c4fa2f-7db1-42bf-833e-18425118b43f",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "It looks like we don't need the mangled version in our Haskell code at all. I've removed it and ran\r\n```sh\r\nDAML_SDK_RELEASE_VERSION=0.0.0-snapshot.20200930.5312.0.b9a1905d daml-sdk-head --skip-jars\r\n```\r\nThen I've built two projects `foo` and `bar` using that SDK where `bar` depends on `foo` and everything worked fine.\r\n\r\nI'm wondering if we should add a test for this but I assume it doesn't make too much sense since the release PRs for snapshot releases would catch such issues.",
        "createdAt" : "2020-10-02T10:05:16Z",
        "updatedAt" : "2020-10-02T10:05:16Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "21e54c33-fdad-4e0c-b12d-ee1162a2daed",
        "parentId" : "68c4fa2f-7db1-42bf-833e-18425118b43f",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Ah, and\r\n```sh\r\nDAML_SDK_RELEASE_VERSION=0.0.0-snapshot.20200930.5312.0.b9a1905d bt //compiler/damlc/tests:packaging\r\n```\r\nworks as well.",
        "createdAt" : "2020-10-02T10:11:33Z",
        "updatedAt" : "2020-10-02T10:11:33Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "2cf36bbdf603bc2c2de0942bc119265f4d64756f",
    "line" : 14,
    "diffHunk" : "@@ -80,9 +80,9 @@ createProjectPackageDb projectRoot (disableScenarioService -> opts) thisSdkVer m\n     deps <- expandSdkPackages (optDamlLfVersion opts) (filter (`notElem` basePackages) deps)\n     depsExtracted <- mapM extractDar deps\n \n-    let uniqSdkVersions = nubSort $ unPackageSdkVersion thisSdkVer : map edSdkVersions depsExtracted\n+    let uniqSdkVersions = nubSort $ thisSdkVer : map edSdkVersions depsExtracted"
  },
  {
    "id" : "1775ece3-9677-43fb-bd8a-205d638a98a4",
    "prId" : 5330,
    "comments" : [
      {
        "id" : "cada2ea0-24fe-4da1-89ab-c4dd414a144d",
        "parentId" : null,
        "author" : null,
        "body" : "```suggestion\r\n-- Produce the list of exposed modules for each package.\r\n```",
        "createdAt" : "2020-04-01T10:42:28Z",
        "updatedAt" : "2020-04-01T10:42:55Z",
        "lastEditedBy" : null,
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "668d007a6039bb8c0fd3d58a3ada5181a519d328",
    "line" : null,
    "diffHunk" : "@@ -238,6 +261,14 @@ createProjectPackageDb projectRoot opts thisSdkVer deps dataDeps\n         removePathForcibly dbPath\n         createDirectoryIfMissing True $ dbPath </> \"package.conf.d\"\n \n+-- Given the produce the list of exposed modules for each package."
  },
  {
    "id" : "7013d0e8-e466-4142-9a34-7c18c733d52c",
    "prId" : 5222,
    "comments" : [
      {
        "id" : "35061e4c-fd0c-4ba8-82d7-7c61840bdd45",
        "parentId" : null,
        "author" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "body" : "Feels weird to me to exit from anywhere other than a `main`, but I'll leave it to you to decide the style of the project. Is it worth trying to catch higher up and explicitly print and exit there?",
        "createdAt" : "2020-03-26T18:35:15Z",
        "updatedAt" : "2020-03-26T18:35:18Z",
        "lastEditedBy" : {
          "login" : "SamirTalwar-DA",
          "name" : "Samir Talwar",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/60356447?u=f6cdfccc6ea4254bd7c212099bbac2c27a00a28c&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "15b099d1-add6-40de-af83-2400c62961d2",
        "parentId" : "35061e4c-fd0c-4ba8-82d7-7c61840bdd45",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "`exitFailure` still throws an exception if you really want to catch it somewhere up. But generally, compilers can be much more lenient wtr to crashing than long-running processes and if we cannot initialize the package db everything is broken anyway.",
        "createdAt" : "2020-03-26T18:38:30Z",
        "updatedAt" : "2020-03-26T18:38:30Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "3e4a9b2ad073c7ebe422a16088dab9642f2bfade",
    "line" : 41,
    "diffHunk" : "@@ -505,3 +504,15 @@ showPackageFlag unitId exposeImplicit mods = concat\n   where showRenaming (a, b)\n           | a == b = GHC.moduleNameString a\n           | otherwise = GHC.moduleNameString a <> \" as \" <> GHC.moduleNameString b\n+\n+-- NOTE (MK) We used to call just errorIO here. However for reasons\n+-- that I do not understand this sometimes seemed to result in test failures\n+-- on Windows (never saw it anywhere else) where the executable failed\n+-- as expected but we got no output.\n+-- So now we are extra careful to make sure that the error message is actually\n+-- written somewhere.\n+exitWithError :: String -> IO ()\n+exitWithError msg = do\n+    hPutStrLn stderr msg\n+    hFlush stderr\n+    exitFailure"
  },
  {
    "id" : "661a3a97-9400-444f-89a8-519c2b0adeda",
    "prId" : 4547,
    "comments" : [
      {
        "id" : "c57d2996-66cc-4d11-9810-1ad39c5d4b4f",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "```suggestion\r\n        -- Since we reinitialize the whole package db during `daml init` anyway,\r\n```",
        "createdAt" : "2020-02-17T14:55:28Z",
        "updatedAt" : "2020-02-17T14:57:01Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "bdbde8693bbec46d4f6b6389be185d35834b653c",
    "line" : null,
    "diffHunk" : "@@ -223,6 +221,15 @@ createProjectPackageDb projectRoot opts thisSdkVer deps dataDeps = do\n             mbPkgVersion\n             deps\n             dependencies\n+  where\n+    dbPath = projectPackageDatabase </> lfVersionString (optDamlLfVersion opts)\n+    clearPackageDb = do\n+        -- Since we reinitialize the whole package db anyway,"
  },
  {
    "id" : "c1c8bc33-4f83-4120-804b-1ff35976ab1c",
    "prId" : 4547,
    "comments" : [
      {
        "id" : "a47eedb2-8017-47c5-b11e-ae8cb3abcee4",
        "parentId" : null,
        "author" : null,
        "body" : "Should say `daml damlc init` instead of `daml init`.\r\n\r\n`daml damlc init` should really be `daml damlc init-package-db` or so.",
        "createdAt" : "2020-02-18T10:56:41Z",
        "updatedAt" : "2020-02-18T10:56:42Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "bdbde8693bbec46d4f6b6389be185d35834b653c",
    "line" : 30,
    "diffHunk" : "@@ -223,6 +221,15 @@ createProjectPackageDb projectRoot opts thisSdkVer deps dataDeps = do\n             mbPkgVersion\n             deps\n             dependencies\n+  where\n+    dbPath = projectPackageDatabase </> lfVersionString (optDamlLfVersion opts)\n+    clearPackageDb = do\n+        -- Since we reinitialize the whole package db during `daml init` anyway,"
  },
  {
    "id" : "468eaf04-bd34-49ea-a60e-3d2828cae701",
    "prId" : 4421,
    "comments" : [
      {
        "id" : "a7ffd262-f8ef-4446-a038-38162e299ea4",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Same here package ids might be useful.",
        "createdAt" : "2020-02-06T12:17:47Z",
        "updatedAt" : "2020-02-06T14:11:54Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "85cc4f45-6252-431a-8794-6b7b6ea132cc",
        "parentId" : "a7ffd262-f8ef-4446-a038-38162e299ea4",
        "author" : null,
        "body" : "Added here too",
        "createdAt" : "2020-02-06T12:27:20Z",
        "updatedAt" : "2020-02-06T14:11:54Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "ded024d96b658daf9adac370050f78ba296dd20d",
    "line" : 11,
    "diffHunk" : "@@ -155,6 +155,16 @@ createProjectPackageDb opts thisSdkVer deps dataDeps = do\n               _ -> parsedUnitId\n         pure (pkgId, package, dalf, unitId)\n \n+    let unitIdConflicts = MS.filter ((>=2) . Set.size) .  MS.fromListWith Set.union $ concat\n+            [ [ (unitId, Set.singleton pkgId)\n+              | (pkgId, _package, _dalf, unitId) <- pkgs ]\n+            , [ (unitId, Set.singleton (LF.dalfPackageId dalfPkg))\n+              | (unitId, dalfPkg) <- MS.toList dependencies ]\n+            ]\n+    when (not $ MS.null unitIdConflicts) $ do\n+        fail $ \"Transitive dependencies with same unit id but conflicting package ids: \""
  },
  {
    "id" : "67246229-66a3-42d8-9592-8b53d3ebc638",
    "prId" : 4391,
    "comments" : [
      {
        "id" : "772234c2-f005-47da-ac4f-663519559b6a",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "You can’t rely on the file names for figuring out the unit ids since these can be overwritten via `daml build -o`. We have a list of packages and their unit ids below at https://github.com/digital-asset/daml/blob/fcab7d1a0fa4c3ebd2a330519ebb57b1636382aa/compiler/damlc/lib/DA/Cli/Damlc/Packaging.hs#L128 (note that this includes transitive dependencies so you don’t want all of those but you can use it to get the actual unit ids).",
        "createdAt" : "2020-02-05T08:18:35Z",
        "updatedAt" : "2020-02-18T11:12:21Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "e7244894-e1e2-436b-97df-de853c7289d6",
        "parentId" : "772234c2-f005-47da-ac4f-663519559b6a",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "we don't use the names any more",
        "createdAt" : "2020-02-11T22:12:44Z",
        "updatedAt" : "2020-02-18T11:12:21Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "e29eddf5d338724158422a9fd62bf47e4131c5c1",
    "line" : null,
    "diffHunk" : "@@ -81,6 +81,20 @@ createProjectPackageDb opts thisSdkVer deps dataDeps = do\n     createDirectoryIfMissing True $ dbPath </> \"package.conf.d\"\n \n     deps <- expandSdkPackages (filter (`notElem` basePackages) deps)\n+\n+    let versionize name = case name of\n+          \"daml-script\" -> name <> \"-\" <> sdkVersion\n+          \"daml-trigger\" -> name <> \"-\" <> sdkVersion\n+          _ -> name\n+\n+    let units =\n+          [ GHC.stringToUnitId (versionize base)\n+          | dep <- deps\n+          , let file = takeFileName dep"
  },
  {
    "id" : "1d594aad-3338-4103-a808-60d1b5b5725d",
    "prId" : 4391,
    "comments" : [
      {
        "id" : "d7724bb1-2093-4a92-8c51-72256b32a78d",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "This also needs to take `dataDeps` into account.",
        "createdAt" : "2020-02-05T08:19:08Z",
        "updatedAt" : "2020-02-18T11:12:21Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "4a60c8c2-5a00-4c1f-a27f-f9dd8e846e35",
        "parentId" : "d7724bb1-2093-4a92-8c51-72256b32a78d",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "yes, it does now",
        "createdAt" : "2020-02-11T22:13:00Z",
        "updatedAt" : "2020-02-18T11:12:21Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "e29eddf5d338724158422a9fd62bf47e4131c5c1",
    "line" : null,
    "diffHunk" : "@@ -81,6 +81,20 @@ createProjectPackageDb opts thisSdkVer deps dataDeps = do\n     createDirectoryIfMissing True $ dbPath </> \"package.conf.d\"\n \n     deps <- expandSdkPackages (filter (`notElem` basePackages) deps)\n+\n+    let versionize name = case name of\n+          \"daml-script\" -> name <> \"-\" <> sdkVersion\n+          \"daml-trigger\" -> name <> \"-\" <> sdkVersion\n+          _ -> name\n+\n+    let units =\n+          [ GHC.stringToUnitId (versionize base)\n+          | dep <- deps"
  },
  {
    "id" : "360da203-0094-43ef-bbb9-03808c20eb34",
    "prId" : 4391,
    "comments" : [
      {
        "id" : "dea7a964-f6a3-4f56-9146-c2ee27aa9ef0",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "This is a slightly confusing name especially given the similarity to https://github.com/digital-asset/daml/blob/36e188cac84ddb0f4259cd077a7bb6b4fd466311/compiler/damlc/lib/DA/Cli/Damlc/Packaging.hs#L128. This does _not_ contain all dalfs, it only contains the main dalfs from each DAR. Maybe `rootDalfs` or just `mainDalfs` would be a better name.",
        "createdAt" : "2020-02-12T08:26:14Z",
        "updatedAt" : "2020-02-18T11:12:21Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "99e5e74f-14c9-4166-9f75-c6613edf5f59",
        "parentId" : "dea7a964-f6a3-4f56-9146-c2ee27aa9ef0",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "done",
        "createdAt" : "2020-02-12T12:35:35Z",
        "updatedAt" : "2020-02-18T11:12:21Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "e29eddf5d338724158422a9fd62bf47e4131c5c1",
    "line" : null,
    "diffHunk" : "@@ -69,8 +69,34 @@ import SdkVersion\n --   ledger. Based on the DAML-LF we generate dummy interface files\n --   and then remap references to those dummy packages to the original DAML-LF\n --   package id.\n-createProjectPackageDb :: NormalizedFilePath -> Options -> PackageSdkVersion -> [FilePath] -> [FilePath] -> IO ()\n+\n+calcUnitsFromDeps :: [FilePath] -> IO [UnitId]\n+calcUnitsFromDeps deps = do\n+    let (fpDars, fpDalfs) = partition ((== \".dar\") . takeExtension) deps\n+    dars <- mapM extractDar fpDars\n+    let dalfsFromDars =\n+            [ ( dropExtension $ takeFileName $ ZipArchive.eRelativePath e\n+              , BSL.toStrict $ ZipArchive.fromEntry e\n+              )\n+            | e <- concatMap edMain dars\n+            ]\n+    dalfsFromFps <-\n+        forM fpDalfs $ \\fp -> do\n+            bs <- BS.readFile fp\n+            pure (dropExtension $ takeFileName fp, bs)\n+    let allDalfs = dalfsFromDars ++ dalfsFromFps"
  },
  {
    "id" : "11050c25-0b10-464f-9630-f9cf045fc0b3",
    "prId" : 4391,
    "comments" : [
      {
        "id" : "2a313772-a537-4d86-8dab-a46d29a96909",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "This is a bit wasteful. We are now extracting each DAR twice, once here and then once at https://github.com/digital-asset/daml/blob/36e188cac84ddb0f4259cd077a7bb6b4fd466311/compiler/damlc/lib/DA/Cli/Damlc/Packaging.hs#L115. We are also decoding everything twice, once here, and once at https://github.com/digital-asset/daml/blob/36e188cac84ddb0f4259cd077a7bb6b4fd466311/compiler/damlc/lib/DA/Cli/Damlc/Packaging.hs#L130. Can we factor this such that we only have to do this once?",
        "createdAt" : "2020-02-12T08:27:49Z",
        "updatedAt" : "2020-02-18T11:12:21Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "70ad8f2e-5fa6-4265-a236-33abfa8411ff",
        "parentId" : "2a313772-a537-4d86-8dab-a46d29a96909",
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "as discussed.\r\nour new plan to relocate the `calcUnitsFromDeps` code means this sharing wont be possible now",
        "createdAt" : "2020-02-12T12:36:22Z",
        "updatedAt" : "2020-02-18T11:12:21Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "e29eddf5d338724158422a9fd62bf47e4131c5c1",
    "line" : null,
    "diffHunk" : "@@ -69,8 +69,34 @@ import SdkVersion\n --   ledger. Based on the DAML-LF we generate dummy interface files\n --   and then remap references to those dummy packages to the original DAML-LF\n --   package id.\n-createProjectPackageDb :: NormalizedFilePath -> Options -> PackageSdkVersion -> [FilePath] -> [FilePath] -> IO ()\n+\n+calcUnitsFromDeps :: [FilePath] -> IO [UnitId]\n+calcUnitsFromDeps deps = do\n+    let (fpDars, fpDalfs) = partition ((== \".dar\") . takeExtension) deps\n+    dars <- mapM extractDar fpDars"
  },
  {
    "id" : "3b04a725-8c5b-4caa-8e87-9b88e2496dd2",
    "prId" : 4391,
    "comments" : [
      {
        "id" : "9691b127-7930-421c-96c1-c91a3fe23bf3",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Maybe add a comment here “When compiling dummy interface files for a data-dependency we know all package flags so we don’t need to infer anything.”.",
        "createdAt" : "2020-02-18T08:15:29Z",
        "updatedAt" : "2020-02-18T11:12:21Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "e29eddf5d338724158422a9fd62bf47e4131c5c1",
    "line" : 14,
    "diffHunk" : "@@ -272,14 +272,14 @@ generateAndInstallIfaceFiles dalf src opts workDir dbPath projectPackageDatabase\n             , optIsGenerated = True\n             , optDflagCheck = False\n             , optMbPackageName = Just unitIdStr\n-            , optHideAllPkgs = True\n             , optGhcCustomOpts = []\n             , optPackageImports =\n                   baseImports ++\n                   depImps ++\n                   [ exposePackage (GHC.stringToUnitId $ takeBaseName dep) True []\n                   | dep <- deps\n                   ]\n+            , optInferDependantPackages = InferDependantPackages False"
  },
  {
    "id" : "410ad6af-f42f-4196-abf9-aaccaf22a87f",
    "prId" : 3860,
    "comments" : [
      {
        "id" : "4bd64e43-cc27-438f-a902-b8544cc90b0a",
        "parentId" : null,
        "author" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "body" : "Empty comment?",
        "createdAt" : "2019-12-16T12:56:06Z",
        "updatedAt" : "2019-12-16T12:58:18Z",
        "lastEditedBy" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "d8aae465-3a89-4e38-b90a-7cec0774e117",
        "parentId" : "4bd64e43-cc27-438f-a902-b8544cc90b0a",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "oops removed",
        "createdAt" : "2019-12-16T12:58:19Z",
        "updatedAt" : "2019-12-16T12:58:20Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "89e5cb64394b55687cea69a70479dd1ac91c74e6",
    "line" : null,
    "diffHunk" : "@@ -202,24 +200,31 @@ generateAndInstallIfaceFiles dalf src opts workDir dbPath projectPackageDatabase\n \n     _ <- withDamlIdeState opts' loggerH diagnosticsLogger $ \\ide ->\n         runAction ide $\n+        -- Setting ifDir to . means that the interface files will end up directly next to\n+        -- the source files which is what we want here.\n         writeIfacesAndHie\n-            (toNormalizedFilePath \"./\")\n+            (toNormalizedFilePath \".\")\n             [fp | (fp, _content) <- src']\n     -- write the conf file and refresh the package cache\n     (cfPath, cfBs) <-\n             mkConfFile\n                 PackageConfigFields\n                     { pName = pkgName\n-                    , pSrc = \"\" -- not used\n+                    , pSrc = error \"src field was used for creation of pkg conf file\"\n                     , pExposedModules = Nothing\n                     , pVersion = mbPkgVersion\n                     , pDependencies = deps\n                     , pDataDependencies = []\n-                    , pSdkVersion = PackageSdkVersion \"unknown\"\n+                    , pSdkVersion = error \"sdk version field was used for creation of pkg conf file\"\n+                    --"
  },
  {
    "id" : "1618e670-f971-4625-a2ed-346d6803bdb0",
    "prId" : 3860,
    "comments" : [
      {
        "id" : "629f690d-8277-4812-882f-97380b213b82",
        "parentId" : null,
        "author" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "body" : "Just to be sure, this is because\r\n> -- [...] This is _only_\r\n    -- relevant for `compile` which at the moment is only used for building daml-stdlib\r\n    -- and daml-prim.\r\n\r\n?",
        "createdAt" : "2019-12-16T13:01:42Z",
        "updatedAt" : "2019-12-16T13:01:53Z",
        "lastEditedBy" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "b057d30a-77c6-419c-b651-5cec90341d88",
        "parentId" : "629f690d-8277-4812-882f-97380b213b82",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "yep, I’ll remove it completely from the `Options` record in a follow up PR. the current state makes no sense.",
        "createdAt" : "2019-12-16T13:04:08Z",
        "updatedAt" : "2019-12-16T13:04:08Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "89e5cb64394b55687cea69a70479dd1ac91c74e6",
    "line" : 92,
    "diffHunk" : "@@ -277,9 +292,9 @@ generateAndInstallInstancesPkg thisSdkVer templInstSrc opts dbPathAbs projectPac\n             opts' <-\n                 mkOptions $\n                 opts\n-                    { optWriteInterface = True\n+                    { optWriteInterface = False\n+                    , optIfaceDir = Nothing"
  },
  {
    "id" : "c9256d92-83b5-4861-87ef-4e5f1570c22b",
    "prId" : 3749,
    "comments" : [
      {
        "id" : "50ba49bb-39ea-4928-9a6d-9d2fd014fc33",
        "parentId" : null,
        "author" : null,
        "body" : "Suggestion: instead of nubSorting, just compare all the deps' sdk versions to the current package sdk version. \r\n\r\n```suggestion\r\n    let depsSdkVersions = map edSdkVersions depsExtracted\r\n    unless (all (== unPackageSdkVersion thisSdkVer) depsSdkVersions) $\r\n```\r\n\r\n",
        "createdAt" : "2019-12-05T14:17:43Z",
        "updatedAt" : "2019-12-06T08:28:36Z",
        "lastEditedBy" : null,
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "1a0ffd6813e1bbccf2096df10bb480c1e97d5008",
    "line" : null,
    "diffHunk" : "@@ -50,33 +50,31 @@ import qualified DA.Pretty\n import SdkVersion\n \n -- | Create the project package database containing the given dar packages.\n+--\n+-- We differentiate between two kinds of dependencies.\n+--\n+-- deps (depencies in daml.yaml):\n+--   This is intended for packages that include interface files and can\n+--   be used directly.\n+--   These packages have to be built with the same SDK version.\n+--\n+-- data-deps (data-dependencies in daml.yaml):\n+--   This is intended for packages that have already been uploaded to the\n+--   ledger. Based on the DAML-LF we generate dummy interface files\n+--   and then remap references to those dummy packages to the original DAML-LF\n+--   package id.\n createProjectPackageDb ::\n        Options -> PackageSdkVersion -> [FilePath] -> [FilePath] -> IO ()\n-createProjectPackageDb opts thisSdkVer deps0 dataDeps = do\n-    let dbPath = projectPackageDatabase </> (lfVersionString $ optDamlLfVersion opts)\n-    let\n+createProjectPackageDb opts thisSdkVer deps dataDeps = do\n+    let dbPath = projectPackageDatabase </> lfVersionString (optDamlLfVersion opts)\n     -- Since we reinitialize the whole package db anyway,\n     -- during `daml init`, we clear the package db before to avoid\n     -- issues during SDk upgrades. Once we have a more clever mechanism than\n     -- reinitializing everything, we probably want to change this.\n     removePathForcibly dbPath\n     createDirectoryIfMissing True $ dbPath </> \"package.conf.d\"\n-    -- Expand SDK package dependencies using the SDK root path.\n-    -- E.g. `daml-trigger` --> `$DAML_SDK/daml-libs/daml-trigger.dar`\n-    -- Or, fail if not run from DAML assistant.\n-    mbSdkPath <- handleIO (\\_ -> pure Nothing) $ Just <$> getSdkPath\n-    let isSdkPackage fp = takeExtension fp `notElem` [\".dar\", \".dalf\"]\n-        handleSdkPackages :: [FilePath] -> IO [FilePath]\n-        handleSdkPackages =\n-          let expand fp\n-                | isSdkPackage fp\n-                = case mbSdkPath of\n-                    Just sdkPath -> pure $! sdkPath </> \"daml-libs\" </> fp <.> \"dar\"\n-                    Nothing -> fail $ \"Cannot resolve SDK dependency '\" ++ fp ++ \"'. Use daml-assistant.\"\n-                | otherwise\n-                = pure fp\n-          in mapM expand\n-    deps <- handleSdkPackages $ filter (`notElem` basePackages) deps0\n+\n+    deps <- expandSdkPackages (filter (`notElem` basePackages) deps)\n     depsExtracted <- mapM extractDar deps\n     let uniqSdkVersions = nubSort $ unPackageSdkVersion thisSdkVer : map edSdkVersions depsExtracted\n     unless (length uniqSdkVersions <= 1) $"
  },
  {
    "id" : "096f72b1-d316-4e58-8337-e0460273cb91",
    "prId" : 3749,
    "comments" : [
      {
        "id" : "9686b74c-0fbd-40ae-8e18-e7a5b815a765",
        "parentId" : null,
        "author" : null,
        "body" : "If possible extract `either (fail . DA.Pretty.renderPretty) pure` as a separate function (like `requiredE` from the daml-assistant codebase).\r\n\r\n```suggestion\r\n            requiredE $\r\n```",
        "createdAt" : "2019-12-05T14:22:40Z",
        "updatedAt" : "2019-12-06T08:28:36Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "8ce9591d-4ceb-4c92-a26e-5c3f1a34adf9",
        "parentId" : "9686b74c-0fbd-40ae-8e18-e7a5b815a765",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "I’ll leave it for now but I agree that we should factor this out eventually.",
        "createdAt" : "2019-12-06T08:30:51Z",
        "updatedAt" : "2019-12-06T08:30:51Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "1a0ffd6813e1bbccf2096df10bb480c1e97d5008",
    "line" : 126,
    "diffHunk" : "@@ -87,61 +85,33 @@ createProjectPackageDb opts thisSdkVer deps0 dataDeps = do\n     -- deal with data imports first\n     let (fpDars, fpDalfs) = partition ((== \".dar\") . takeExtension) dataDeps\n     dars <- mapM extractDar fpDars\n-    let dalfs = concatMap edDalfs dars\n-    -- when we compile packages with different sdk versions or with dalf dependencies, we\n-    -- need to generate the interface files\n+    -- These are the dalfs that are in a DAR that has been passed in via data-dependencies.\n     let dalfsFromDars =\n             [ ( dropExtension $ takeFileName $ ZipArchive.eRelativePath e\n-              , BSL.toStrict $ ZipArchive.fromEntry e)\n-            | e <- dalfs\n+              , BSL.toStrict $ ZipArchive.fromEntry e\n+              )\n+            | e <- concatMap edDalfs dars\n             ]\n+    -- These are dalfs that have been passed in directly as DALFs via data-dependencies.\n     dalfsFromFps <-\n         forM fpDalfs $ \\fp -> do\n-            bs <- B.readFile fp\n+            bs <- BS.readFile fp\n             pure (dropExtension $ takeFileName fp, bs)\n     let allDalfs = dalfsFromDars ++ dalfsFromFps\n-    pkgs <-\n-        forM allDalfs $ \\(name, dalf) -> do\n-            (pkgId, package) <-\n-                either (fail . DA.Pretty.renderPretty) pure $\n-                Archive.decodeArchive Archive.DecodeAsMain dalf\n-            pure\n-                ( pkgId\n-                , package\n-                , dalf\n-                , stringToUnitId $ parseUnitId name pkgId)\n-    -- mapping from package id's to unit id's. if the same package is imported with\n-    -- different unit id's, we would loose a unit id here.\n-    let pkgMap =\n-            MS.fromList\n-                [(pkgId, unitId) | (pkgId, _pkg, _bs, unitId) <- pkgs]\n-    -- order the packages in topological order\n-    let (depGraph, vertexToNode, _keyToVertex) =\n-            graphFromEdges $ do\n-                (pkgId, dalf, bs, unitId) <- pkgs\n-                let pkgRefs =\n-                        [ pid\n-                        | LF.PRImport pid <- toListOf packageRefs dalf\n-                        ]\n-                let getUid = getUnitId unitId pkgMap\n-                let src = generateSrcPkgFromLf getUid (Just \"Sdk\") dalf\n-                let templInstSrc =\n-                        generateTemplateInstancesPkgFromLf\n-                            getUid\n-                            (Just \"Sdk\")\n-                            pkgId\n-                            dalf\n-                pure\n-                    ( (src, templInstSrc, unitId, dalf, bs)\n-                    , pkgId\n-                    , pkgRefs)\n-    let pkgIdsTopoSorted = reverse $ topSort depGraph\n+    pkgs <- forM allDalfs $ \\(name, dalf) -> do\n+        (pkgId, package) <-\n+            either (fail . DA.Pretty.renderPretty) pure $"
  },
  {
    "id" : "3a96d6e3-aa10-442a-b675-18a2b53e54f3",
    "prId" : 3749,
    "comments" : [
      {
        "id" : "25d39d71-333e-48dc-98e5-99950a73e818",
        "parentId" : null,
        "author" : null,
        "body" : "```suggestion\r\n        pure (pkgId, package, dalf, stringToUnitId (parseUnitId name pkgId))\r\n```",
        "createdAt" : "2019-12-05T14:23:11Z",
        "updatedAt" : "2019-12-06T08:28:36Z",
        "lastEditedBy" : null,
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "8ccfb5fd-0810-46f6-bcbe-ea2e33c3d9b3",
        "parentId" : "25d39d71-333e-48dc-98e5-99950a73e818",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "You’re stealing my dollars!",
        "createdAt" : "2019-12-06T07:24:50Z",
        "updatedAt" : "2019-12-06T08:28:36Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "1a0ffd6813e1bbccf2096df10bb480c1e97d5008",
    "line" : null,
    "diffHunk" : "@@ -87,61 +85,33 @@ createProjectPackageDb opts thisSdkVer deps0 dataDeps = do\n     -- deal with data imports first\n     let (fpDars, fpDalfs) = partition ((== \".dar\") . takeExtension) dataDeps\n     dars <- mapM extractDar fpDars\n-    let dalfs = concatMap edDalfs dars\n-    -- when we compile packages with different sdk versions or with dalf dependencies, we\n-    -- need to generate the interface files\n+    -- These are the dalfs that are in a DAR that has been passed in via data-dependencies.\n     let dalfsFromDars =\n             [ ( dropExtension $ takeFileName $ ZipArchive.eRelativePath e\n-              , BSL.toStrict $ ZipArchive.fromEntry e)\n-            | e <- dalfs\n+              , BSL.toStrict $ ZipArchive.fromEntry e\n+              )\n+            | e <- concatMap edDalfs dars\n             ]\n+    -- These are dalfs that have been passed in directly as DALFs via data-dependencies.\n     dalfsFromFps <-\n         forM fpDalfs $ \\fp -> do\n-            bs <- B.readFile fp\n+            bs <- BS.readFile fp\n             pure (dropExtension $ takeFileName fp, bs)\n     let allDalfs = dalfsFromDars ++ dalfsFromFps\n-    pkgs <-\n-        forM allDalfs $ \\(name, dalf) -> do\n-            (pkgId, package) <-\n-                either (fail . DA.Pretty.renderPretty) pure $\n-                Archive.decodeArchive Archive.DecodeAsMain dalf\n-            pure\n-                ( pkgId\n-                , package\n-                , dalf\n-                , stringToUnitId $ parseUnitId name pkgId)\n-    -- mapping from package id's to unit id's. if the same package is imported with\n-    -- different unit id's, we would loose a unit id here.\n-    let pkgMap =\n-            MS.fromList\n-                [(pkgId, unitId) | (pkgId, _pkg, _bs, unitId) <- pkgs]\n-    -- order the packages in topological order\n-    let (depGraph, vertexToNode, _keyToVertex) =\n-            graphFromEdges $ do\n-                (pkgId, dalf, bs, unitId) <- pkgs\n-                let pkgRefs =\n-                        [ pid\n-                        | LF.PRImport pid <- toListOf packageRefs dalf\n-                        ]\n-                let getUid = getUnitId unitId pkgMap\n-                let src = generateSrcPkgFromLf getUid (Just \"Sdk\") dalf\n-                let templInstSrc =\n-                        generateTemplateInstancesPkgFromLf\n-                            getUid\n-                            (Just \"Sdk\")\n-                            pkgId\n-                            dalf\n-                pure\n-                    ( (src, templInstSrc, unitId, dalf, bs)\n-                    , pkgId\n-                    , pkgRefs)\n-    let pkgIdsTopoSorted = reverse $ topSort depGraph\n+    pkgs <- forM allDalfs $ \\(name, dalf) -> do\n+        (pkgId, package) <-\n+            either (fail . DA.Pretty.renderPretty) pure $\n+            Archive.decodeArchive Archive.DecodeAsMain dalf\n+        pure (pkgId, package, dalf, stringToUnitId $ parseUnitId name pkgId)"
  },
  {
    "id" : "f4b44d6d-d858-4672-a240-f474b38c5a2e",
    "prId" : 3749,
    "comments" : [
      {
        "id" : "2bb4b924-4b8e-4443-b3fe-8dc7e328ae4d",
        "parentId" : null,
        "author" : null,
        "body" : "What's the logic behind `reverse $ topSort depGraph` here, specifically why `reverse`? It might be good to add a comment.",
        "createdAt" : "2019-12-05T14:27:31Z",
        "updatedAt" : "2019-12-06T08:28:36Z",
        "lastEditedBy" : null,
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "493704d4-2a8d-4a1d-ac86-abd92ac3fc6b",
        "parentId" : "2bb4b924-4b8e-4443-b3fe-8dc7e328ae4d",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "I’ve added a comment. Basically `topSort` on the original graph would result in traversing a package before its dependencies whereas we want the opposite. I’ve also replaced `reverse . topSort` by `topSort . transposeG` to make this a bit more explicit.",
        "createdAt" : "2019-12-06T08:29:52Z",
        "updatedAt" : "2019-12-06T08:29:52Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "002ef71c-66d6-4e21-bde2-608b2af1a069",
        "parentId" : "2bb4b924-4b8e-4443-b3fe-8dc7e328ae4d",
        "author" : null,
        "body" : "👍 thanks!",
        "createdAt" : "2019-12-06T09:43:04Z",
        "updatedAt" : "2019-12-06T09:43:04Z",
        "lastEditedBy" : null,
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "1a0ffd6813e1bbccf2096df10bb480c1e97d5008",
    "line" : null,
    "diffHunk" : "@@ -87,61 +85,33 @@ createProjectPackageDb opts thisSdkVer deps0 dataDeps = do\n     -- deal with data imports first\n     let (fpDars, fpDalfs) = partition ((== \".dar\") . takeExtension) dataDeps\n     dars <- mapM extractDar fpDars\n-    let dalfs = concatMap edDalfs dars\n-    -- when we compile packages with different sdk versions or with dalf dependencies, we\n-    -- need to generate the interface files\n+    -- These are the dalfs that are in a DAR that has been passed in via data-dependencies.\n     let dalfsFromDars =\n             [ ( dropExtension $ takeFileName $ ZipArchive.eRelativePath e\n-              , BSL.toStrict $ ZipArchive.fromEntry e)\n-            | e <- dalfs\n+              , BSL.toStrict $ ZipArchive.fromEntry e\n+              )\n+            | e <- concatMap edDalfs dars\n             ]\n+    -- These are dalfs that have been passed in directly as DALFs via data-dependencies.\n     dalfsFromFps <-\n         forM fpDalfs $ \\fp -> do\n-            bs <- B.readFile fp\n+            bs <- BS.readFile fp\n             pure (dropExtension $ takeFileName fp, bs)\n     let allDalfs = dalfsFromDars ++ dalfsFromFps\n-    pkgs <-\n-        forM allDalfs $ \\(name, dalf) -> do\n-            (pkgId, package) <-\n-                either (fail . DA.Pretty.renderPretty) pure $\n-                Archive.decodeArchive Archive.DecodeAsMain dalf\n-            pure\n-                ( pkgId\n-                , package\n-                , dalf\n-                , stringToUnitId $ parseUnitId name pkgId)\n-    -- mapping from package id's to unit id's. if the same package is imported with\n-    -- different unit id's, we would loose a unit id here.\n-    let pkgMap =\n-            MS.fromList\n-                [(pkgId, unitId) | (pkgId, _pkg, _bs, unitId) <- pkgs]\n-    -- order the packages in topological order\n-    let (depGraph, vertexToNode, _keyToVertex) =\n-            graphFromEdges $ do\n-                (pkgId, dalf, bs, unitId) <- pkgs\n-                let pkgRefs =\n-                        [ pid\n-                        | LF.PRImport pid <- toListOf packageRefs dalf\n-                        ]\n-                let getUid = getUnitId unitId pkgMap\n-                let src = generateSrcPkgFromLf getUid (Just \"Sdk\") dalf\n-                let templInstSrc =\n-                        generateTemplateInstancesPkgFromLf\n-                            getUid\n-                            (Just \"Sdk\")\n-                            pkgId\n-                            dalf\n-                pure\n-                    ( (src, templInstSrc, unitId, dalf, bs)\n-                    , pkgId\n-                    , pkgRefs)\n-    let pkgIdsTopoSorted = reverse $ topSort depGraph\n+    pkgs <- forM allDalfs $ \\(name, dalf) -> do\n+        (pkgId, package) <-\n+            either (fail . DA.Pretty.renderPretty) pure $\n+            Archive.decodeArchive Archive.DecodeAsMain dalf\n+        pure (pkgId, package, dalf, stringToUnitId $ parseUnitId name pkgId)\n+\n     dbPathAbs <- makeAbsolute dbPath\n     projectPackageDatabaseAbs <- makeAbsolute projectPackageDatabase\n-    forM_ pkgIdsTopoSorted $ \\vertex -> do\n-        let ((src, templInstSrc, uid, dalf, bs), pkgId, _) =\n-                vertexToNode vertex\n-        let unitIdStr = unitIdString uid\n+\n+    let (depGraph, vertexToNode) = buildLfPackageGraph pkgs\n+    -- Iterate over the dependency graph in topological order.\n+    forM_ (reverse $ topSort depGraph) $ \\vertex -> do"
  },
  {
    "id" : "179cbb68-2efb-48fa-8cd6-da5689bd25a4",
    "prId" : 3749,
    "comments" : [
      {
        "id" : "4b3dcc8c-fb24-4807-bc8f-278b27156ad5",
        "parentId" : null,
        "author" : null,
        "body" : "```suggestion\r\n    mapM (expand mbSdkPath) dars\r\n```",
        "createdAt" : "2019-12-05T14:28:44Z",
        "updatedAt" : "2019-12-06T08:28:36Z",
        "lastEditedBy" : null,
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "1a0ffd6813e1bbccf2096df10bb480c1e97d5008",
    "line" : null,
    "diffHunk" : "@@ -188,159 +158,176 @@ createProjectPackageDb opts thisSdkVer deps0 dataDeps = do\n     -- finally install the dependecies\n     forM_ depsExtracted $\n         \\ExtractedDar{..} -> installDar dbPath edConfFiles edDalfs edSrcs\n+\n+-- Expand SDK package dependencies using the SDK root path.\n+-- E.g. `daml-trigger` --> `$DAML_SDK/daml-libs/daml-trigger.dar`\n+-- When invoked outside of the SDK, we will only error out\n+-- if there is actually an SDK package so that\n+-- When there is no SDK\n+expandSdkPackages :: [FilePath] -> IO [FilePath]\n+expandSdkPackages dars = do\n+    mbSdkPath <- handleIO (\\_ -> pure Nothing) $ Just <$> getSdkPath\n+    traverse (expand mbSdkPath) dars"
  },
  {
    "id" : "14a37642-7807-4f67-aea7-15cd98e56c09",
    "prId" : 3668,
    "comments" : [
      {
        "id" : "e2b41546-3b04-450b-949f-ff59a880ad52",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "This is duplicated between here and `Damlc.hs`. It would be good to factor this out into something like `getUnitId :: String -> PAckageId -> UnitId`.",
        "createdAt" : "2019-12-05T09:14:00Z",
        "updatedAt" : "2019-12-05T10:32:51Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "81264f43-6376-43a9-9977-a5dd84d6969a",
        "parentId" : "e2b41546-3b04-450b-949f-ff59a880ad52",
        "author" : {
          "login" : "robin-da",
          "name" : "Robin Krom",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/14074936?u=1b47fdbdfd82ea534219fc1b94d646873c56a7d7&v=4"
        },
        "body" : "done, I put it together with`stripPkgId` in the `LF.Reader` module.",
        "createdAt" : "2019-12-05T10:21:14Z",
        "updatedAt" : "2019-12-05T10:32:51Z",
        "lastEditedBy" : {
          "login" : "robin-da",
          "name" : "Robin Krom",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/14074936?u=1b47fdbdfd82ea534219fc1b94d646873c56a7d7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "071efbbf7da1fd4656f32dd81f50f0ee5bfa4e5f",
    "line" : null,
    "diffHunk" : "@@ -105,7 +105,12 @@ createProjectPackageDb opts thisSdkVer deps0 dataDeps = do\n             (pkgId, package) <-\n                 either (fail . DA.Pretty.renderPretty) pure $\n                 Archive.decodeArchive Archive.DecodeAsMain dalf\n-            pure (pkgId, package, dalf, stringToUnitId name)\n+            pure\n+                ( pkgId\n+                , package\n+                , dalf\n+                , stringToUnitId $"
  },
  {
    "id" : "18980c3f-a349-46b1-954d-7403635e0615",
    "prId" : 3633,
    "comments" : [
      {
        "id" : "2034ac96-be96-40c4-8b8f-a0a41f2a8d01",
        "parentId" : null,
        "author" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "body" : "Would it be worth unifying all instances of the string \"Sdk\" into a single named variable?\r\n(I count 10 places in the code base)",
        "createdAt" : "2019-11-26T16:19:05Z",
        "updatedAt" : "2019-11-26T16:19:27Z",
        "lastEditedBy" : {
          "login" : "nickchapman-da",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/49153372?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "6f5971cd-adc9-4a3a-af35-cbfe919fe7ac",
        "parentId" : "2034ac96-be96-40c4-8b8f-a0a41f2a8d01",
        "author" : {
          "login" : "robin-da",
          "name" : "Robin Krom",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/14074936?u=1b47fdbdfd82ea534219fc1b94d646873c56a7d7&v=4"
        },
        "body" : "You're right there.",
        "createdAt" : "2019-11-26T17:04:14Z",
        "updatedAt" : "2019-11-26T17:04:14Z",
        "lastEditedBy" : {
          "login" : "robin-da",
          "name" : "Robin Krom",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/14074936?u=1b47fdbdfd82ea534219fc1b94d646873c56a7d7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "ede8723d-f157-466f-a2ba-e3e0d7ae19b1",
        "parentId" : "2034ac96-be96-40c4-8b8f-a0a41f2a8d01",
        "author" : {
          "login" : "robin-da",
          "name" : "Robin Krom",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/14074936?u=1b47fdbdfd82ea534219fc1b94d646873c56a7d7&v=4"
        },
        "body" : "I'll do it in a follow PR.",
        "createdAt" : "2019-11-26T18:28:06Z",
        "updatedAt" : "2019-11-26T18:28:06Z",
        "lastEditedBy" : {
          "login" : "robin-da",
          "name" : "Robin Krom",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/14074936?u=1b47fdbdfd82ea534219fc1b94d646873c56a7d7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "8db0a3656e6463846bbf7e0e4f7962b02bda3c26",
    "line" : 9,
    "diffHunk" : "@@ -121,10 +121,11 @@ createProjectPackageDb opts thisSdkVer deps0 dataDeps = do\n                         | LF.PRImport pid <- toListOf packageRefs dalf\n                         ]\n                 let getUid = getUnitId unitId pkgMap\n-                let src = generateSrcPkgFromLf getUid pkgId dalf\n+                let src = generateSrcPkgFromLf getUid (Just \"Sdk\") dalf\n                 let templInstSrc =\n                         generateTemplateInstancesPkgFromLf\n                             getUid\n+                            (Just \"Sdk\")"
  },
  {
    "id" : "58ad2733-b0c6-47b8-b273-bca52e3f01ce",
    "prId" : 3503,
    "comments" : [
      {
        "id" : "8e0e1f24-17c5-4bb5-aaa3-2c48e46a145a",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "```suggestion\r\n                              -- we need the standard library from the current sdk for the\r\n```",
        "createdAt" : "2019-11-18T12:28:20Z",
        "updatedAt" : "2019-11-18T20:20:05Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "125b7d3d-1adb-4bc7-8bd1-02be06d1b721",
        "parentId" : "8e0e1f24-17c5-4bb5-aaa3-2c48e46a145a",
        "author" : {
          "login" : "robin-da",
          "name" : "Robin Krom",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/14074936?u=1b47fdbdfd82ea534219fc1b94d646873c56a7d7&v=4"
        },
        "body" : "thanks",
        "createdAt" : "2019-11-18T14:09:15Z",
        "updatedAt" : "2019-11-18T20:20:05Z",
        "lastEditedBy" : {
          "login" : "robin-da",
          "name" : "Robin Krom",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/14074936?u=1b47fdbdfd82ea534219fc1b94d646873c56a7d7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "e11899fa2735e5f9588b587ccc13106f6598a88d",
    "line" : null,
    "diffHunk" : "@@ -285,8 +286,17 @@ createProjectPackageDb opts thisSdkVer deps0 dataDeps = do\n                         , optIsGenerated = True\n                         , optDflagCheck = False\n                         , optMbPackageName = Just instancesUnitIdStr\n-                        , optHideAllPkgs = False\n-                        , optPackageImports = [(unitIdStr, []) | pkgName /= \"daml-stdlib\"]\n+                        , optHideAllPkgs = True\n+                        , optPackageImports =\n+                              (\"daml-prim\", True, []) :\n+                              (unitIdStr, True, []) :\n+                              -- we need the standart library from the current sdk for the"
  }
]