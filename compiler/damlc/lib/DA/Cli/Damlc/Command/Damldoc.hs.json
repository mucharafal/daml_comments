[
  {
    "id" : "875b6edd-a018-4c8a-8b97-19780e879261",
    "prId" : 2394,
    "comments" : [
      {
        "id" : "eebaf609-f53a-4898-9f1d-78df8252dce9",
        "parentId" : null,
        "author" : {
          "login" : "jberthold-da",
          "name" : "Jost Berthold",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/28879196?u=41dee6fb7ab2761a566b324e2f4e5ad9b577ae0e&v=4"
        },
        "body" : "Build failed due to missing default. \r\n```suggestion\r\n        <> help (\"Qualify any non-local types in generated docs. \" <> \r\n            \"Can be set to \\\"always\\\" (always qualify non-local types), \" <>\r\n            \"\\\"never\\\" (never qualify non-local types), \" <> \r\n            \"and \\\"inpackage\\\" (qualify non-local types defined in the \"<> \r\n            \"same package). Defaults to \\\"never\\\".\")\r\n         <> value QualifyTypesNever\r\n```",
        "createdAt" : "2019-08-05T11:32:46Z",
        "updatedAt" : "2019-08-05T12:47:50Z",
        "lastEditedBy" : {
          "login" : "jberthold-da",
          "name" : "Jost Berthold",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/28879196?u=41dee6fb7ab2761a566b324e2f4e5ad9b577ae0e&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "6d57f37f-6303-4150-ac17-6336ec2b1fed",
        "parentId" : "eebaf609-f53a-4898-9f1d-78df8252dce9",
        "author" : null,
        "body" : "Thanks!",
        "createdAt" : "2019-08-05T11:38:27Z",
        "updatedAt" : "2019-08-05T12:47:50Z",
        "lastEditedBy" : null,
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "0b9d15a77e50bf8780331c378c6b7080345b1c42",
    "line" : null,
    "diffHunk" : "@@ -136,6 +138,30 @@ documentation = Damldoc\n         long \"combine\"\n         <> help \"Combine all generated docs into a single output file (always on for json and hoogle output).\"\n \n+    optExtractOptions :: Parser ExtractOptions\n+    optExtractOptions = ExtractOptions\n+        <$> optQualifyTypes\n+        <*> optSimplifyQualifiedTypes\n+\n+    optQualifyTypes :: Parser QualifyTypes\n+    optQualifyTypes = option readQualifyTypes $\n+        long \"qualify-types\"\n+        <> metavar \"MODE\"\n+        <> help \"Qualify any non-local types in generated docs. Can be set to \\\"always\\\" (always qualify non-local types), \\\"never\\\" (never qualify non-local types), and \\\"inpackage\\\" (qualify non-local types defined in the same package). Defaults to \\\"never\\\".\""
  },
  {
    "id" : "af7fbf5c-f71b-4f64-b2ac-b6caebbba39a",
    "prId" : 2394,
    "comments" : [
      {
        "id" : "81c02ef7-381a-4e13-9d33-59abdb360dee",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "It looks like this option doesn’t do anything if you don’t also qualify types. Should we emit a warning if users only specify `--simplify-qualified-types`?",
        "createdAt" : "2019-08-05T11:35:23Z",
        "updatedAt" : "2019-08-05T12:47:50Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "0b9d15a77e50bf8780331c378c6b7080345b1c42",
    "line" : 47,
    "diffHunk" : "@@ -136,6 +138,30 @@ documentation = Damldoc\n         long \"combine\"\n         <> help \"Combine all generated docs into a single output file (always on for json and hoogle output).\"\n \n+    optExtractOptions :: Parser ExtractOptions\n+    optExtractOptions = ExtractOptions\n+        <$> optQualifyTypes\n+        <*> optSimplifyQualifiedTypes\n+\n+    optQualifyTypes :: Parser QualifyTypes\n+    optQualifyTypes = option readQualifyTypes $\n+        long \"qualify-types\"\n+        <> metavar \"MODE\"\n+        <> help \"Qualify any non-local types in generated docs. Can be set to \\\"always\\\" (always qualify non-local types), \\\"never\\\" (never qualify non-local types), and \\\"inpackage\\\" (qualify non-local types defined in the same package). Defaults to \\\"never\\\".\"\n+\n+    readQualifyTypes =\n+        eitherReader $ \\arg ->\n+            case lower arg of\n+                \"always\" -> Right QualifyTypesAlways\n+                \"inpackage\" -> Right QualifyTypesInPackage\n+                \"never\" -> Right QualifyTypesNever\n+                _ -> Left \"Unknown mode for --qualify-types. Expected \\\"always\\\", \\\"never\\\", or \\\"inpackage\\\".\"\n+\n+    optSimplifyQualifiedTypes :: Parser Bool\n+    optSimplifyQualifiedTypes = switch $"
  },
  {
    "id" : "befefff3-e4ca-4400-a728-1a6831572e6a",
    "prId" : 2373,
    "comments" : [
      {
        "id" : "e7468885-a271-4dde-9123-b6aa4bb0d645",
        "parentId" : null,
        "author" : {
          "login" : "jberthold-da",
          "name" : "Jost Berthold",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/28879196?u=41dee6fb7ab2761a566b324e2f4e5ad9b577ae0e&v=4"
        },
        "body" : ":spaghetti: ",
        "createdAt" : "2019-08-02T00:11:54Z",
        "updatedAt" : "2019-08-02T13:21:13Z",
        "lastEditedBy" : {
          "login" : "jberthold-da",
          "name" : "Jost Berthold",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/28879196?u=41dee6fb7ab2761a566b324e2f4e5ad9b577ae0e&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "fffdc703a22a1b5365247ad9af3bda609f14231f",
    "line" : 5,
    "diffHunk" : "@@ -71,7 +71,7 @@ documentation = Damldoc\n     optTemplate =\n         optional . option str\n             $ metavar \"FILE\"\n-            <> help \"Path to output template for generated files. When generating docs, __TITLE__ and __BODY__ in the template are replaced with doc title and body respectively, before output. (Exception: for hoogle and json output, the template file is a prefix to the body, no replacement occurs.)\" -- TODO: make template behavior uniform accross formats\n+            <> help \"Path to mustache template. The variables 'title' and 'body' in the template are substituted with the doc title and body respectively. (Exception: for hoogle and json output, the template file is a prefix to the body, no replacement occurs.)\" -- TODO: make template behavior uniform accross formats"
  },
  {
    "id" : "23d72347-ef33-4f06-bd98-b6e40bce1270",
    "prId" : 2295,
    "comments" : [
      {
        "id" : "bf0d557c-ce8f-40d8-80a3-a818cf15adb6",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Thanks! I kept getting the format names wrong :slightly_smiling_face: ",
        "createdAt" : "2019-07-26T11:37:37Z",
        "updatedAt" : "2019-07-26T11:52:29Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "f310114d-33a5-4008-9c98-15f92c37f6dd",
        "parentId" : "bf0d557c-ce8f-40d8-80a3-a818cf15adb6",
        "author" : null,
        "body" : ":-)",
        "createdAt" : "2019-07-26T11:53:13Z",
        "updatedAt" : "2019-07-26T11:53:13Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "3cbf21fa2c5f44224c0925817b9a9a555e46f583",
    "line" : 119,
    "diffHunk" : "@@ -62,33 +67,44 @@ documentation = Damldoc\n             <> help \"Name of package to generate.\"\n             <> long \"package-name\"\n \n-    optPrefix :: Parser (Maybe FilePath)\n-    optPrefix =\n+    optTemplate :: Parser (Maybe FilePath)\n+    optTemplate =\n         optional . option str\n             $ metavar \"FILE\"\n-            <> help \"File to prepend to all generated files\"\n-            <> long \"prefix\"\n-            <> short 'p'\n+            <> help \"Path to output template for generated files. When generating docs, __TITLE__ and __BODY__ in the template are replaced with doc title and body respectively, before output. (Exception: for hoogle and json output, the template file is a prefix to the body, no replacement occurs.)\" -- TODO: make template behavior uniform accross formats\n+            <> long \"template\"\n+            <> short 't'\n \n     argMainFiles :: Parser [FilePath]\n     argMainFiles = some $ argument str $ metavar \"FILE...\"\n                   <> help \"Main file(s) (*.daml) whose contents are read\"\n \n-    optJsonOrFormat :: Parser DocFormat\n-    optJsonOrFormat = fromMaybe <$>\n-                      optFormat <*>\n-                      (flag Nothing (Just Json) $\n-                        long \"json\"\n-                        <> help \"alias for `--format Json'\")\n-\n-    optFormat :: Parser DocFormat\n-    optFormat = option auto $ metavar \"FORMAT\"\n-                <> help (\"Output format. Valid format names: \"\n-                         <> show [minBound..maxBound::DocFormat]\n-                         <> \" (Default: Markdown).\")\n-                <> short 'f'\n-                <> long \"format\"\n-                <> value Markdown\n+    optOutputFormatOrJson :: Parser OutputFormat\n+    optOutputFormatOrJson = fromMaybe\n+        <$> optOutputFormat\n+        <*> (flag Nothing (Just OutputJson) $\n+            long \"json\"\n+            <> help \"alias for `--format json'\")\n+\n+    optOutputFormat :: Parser OutputFormat\n+    optOutputFormat =\n+        option readOutputFormat $\n+            metavar \"FORMAT\"\n+            <> help \"Output format. Valid format names: rst, md, markdown, html, hoogle, json (Default: markdown).\"\n+            <> short 'f'\n+            <> long \"format\"\n+            <> value (OutputDocs Markdown)\n+\n+    readOutputFormat =\n+        eitherReader $ \\arg ->\n+            case lower arg of\n+                \"rst\" -> Right (OutputDocs Rst)"
  },
  {
    "id" : "32cfe6cf-3560-4420-a994-8dc27f199209",
    "prId" : 2013,
    "comments" : [
      {
        "id" : "d4a82d5c-379e-4a2b-b781-615c9c504d39",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "```suggestion\r\n        optional packageNameOpt\r\n```",
        "createdAt" : "2019-07-09T11:35:30Z",
        "updatedAt" : "2019-07-09T14:09:26Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "479ce1d1-9b25-47e2-9f26-d168d51c865b",
        "parentId" : "d4a82d5c-379e-4a2b-b781-615c9c504d39",
        "author" : null,
        "body" : "`packageNameOpt` is positional, where this is a `--package-name` option.",
        "createdAt" : "2019-07-09T11:47:30Z",
        "updatedAt" : "2019-07-09T14:09:26Z",
        "lastEditedBy" : null,
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "2277bfbe-e4d0-49c8-a098-ae8a8e0128ec",
        "parentId" : "d4a82d5c-379e-4a2b-b781-615c9c504d39",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Oh good point, still `optional` might make this a bit nicer :slightly_smiling_face: ",
        "createdAt" : "2019-07-09T11:48:21Z",
        "updatedAt" : "2019-07-09T14:09:26Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "d54a2a56-ab8f-4c07-bd33-4af03817755e",
        "parentId" : "d4a82d5c-379e-4a2b-b781-615c9c504d39",
        "author" : null,
        "body" : "Agreed. Here and in the other flags :-) ",
        "createdAt" : "2019-07-09T11:49:07Z",
        "updatedAt" : "2019-07-09T14:09:26Z",
        "lastEditedBy" : null,
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "8f8278423b236247b46b363205baf3d78563216e",
    "line" : null,
    "diffHunk" : "@@ -48,6 +49,13 @@ documentation x = Damldoc x <$>\n                 <> long \"output\"\n                 <> short 'o'\n \n+    optMbPackageName :: Parser (Maybe String)\n+    optMbPackageName =\n+        option (Just <$> str) $ metavar \"NAME\""
  }
]