[
  {
    "id" : "6f26a345-ee91-4465-9c26-82624b736ad4",
    "prId" : 3342,
    "comments" : [
      {
        "id" : "1eadf1fa-7cad-4f6f-8770-301c74d92b9d",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Based on the comment it isn’t clear to me what this does. Looking at the source, we end up calling\r\n```\r\n(foldr1 (</>) $ splitOn \".\" modName) ++ qual ++ \"GenInstances\" ++ \".daml\"\r\n```\r\nso this is neither appending nor prepended but inserted somewhere in the middle. Maybe it would be clearer to make this the root of the module hierarchy so we generate modules like `Qual.modName.GenInstances.daml`",
        "createdAt" : "2019-11-05T14:44:35Z",
        "updatedAt" : "2019-11-05T18:46:21Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "f42e8483-59e6-4178-b9fb-ed720076a9e0",
        "parentId" : "1eadf1fa-7cad-4f6f-8770-301c74d92b9d",
        "author" : {
          "login" : "robin-da",
          "name" : "Robin Krom",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/14074936?u=1b47fdbdfd82ea534219fc1b94d646873c56a7d7&v=4"
        },
        "body" : "This comes from the idea that you will compile with the module aliases Mod -> ModA for package 1, and Mod -> ModB for package2 when you build an upgrade project. In that way it's consistent that we change the module name everywhere the same way. I'll try to make the docu for the option clearer.",
        "createdAt" : "2019-11-05T16:33:11Z",
        "updatedAt" : "2019-11-05T18:46:21Z",
        "lastEditedBy" : {
          "login" : "robin-da",
          "name" : "Robin Krom",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/14074936?u=1b47fdbdfd82ea534219fc1b94d646873c56a7d7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "272818c92a48fbaf19707d743912199fcaf709f7",
    "line" : 4,
    "diffHunk" : "@@ -68,6 +68,14 @@ targetSrcDirOpt =\n     <> long \"srcdir\"\n     <> value Nothing\n \n+qualOpt :: Parser (Maybe String)"
  },
  {
    "id" : "df02041d-68ba-4bdf-bfbc-c5dfc65ace2d",
    "prId" : 3009,
    "comments" : [
      {
        "id" : "da39d245-ce42-4b57-bd0c-779bad37985e",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "I prefer using `-o outfile` for output arguments over having multiple positional arguments. It’s much easier if you don’t have to remember the order.",
        "createdAt" : "2019-09-24T19:05:50Z",
        "updatedAt" : "2019-09-27T13:33:14Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "53d2f18b-e834-4367-9ca4-774482e47fc5",
        "parentId" : "da39d245-ce42-4b57-bd0c-779bad37985e",
        "author" : null,
        "body" : "I agree with @cocreature here, `-o output` is a bit nicer.",
        "createdAt" : "2019-09-26T08:25:45Z",
        "updatedAt" : "2019-09-27T13:33:14Z",
        "lastEditedBy" : null,
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "4b0640d679a39b59928bde9f985c4fdc99ab02c1",
    "line" : null,
    "diffHunk" : "@@ -176,6 +176,11 @@ dotFileOpt = option (Just <$> str) $\n     <> long \"dot\"\n     <> value Nothing\n \n+htmlOutFile :: Parser FilePath\n+htmlOutFile = argument str $"
  },
  {
    "id" : "3f82a26b-f31f-44de-8a36-8d65fd17de0b",
    "prId" : 3003,
    "comments" : [
      {
        "id" : "25aeb8ec-dc31-4780-90da-615bb0b93510",
        "parentId" : null,
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "Here I am not sure. ",
        "createdAt" : "2019-09-25T07:45:59Z",
        "updatedAt" : "2019-09-25T08:01:54Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "51e8b21b-f0ca-4ee1-adad-82a42cc760ff",
        "parentId" : "25aeb8ec-dc31-4780-90da-615bb0b93510",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "That looks fine",
        "createdAt" : "2019-09-25T07:47:49Z",
        "updatedAt" : "2019-09-25T08:01:54Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "3fb68825c3c5aa62891a92ec08a49980aca9758f",
    "line" : null,
    "diffHunk" : "@@ -386,7 +386,7 @@ optionsParser numProcessors enableScenarioService parsePkgName = Options\n     <*> optDebugLog\n     <*> optGhcCustomOptions\n     <*> pure enableScenarioService\n-    <*> pure (optScenarioValidation $ defaultOptions Nothing)\n+    <*> pure (optScenarioSkipValidation $ defaultOptions Nothing)"
  },
  {
    "id" : "6ed34984-0c24-42e1-b399-dbcb3753d9f2",
    "prId" : 2339,
    "comments" : [
      {
        "id" : "25a6f88c-8b85-4eaa-992b-a97524ae4c65",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "We should rename this to `--with-lint` or `--with-dlint`.",
        "createdAt" : "2019-07-31T07:49:00Z",
        "updatedAt" : "2019-07-31T07:50:42Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "c026d67f-6cdd-44e8-ae0b-8dbcb309b8ea",
        "parentId" : "25a6f88c-8b85-4eaa-992b-a97524ae4c65",
        "author" : null,
        "body" : "✔️ ",
        "createdAt" : "2019-08-05T19:25:54Z",
        "updatedAt" : "2019-08-05T19:25:55Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "fbe9d034237196247b233b85cad77396f3785517",
    "line" : 7,
    "diffHunk" : "@@ -338,10 +338,15 @@ enableScenarioOpt = EnableScenarioService <$>\n     flagYesNoAuto \"scenarios\" True \"Enable/disable support for running scenarios\" idm\n \n hlintEnabledOpt :: Parser HlintUsage\n-hlintEnabledOpt = HlintEnabled <$> strOption\n+hlintEnabledOpt = HlintEnabled\n+  <$> strOption\n   ( long \"with-hlint\""
  },
  {
    "id" : "6020c806-8444-4585-bdb1-0b3c5494cfb8",
    "prId" : 2145,
    "comments" : [
      {
        "id" : "a60f39a6-7891-414f-8757-860140b45a6d",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Why do we have `hlintDisabledOpt`? It looks like you cannot use it to overwrite a `hlintEnabledOpt` option that comes earlier in the command line so it seems like a useless flag.",
        "createdAt" : "2019-07-15T12:14:52Z",
        "updatedAt" : "2019-07-15T14:33:26Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "ccec93ea-8359-416f-9daf-267c885713b7",
        "parentId" : "a60f39a6-7891-414f-8757-860140b45a6d",
        "author" : null,
        "body" : "I think it's nice style to be able to say `--hlint-disable` explicitly despite it being the default if nothing is provided or an explicit `--hlint-enable ...` is provided (if both are provided on the same command line its a parse error). That is, you can say nothing and get the default or you can be explicit about it. So, while it might seem \"useless\" its presence is symmetric with `--hlint-enable` and thus avoids a potential principle of least surprise violation for the user.  ",
        "createdAt" : "2019-07-15T12:19:03Z",
        "updatedAt" : "2019-07-15T14:33:26Z",
        "lastEditedBy" : null,
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "60727de4-2051-4b9e-a317-addbdc5d1613",
        "parentId" : "a60f39a6-7891-414f-8757-860140b45a6d",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Fair enough but if we add this it should overwrite an `hlint-enable` option that is earlier in the command line imho.",
        "createdAt" : "2019-07-15T12:20:51Z",
        "updatedAt" : "2019-07-15T14:33:26Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "03d67683-4f74-442f-9b2c-9593063effc6",
        "parentId" : "a60f39a6-7891-414f-8757-860140b45a6d",
        "author" : null,
        "body" : "I don't agree. The behavior described above makes perfect sense to me. If its contentious then I'd be more inclined to withdraw the `--hlint-disable` flag for the sake of harmony.",
        "createdAt" : "2019-07-15T12:23:52Z",
        "updatedAt" : "2019-07-15T14:33:26Z",
        "lastEditedBy" : null,
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "d9d099f5-0b85-4206-9175-15592c4c9e10",
        "parentId" : "a60f39a6-7891-414f-8757-860140b45a6d",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "You prefer the current behavior of having `damlc --hlint-enable DATA_DIR --hlint-disable` behave as if only `--hlint-enable DATA_DIR` was passed? That seems extremely unintuitive to me and contradicts the behavior I’ve gotten used to from other tools, e.g., GHC where you can overwrite previous flags with later flags.",
        "createdAt" : "2019-07-15T12:25:44Z",
        "updatedAt" : "2019-07-15T14:33:26Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "316142a1-a938-4889-b342-b2e8a9d80f35",
        "parentId" : "a60f39a6-7891-414f-8757-860140b45a6d",
        "author" : null,
        "body" : "No, that's not the current behavior. The current behavior is a parse error (or at least, that's what the optparse-applicative documentation says - haven't tested it). As for overriding previous flags with later flags, that seems to me to be a rabbit hole we'd probably be better off not going down today.",
        "createdAt" : "2019-07-15T12:29:00Z",
        "updatedAt" : "2019-07-15T14:33:26Z",
        "lastEditedBy" : null,
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "efd04c93-73ab-45c2-89f0-252717ca2833",
        "parentId" : "a60f39a6-7891-414f-8757-860140b45a6d",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Oh I see, thanks. A parse error is reasonable. That said, getting the overwrite behavior isn’t particularly hard:\r\n```\r\nfmap (fromMaybe HLintDisabled . lastMay) $ many (hlintEnabledOpt <|> hlintDisabledOpt)\r\n```\r\nshould do the trick but totally fine to do that later or not at all for now.",
        "createdAt" : "2019-07-15T12:31:19Z",
        "updatedAt" : "2019-07-15T14:33:26Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "0f60afcd-1a86-4fa5-833b-10ab9bdbd9b9",
        "parentId" : "a60f39a6-7891-414f-8757-860140b45a6d",
        "author" : null,
        "body" : "Given that its a parse error does that change your position? If it doesn't, then my preferred option is to remove `--without-hlint`. What do you think?\r\n",
        "createdAt" : "2019-07-15T12:32:39Z",
        "updatedAt" : "2019-07-15T14:33:26Z",
        "lastEditedBy" : null,
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "cacf0e47-7460-4d54-b067-fb3a696ddb0f",
        "parentId" : "a60f39a6-7891-414f-8757-860140b45a6d",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Yep, a parse error is reasonable.",
        "createdAt" : "2019-07-15T12:42:01Z",
        "updatedAt" : "2019-07-15T14:33:26Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "d18decd8-939d-4a13-a527-0f4757806117",
        "parentId" : "a60f39a6-7891-414f-8757-860140b45a6d",
        "author" : null,
        "body" : "Awesome. Thanks @cocreature .",
        "createdAt" : "2019-07-15T12:42:49Z",
        "updatedAt" : "2019-07-15T14:33:26Z",
        "lastEditedBy" : null,
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "27a88c270469e4521741825484d5b2c79aa5bdce",
    "line" : null,
    "diffHunk" : "@@ -347,5 +348,6 @@ hlintDisabledOpt = flag' HlintDisabled\n     <> help \"Disable hlint\"\n   )\n \n-hlintUsageOpt :: Parser (Maybe HlintUsage)\n-hlintUsageOpt = optional (hlintEnabledOpt <|> hlintDisabledOpt)\n+hlintUsageOpt :: Parser HlintUsage\n+hlintUsageOpt = fmap (fromMaybe HlintDisabled) $\n+  optional (hlintEnabledOpt <|> hlintDisabledOpt)"
  }
]