[
  {
    "id" : "44c56fe4-8598-4948-a5b1-28ba20cb4ce2",
    "prId" : 2278,
    "comments" : [
      {
        "id" : "812c0e21-563e-4679-bc3b-403e4d3963cc",
        "parentId" : null,
        "author" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "body" : "```suggestion\r\n    -- NOTE(MH): The cases below are impossible because they only appear\r\n```",
        "createdAt" : "2019-07-24T19:19:08Z",
        "updatedAt" : "2019-07-24T19:33:53Z",
        "lastEditedBy" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "9b2077e3eeec96348b37961d057e91ddec5904f7",
    "line" : null,
    "diffHunk" : "@@ -52,26 +53,44 @@ startFromUpdate :: Set.Set (LF.Qualified LF.ExprValName) -> LF.World -> LF.Updat\n startFromUpdate seen world update = case update of\n     LF.UPure _ e -> startFromExpr seen world e\n     LF.UBind (LF.Binding _ e1) e2 -> startFromExpr seen world e1 `Set.union` startFromExpr seen world e2\n-    LF.UCreate tpl e -> Set.singleton (ACreate tpl) `Set.union` startFromExpr seen world e\n-    LF.UExercise tpl chc e1 e2 e3 -> Set.singleton (AExercise tpl chc) `Set.union` startFromExpr seen world e1 `Set.union` maybe Set.empty (startFromExpr seen world) e2 `Set.union` startFromExpr seen world e3\n-    LF.UFetch _ ctIdEx -> startFromExpr seen world ctIdEx\n     LF.UGetTime -> Set.empty\n     LF.UEmbedExpr _ upEx -> startFromExpr seen world upEx\n-    LF.ULookupByKey _ -> Set.empty\n-    LF.UFetchByKey _ -> Set.empty\n+    -- NOTE(MH): The above cases are impossible because they only appear"
  },
  {
    "id" : "d621d194-7900-45a9-9808-cfc0e24921dd",
    "prId" : 2278,
    "comments" : [
      {
        "id" : "460536f8-6ae1-41fa-8aba-11dda620ab39",
        "parentId" : null,
        "author" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "body" : "`archive c = exercise c Archive` in DA.Internal.Template. So won't the `exercise` case be sufficient?",
        "createdAt" : "2019-07-24T19:27:36Z",
        "updatedAt" : "2019-07-24T19:33:53Z",
        "lastEditedBy" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "f40b3d1c-12ed-4ae4-827e-1bf204e99f2d",
        "parentId" : "460536f8-6ae1-41fa-8aba-11dda620ab39",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "That does not work right now because `archive` is polymorphic. Once we do the substitution at the type level, this should work. I'll leave a comment to this effect.",
        "createdAt" : "2019-07-24T19:32:15Z",
        "updatedAt" : "2019-07-24T19:33:53Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "ad099de0-edd3-4063-a156-74292239bca9",
        "parentId" : "460536f8-6ae1-41fa-8aba-11dda620ab39",
        "author" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "body" : "Ah right, thanks",
        "createdAt" : "2019-07-24T19:34:19Z",
        "updatedAt" : "2019-07-24T19:34:19Z",
        "lastEditedBy" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "9b2077e3eeec96348b37961d057e91ddec5904f7",
    "line" : 51,
    "diffHunk" : "@@ -52,26 +53,44 @@ startFromUpdate :: Set.Set (LF.Qualified LF.ExprValName) -> LF.World -> LF.Updat\n startFromUpdate seen world update = case update of\n     LF.UPure _ e -> startFromExpr seen world e\n     LF.UBind (LF.Binding _ e1) e2 -> startFromExpr seen world e1 `Set.union` startFromExpr seen world e2\n-    LF.UCreate tpl e -> Set.singleton (ACreate tpl) `Set.union` startFromExpr seen world e\n-    LF.UExercise tpl chc e1 e2 e3 -> Set.singleton (AExercise tpl chc) `Set.union` startFromExpr seen world e1 `Set.union` maybe Set.empty (startFromExpr seen world) e2 `Set.union` startFromExpr seen world e3\n-    LF.UFetch _ ctIdEx -> startFromExpr seen world ctIdEx\n     LF.UGetTime -> Set.empty\n     LF.UEmbedExpr _ upEx -> startFromExpr seen world upEx\n-    LF.ULookupByKey _ -> Set.empty\n-    LF.UFetchByKey _ -> Set.empty\n+    -- NOTE(MH): The above cases are impossible because they only appear\n+    -- in dictionaries for the `Template` and `Choice` classes, which we\n+    -- ignore below.\n+    LF.UCreate{}-> error \"IMPOSSIBLE\"\n+    LF.UExercise{} -> error \"IMPOSSIBLE\"\n+    LF.UFetch{} -> error \"IMPOSSIBLE\"\n+    LF.ULookupByKey{} -> error \"IMPOSSIBLE\"\n+    LF.UFetchByKey{} -> error \"IMPOSSIBLE\"\n \n startFromExpr :: Set.Set (LF.Qualified LF.ExprValName) -> LF.World  -> LF.Expr -> Set.Set Action\n startFromExpr seen world e = case e of\n     LF.EVar _ -> Set.empty\n+    -- NOTE(MH): We ignore the dictionaries for the `Template` and `Choice`\n+    -- classes because they contain too many ledger actions. We detect the\n+    -- `create`, `archive` and `exercise` functions which take these\n+    -- dictionaries as arguments instead.\n+    LF.EVal (LF.Qualified _ _ (LF.ExprValName ref))\n+        | \"$fTemplate\" `T.isPrefixOf` ref || \"$fChoice\" `T.isPrefixOf` ref -> Set.empty\n     LF.EVal ref ->  case LF.lookupValue ref world of\n         Right LF.DefValue{..}\n             | ref `Set.member` seen  -> Set.empty\n             | otherwise -> startFromExpr (Set.insert ref seen)  world dvalBody\n         Left _ -> error \"This should not happen\"\n     LF.EUpdate upd -> startFromUpdate seen world upd\n-    LF.ETmApp (LF.ETyApp (LF.EVal (LF.Qualified _ (LF.ModuleName [\"DA\",\"Internal\",\"Template\"]) (LF.ExprValName \"fetch\"))) _) _ -> Set.empty\n+    EInternalTemplateVal \"create\" `LF.ETyApp` LF.TCon tpl `LF.ETmApp` _dict\n+        -> Set.singleton (ACreate tpl)\n+    EInternalTemplateVal \"exercise\" `LF.ETyApp` LF.TCon tpl `LF.ETyApp` LF.TCon (LF.Qualified _ _ (LF.TypeConName [chc])) `LF.ETyApp` _ret `LF.ETmApp` _dict ->\n+        Set.singleton (AExercise tpl (LF.ChoiceName chc))\n+    EInternalTemplateVal \"archive\" `LF.ETyApp` LF.TCon tpl `LF.ETmApp` _dict ->\n+        Set.singleton (AExercise tpl (LF.ChoiceName \"Archive\"))"
  },
  {
    "id" : "b60ee76a-4da0-4882-8e9a-ec2d8e36cf60",
    "prId" : 2178,
    "comments" : [
      {
        "id" : "53e08ca9-b9ac-484b-b311-b688461c034e",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Has anything actually changed here?",
        "createdAt" : "2019-07-29T14:58:40Z",
        "updatedAt" : "2019-07-30T22:55:02Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "389c9fd4-29a6-452c-a8cc-a7e740b3a8da",
        "parentId" : "53e08ca9-b9ac-484b-b311-b688461c034e",
        "author" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "body" : "Don't think so. I guess I was just pointing out in the comments that `create` and `archive` come from a `Template` instance and `exercise` comes from a `Choice` instance.",
        "createdAt" : "2019-07-29T15:09:34Z",
        "updatedAt" : "2019-07-30T22:55:02Z",
        "lastEditedBy" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "ca591f5890a7d9487d0b2351de3d08b4592a1a87",
    "line" : 46,
    "diffHunk" : "@@ -58,36 +58,37 @@ startFromUpdate seen world update = case update of\n     -- NOTE(MH): The cases below are impossible because they only appear\n     -- in dictionaries for the `Template` and `Choice` classes, which we\n     -- ignore below.\n-    LF.UCreate{}-> error \"IMPOSSIBLE\"\n+    LF.UCreate{} -> error \"IMPOSSIBLE\"\n     LF.UExercise{} -> error \"IMPOSSIBLE\"\n     LF.UFetch{} -> error \"IMPOSSIBLE\"\n     LF.ULookupByKey{} -> error \"IMPOSSIBLE\"\n     LF.UFetchByKey{} -> error \"IMPOSSIBLE\"\n \n-startFromExpr :: Set.Set (LF.Qualified LF.ExprValName) -> LF.World  -> LF.Expr -> Set.Set Action\n+startFromExpr :: Set.Set (LF.Qualified LF.ExprValName) -> LF.World -> LF.Expr -> Set.Set Action\n startFromExpr seen world e = case e of\n     LF.EVar _ -> Set.empty\n-    -- NOTE(MH): We ignore the dictionaries for the `Template` and `Choice`\n-    -- classes because they contain too many ledger actions. We detect the\n-    -- `create`, `archive` and `exercise` functions which take these\n-    -- dictionaries as arguments instead.\n+    -- NOTE(MH/RJR): Do not explore the `$fXInstance` dictionary because it\n+    -- contains all the ledger actions and therefore creates too many edges\n+    -- in the graph. We instead detect calls to the `create`, `archive` and\n+    -- `exercise` methods from `Template` and `Choice` instances.\n     LF.EVal (LF.Qualified _ _ (LF.ExprValName ref))\n-        | \"$fTemplate\" `T.isPrefixOf` ref || \"$fChoice\" `T.isPrefixOf` ref -> Set.empty\n-    LF.EVal ref ->  case LF.lookupValue ref world of\n+        | \"$f\" `T.isPrefixOf` ref && \"Instance\" `T.isSuffixOf` ref -> Set.empty\n+    LF.EVal ref -> case LF.lookupValue ref world of\n         Right LF.DefValue{..}\n-            | ref `Set.member` seen  -> Set.empty\n-            | otherwise -> startFromExpr (Set.insert ref seen)  world dvalBody\n+            | ref `Set.member` seen -> Set.empty\n+            | otherwise -> startFromExpr (Set.insert ref seen) world dvalBody\n         Left _ -> error \"This should not happen\"\n     LF.EUpdate upd -> startFromUpdate seen world upd\n+    -- NOTE(RJR): Look for calls to `create` and `archive` methods from a\n+    -- `Template` instance and produce the corresponding edges in the graph.\n     EInternalTemplateVal \"create\" `LF.ETyApp` LF.TCon tpl `LF.ETmApp` _dict\n         -> Set.singleton (ACreate tpl)\n-    EInternalTemplateVal \"exercise\" `LF.ETyApp` LF.TCon tpl `LF.ETyApp` LF.TCon (LF.Qualified _ _ (LF.TypeConName [chc])) `LF.ETyApp` _ret `LF.ETmApp` _dict ->\n-        Set.singleton (AExercise tpl (LF.ChoiceName chc))\n-    -- TODO(MH): We need to add a special case for `archive` because it\n-    -- currently defined as `archive c = exercise c Archive` and we can't\n-    -- handle polymorphic calls to `exercise` like this one.\n     EInternalTemplateVal \"archive\" `LF.ETyApp` LF.TCon tpl `LF.ETmApp` _dict ->\n         Set.singleton (AExercise tpl (LF.ChoiceName \"Archive\"))\n+    -- NOTE(RJR): Look for calls to the `exercise` method from a `Choice`"
  },
  {
    "id" : "80322ad3-83ee-47f3-97a7-1f624cd6a6a5",
    "prId" : 2116,
    "comments" : [
      {
        "id" : "cb838d36-c42d-4e90-9f3a-8fcd5a8ceb57",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Will we not end up with the `Archive` choice being represented twice, once in `actions` and once in `archiveChoiceAndAction`?. ",
        "createdAt" : "2019-07-12T09:12:21Z",
        "updatedAt" : "2019-07-12T14:46:46Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "02aebbe3458fcf83dfc3b16ff7d3af76a9e53b09",
    "line" : null,
    "diffHunk" : "@@ -74,8 +74,13 @@ startFromExpr seen world e = case e of\n startFromChoice :: LF.World -> LF.TemplateChoice -> Set.Set Action\n startFromChoice world chc = startFromExpr Set.empty world (LF.chcUpdate chc)\n \n+-- We adding template name to archive as we need to have unique choice names\n+archiveChoiceAndAction :: LF.Template -> ChoiceAndAction\n+archiveChoiceAndAction tpl = ChoiceAndAction (LF.ChoiceName $ tplName tpl <> \"_Archive\") True Set.empty\n+\n templatePossibleUpdates :: LF.World -> LF.Template -> [ChoiceAndAction]\n-templatePossibleUpdates world tpl = map (\\c -> ChoiceAndAction tpl c (startFromChoice world c)) (NM.toList (LF.tplChoices tpl))\n+templatePossibleUpdates world tpl = actions ++ [archiveChoiceAndAction tpl]"
  },
  {
    "id" : "3160293c-79ab-4e37-bf82-580860681589",
    "prId" : 2116,
    "comments" : [
      {
        "id" : "bf41f19c-83f3-428b-a1b6-47e5eb972516",
        "parentId" : null,
        "author" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "body" : "I would get rid of `Chc` or maybe use `choiceConsuming`.",
        "createdAt" : "2019-07-12T13:44:35Z",
        "updatedAt" : "2019-07-12T14:46:46Z",
        "lastEditedBy" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "dce743b0-529e-4f57-9d05-bcf4a0544ed1",
        "parentId" : "bf41f19c-83f3-428b-a1b6-47e5eb972516",
        "author" : {
          "login" : "akalburgi",
          "name" : "Anup Kalburgi",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/42743833?v=4"
        },
        "body" : "cool",
        "createdAt" : "2019-07-12T14:03:52Z",
        "updatedAt" : "2019-07-12T14:46:46Z",
        "lastEditedBy" : {
          "login" : "akalburgi",
          "name" : "Anup Kalburgi",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/42743833?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "02aebbe3458fcf83dfc3b16ff7d3af76a9e53b09",
    "line" : null,
    "diffHunk" : "@@ -26,8 +26,8 @@ data Action = ACreate (LF.Qualified LF.TypeConName)\n             | AExercise (LF.Qualified LF.TypeConName) LF.ChoiceName deriving (Eq, Ord, Show )\n \n data ChoiceAndAction = ChoiceAndAction\n-    { choiceForTemplate :: LF.Template\n-    , choice :: LF.TemplateChoice\n+    { choiceName :: LF.ChoiceName\n+    , consumingChc :: IsConsuming"
  },
  {
    "id" : "ebbba844-76aa-422c-a36f-a32ba7ddcc5c",
    "prId" : 2116,
    "comments" : [
      {
        "id" : "c438e5fe-af01-4145-8f24-64a7e8924c63",
        "parentId" : null,
        "author" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "body" : "`ChoiceAndActions` (plural)?",
        "createdAt" : "2019-07-12T13:45:07Z",
        "updatedAt" : "2019-07-12T14:46:46Z",
        "lastEditedBy" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "02aebbe3458fcf83dfc3b16ff7d3af76a9e53b09",
    "line" : 3,
    "diffHunk" : "@@ -26,8 +26,8 @@ data Action = ACreate (LF.Qualified LF.TypeConName)\n             | AExercise (LF.Qualified LF.TypeConName) LF.ChoiceName deriving (Eq, Ord, Show )\n \n data ChoiceAndAction = ChoiceAndAction"
  },
  {
    "id" : "a702d4e8-2c86-4494-a3ff-a25049b67c88",
    "prId" : 2116,
    "comments" : [
      {
        "id" : "3e4b8f42-3bc5-4aa1-a25d-001a4f610aed",
        "parentId" : null,
        "author" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "body" : "```suggestion\r\n-- Adding create as a choice to the graph\r\n```",
        "createdAt" : "2019-07-12T13:47:48Z",
        "updatedAt" : "2019-07-12T14:46:46Z",
        "lastEditedBy" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "02aebbe3458fcf83dfc3b16ff7d3af76a9e53b09",
    "line" : null,
    "diffHunk" : "@@ -94,17 +99,14 @@ tplName :: LF.Template -> T.Text\n tplName LF.Template {..} = head (LF.unTypeConName tplTypeCon)\n \n extractChoiceData :: ChoiceAndAction -> (LF.ChoiceName, IsConsuming)\n-extractChoiceData (ChoiceAndAction tpl choice _) = (newChoiceName, LF.chcConsuming choice)\n-    where newChoiceName\n-            | LF.chcName choice == LF.ChoiceName \"Archive\" = LF.ChoiceName $ tplName tpl <> \"_Archive\"\n-            | otherwise = LF.chcName choice\n+extractChoiceData (ChoiceAndAction choiceN consuming _) = (choiceN, consuming)\n \n \n--- Making choiceName is very weird\n templateWithCreateChoice :: TemplateChoices -> [(LF.ChoiceName, IsConsuming)]\n templateWithCreateChoice TemplateChoices {..} = createChoice : map extractChoiceData choiceAndAction\n     where createChoice = (LF.ChoiceName $ tplName template <> \"_Create\", False)\n \n+-- We are adding create as a choice to the graph ,"
  },
  {
    "id" : "b855feea-24d1-4acb-b089-876208c8ef4f",
    "prId" : 2116,
    "comments" : [
      {
        "id" : "c17fa631-6716-4014-b188-20e08c4a5bfe",
        "parentId" : null,
        "author" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "body" : "You're really unqualifying the name right? So maybe `tplNameUnqual`?",
        "createdAt" : "2019-07-12T13:49:33Z",
        "updatedAt" : "2019-07-12T14:46:46Z",
        "lastEditedBy" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "d6eaa7e0-89c8-48f4-9cca-e92b00d160f6",
        "parentId" : "c17fa631-6716-4014-b188-20e08c4a5bfe",
        "author" : {
          "login" : "akalburgi",
          "name" : "Anup Kalburgi",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/42743833?v=4"
        },
        "body" : "that sounds a lot better. Done ",
        "createdAt" : "2019-07-12T14:29:39Z",
        "updatedAt" : "2019-07-12T14:46:46Z",
        "lastEditedBy" : {
          "login" : "akalburgi",
          "name" : "Anup Kalburgi",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/42743833?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "02aebbe3458fcf83dfc3b16ff7d3af76a9e53b09",
    "line" : 81,
    "diffHunk" : "@@ -125,14 +127,17 @@ constructSubgraphsWithLables lookupData tpla@TemplateChoices {..} = SubGraph nod\n         nodes = map (\\(chc, _) -> (chc, nodeIdForChoice lookupData chc)) choicesInTemplete\n         nodesWithCreate = nodes ++ [addCreateChoice tpla lookupData]\n \n-actionToChoice :: LF.Template -> Action -> LF.ChoiceName\n-actionToChoice tpl (ACreate _) = LF.ChoiceName $ tplName tpl <> \"_Create\"\n-actionToChoice tpl (AExercise _ (LF.ChoiceName \"Archive\")) = LF.ChoiceName $ tplName tpl <> \"_Archive\"\n-actionToChoice _tpl (AExercise _ chc) = chc\n+tplNamet :: LF.TypeConName -> T.Text"
  },
  {
    "id" : "2155b959-7c06-467e-b5d0-7b361e853f2a",
    "prId" : 2116,
    "comments" : [
      {
        "id" : "2b8cd248-79b2-4be1-968a-527a722c134c",
        "parentId" : null,
        "author" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "body" : "Don't think you need the `where` clause if this is the entire implementation",
        "createdAt" : "2019-07-12T13:51:43Z",
        "updatedAt" : "2019-07-12T14:46:46Z",
        "lastEditedBy" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "8959bd75-c01e-4737-a9e2-5f8ec0c69a95",
        "parentId" : "2b8cd248-79b2-4be1-968a-527a722c134c",
        "author" : {
          "login" : "akalburgi",
          "name" : "Anup Kalburgi",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/42743833?v=4"
        },
        "body" : "Done ",
        "createdAt" : "2019-07-12T14:46:30Z",
        "updatedAt" : "2019-07-12T14:46:46Z",
        "lastEditedBy" : {
          "login" : "akalburgi",
          "name" : "Anup Kalburgi",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/42743833?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "02aebbe3458fcf83dfc3b16ff7d3af76a9e53b09",
    "line" : 92,
    "diffHunk" : "@@ -125,14 +127,17 @@ constructSubgraphsWithLables lookupData tpla@TemplateChoices {..} = SubGraph nod\n         nodes = map (\\(chc, _) -> (chc, nodeIdForChoice lookupData chc)) choicesInTemplete\n         nodesWithCreate = nodes ++ [addCreateChoice tpla lookupData]\n \n-actionToChoice :: LF.Template -> Action -> LF.ChoiceName\n-actionToChoice tpl (ACreate _) = LF.ChoiceName $ tplName tpl <> \"_Create\"\n-actionToChoice tpl (AExercise _ (LF.ChoiceName \"Archive\")) = LF.ChoiceName $ tplName tpl <> \"_Archive\"\n-actionToChoice _tpl (AExercise _ chc) = chc\n+tplNamet :: LF.TypeConName -> T.Text\n+tplNamet tplConName = head (LF.unTypeConName tplConName)\n+\n+actionToChoice :: Action -> LF.ChoiceName\n+actionToChoice (ACreate LF.Qualified {..}) = LF.ChoiceName $ tplNamet qualObject <> \"_Create\"\n+actionToChoice (AExercise LF.Qualified {..} (LF.ChoiceName \"Archive\")) = LF.ChoiceName $ tplNamet qualObject <> \"_Archive\"\n+actionToChoice (AExercise _ chc) = chc\n \n choiceActionToChoicePairs :: ChoiceAndAction -> [(LF.ChoiceName, LF.ChoiceName)]\n choiceActionToChoicePairs cha@ChoiceAndAction {..} = pairs\n-    where pairs = map (\\ac -> (fst $ extractChoiceData cha, actionToChoice choiceForTemplate ac)) (Set.elems actions)\n+    where pairs = map (\\ac -> (fst $ extractChoiceData cha, actionToChoice ac)) (Set.elems actions)"
  },
  {
    "id" : "fcd75279-4986-475b-932e-1855669797ce",
    "prId" : 2079,
    "comments" : [
      {
        "id" : "07eab0e2-05f6-4d9d-8703-d37db6482c55",
        "parentId" : null,
        "author" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "body" : "```suggestion\r\n  where choicesInTemplate = map handleChoiceAndAction choiceAndAction\r\n```",
        "createdAt" : "2019-07-09T19:54:06Z",
        "updatedAt" : "2019-07-10T15:37:37Z",
        "lastEditedBy" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "5c9881259fe5c8aa716cfa45994304282d93d71b",
    "line" : null,
    "diffHunk" : "@@ -81,42 +81,49 @@ darToWorld manifest pkg = AST.initWorldSelf pkgs pkg\n tplName :: LF.Template -> T.Text\n tplName LF.Template {..} = head (LF.unTypeConName tplTypeCon)\n \n-handleChoiceAndAction :: ChoiceAndAction -> LF.ChoiceName\n+handleChoiceAndAction :: ChoiceAndAction -> (LF.ChoiceName, IsConsuming)\n handleChoiceAndAction (ChoiceAndAction tpl choice _)\n-    | LF.chcName choice == LF.ChoiceName \"Create\" = LF.ChoiceName $ tplName tpl <> \"_Create\"\n-    | LF.chcName choice == LF.ChoiceName \"Archive\" = LF.ChoiceName $ tplName tpl <> \"_Archive\"\n-    | otherwise = LF.chcName choice\n+    | LF.chcName choice == LF.ChoiceName \"Create\" = (LF.ChoiceName $ tplName tpl <> \"_Create\", False)\n+    | LF.chcName choice == LF.ChoiceName \"Archive\" = (LF.ChoiceName $ tplName tpl <> \"_Archive\", True)\n+    | otherwise = (LF.chcName choice, LF.chcConsuming choice)\n \n+type IsConsuming = Bool\n -- Making choiceName is very weird\n-handleCreateAndArchive :: TemplateChoiceAction -> [LF.ChoiceName]\n+handleCreateAndArchive :: TemplateChoiceAction -> [(LF.ChoiceName, IsConsuming)]\n handleCreateAndArchive TemplateChoiceAction {..} = [createChoice, archiveChoice] ++ map handleChoiceAndAction choiceAndAction\n-    where archiveChoice = LF.ChoiceName $ tplName template <> \"_Archive\"\n-          createChoice = LF.ChoiceName $ tplName template <> \"_Create\"\n+    where archiveChoice = (LF.ChoiceName $ tplName template <> \"_Archive\", True)\n+          createChoice = (LF.ChoiceName $ tplName template <> \"_Create\", False)\n \n+data ChoiceStyle = ChoiceStyle\n+    { nodeId :: Int\n+    , consuming :: Bool\n+    }\n -- This is used to generate the node ids and use as look up table\n-choiceNameWithId :: [TemplateChoiceAction] -> Map.Map LF.ChoiceName Int\n-choiceNameWithId tplChcActions = Map.fromList $ zip choiceActions [0..]\n+\n+choiceNameWithId :: [TemplateChoiceAction] -> Map.Map LF.ChoiceName ChoiceStyle\n+choiceNameWithId tplChcActions = Map.fromList choiceWithIds\n   where choiceActions = concatMap handleCreateAndArchive tplChcActions\n+        choiceWithIds = map (\\ ((cName, consume) , id) -> (cName, ChoiceStyle id consume) ) $ zip choiceActions [0..]\n \n-nodeIdForChoice :: Map.Map LF.ChoiceName Int -> LF.ChoiceName -> Int\n+nodeIdForChoice :: Map.Map LF.ChoiceName ChoiceStyle -> LF.ChoiceName -> ChoiceStyle\n nodeIdForChoice nodeLookUp chc = case Map.lookup chc nodeLookUp of\n   Just node -> node\n   Nothing -> error \"Template node lookup failed\"\n \n -- probably storing the choice is a better Idea, as we can determine what kind of choice it is.\n data SubGraph = SubGraph\n-    { nodes :: [(LF.ChoiceName ,Int)]\n+    { nodes :: [(LF.ChoiceName, ChoiceStyle)]\n     , clusterTemplate :: LF.Template\n     }\n \n-addCreateChoice :: TemplateChoiceAction -> Map.Map LF.ChoiceName Int -> (LF.ChoiceName ,Int)\n+addCreateChoice :: TemplateChoiceAction -> Map.Map LF.ChoiceName ChoiceStyle -> (LF.ChoiceName, ChoiceStyle)\n addCreateChoice TemplateChoiceAction {..} lookupData = (tplNameCreateChoice, nodeIdForChoice lookupData tplNameCreateChoice)\n     where tplNameCreateChoice = LF.ChoiceName $ T.pack $ DAP.renderPretty (head (LF.unTypeConName (LF.tplTypeCon template))) ++ \"_Create\"\n \n-constructSubgraphsWithLables :: Map.Map LF.ChoiceName Int -> TemplateChoiceAction -> SubGraph\n+constructSubgraphsWithLables :: Map.Map LF.ChoiceName ChoiceStyle -> TemplateChoiceAction -> SubGraph\n constructSubgraphsWithLables lookupData tpla@TemplateChoiceAction {..} = SubGraph nodesWithCreate template\n   where choicesInTemplete = map handleChoiceAndAction choiceAndAction"
  },
  {
    "id" : "ffee5262-337a-4184-b673-a4820194d8da",
    "prId" : 2079,
    "comments" : [
      {
        "id" : "24bc80db-289c-4242-8645-1f056f68b3e2",
        "parentId" : null,
        "author" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "body" : "Is this the best name? More like `ChoiceData` or `ChoiceDetails` right? \"Style\" suggests cosmetic/formatting style to me",
        "createdAt" : "2019-07-09T19:56:19Z",
        "updatedAt" : "2019-07-10T15:37:37Z",
        "lastEditedBy" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "b7714ef9-4f95-4d86-bcaf-5aa840b608c8",
        "parentId" : "24bc80db-289c-4242-8645-1f056f68b3e2",
        "author" : {
          "login" : "akalburgi",
          "name" : "Anup Kalburgi",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/42743833?v=4"
        },
        "body" : "Renamed to ChoiceDetails",
        "createdAt" : "2019-07-10T15:19:02Z",
        "updatedAt" : "2019-07-10T15:37:37Z",
        "lastEditedBy" : {
          "login" : "akalburgi",
          "name" : "Anup Kalburgi",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/42743833?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "5c9881259fe5c8aa716cfa45994304282d93d71b",
    "line" : null,
    "diffHunk" : "@@ -81,42 +81,49 @@ darToWorld manifest pkg = AST.initWorldSelf pkgs pkg\n tplName :: LF.Template -> T.Text\n tplName LF.Template {..} = head (LF.unTypeConName tplTypeCon)\n \n-handleChoiceAndAction :: ChoiceAndAction -> LF.ChoiceName\n+handleChoiceAndAction :: ChoiceAndAction -> (LF.ChoiceName, IsConsuming)\n handleChoiceAndAction (ChoiceAndAction tpl choice _)\n-    | LF.chcName choice == LF.ChoiceName \"Create\" = LF.ChoiceName $ tplName tpl <> \"_Create\"\n-    | LF.chcName choice == LF.ChoiceName \"Archive\" = LF.ChoiceName $ tplName tpl <> \"_Archive\"\n-    | otherwise = LF.chcName choice\n+    | LF.chcName choice == LF.ChoiceName \"Create\" = (LF.ChoiceName $ tplName tpl <> \"_Create\", False)\n+    | LF.chcName choice == LF.ChoiceName \"Archive\" = (LF.ChoiceName $ tplName tpl <> \"_Archive\", True)\n+    | otherwise = (LF.chcName choice, LF.chcConsuming choice)\n \n+type IsConsuming = Bool\n -- Making choiceName is very weird\n-handleCreateAndArchive :: TemplateChoiceAction -> [LF.ChoiceName]\n+handleCreateAndArchive :: TemplateChoiceAction -> [(LF.ChoiceName, IsConsuming)]\n handleCreateAndArchive TemplateChoiceAction {..} = [createChoice, archiveChoice] ++ map handleChoiceAndAction choiceAndAction\n-    where archiveChoice = LF.ChoiceName $ tplName template <> \"_Archive\"\n-          createChoice = LF.ChoiceName $ tplName template <> \"_Create\"\n+    where archiveChoice = (LF.ChoiceName $ tplName template <> \"_Archive\", True)\n+          createChoice = (LF.ChoiceName $ tplName template <> \"_Create\", False)\n \n+data ChoiceStyle = ChoiceStyle"
  },
  {
    "id" : "5f3a098a-0920-4595-b3a2-499034ae87a4",
    "prId" : 2079,
    "comments" : [
      {
        "id" : "ce609cac-b6fd-4577-a097-d7e07dc874ae",
        "parentId" : null,
        "author" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "body" : "Why can't we use `Lf.chcConsuming` for Create and Archive? What is the value for those?",
        "createdAt" : "2019-07-09T19:59:00Z",
        "updatedAt" : "2019-07-10T15:37:37Z",
        "lastEditedBy" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "5c9881259fe5c8aa716cfa45994304282d93d71b",
    "line" : null,
    "diffHunk" : "@@ -81,42 +81,49 @@ darToWorld manifest pkg = AST.initWorldSelf pkgs pkg\n tplName :: LF.Template -> T.Text\n tplName LF.Template {..} = head (LF.unTypeConName tplTypeCon)\n \n-handleChoiceAndAction :: ChoiceAndAction -> LF.ChoiceName\n+handleChoiceAndAction :: ChoiceAndAction -> (LF.ChoiceName, IsConsuming)\n handleChoiceAndAction (ChoiceAndAction tpl choice _)\n-    | LF.chcName choice == LF.ChoiceName \"Create\" = LF.ChoiceName $ tplName tpl <> \"_Create\"\n-    | LF.chcName choice == LF.ChoiceName \"Archive\" = LF.ChoiceName $ tplName tpl <> \"_Archive\"\n-    | otherwise = LF.chcName choice\n+    | LF.chcName choice == LF.ChoiceName \"Create\" = (LF.ChoiceName $ tplName tpl <> \"_Create\", False)\n+    | LF.chcName choice == LF.ChoiceName \"Archive\" = (LF.ChoiceName $ tplName tpl <> \"_Archive\", True)\n+    | otherwise = (LF.chcName choice, LF.chcConsuming choice)"
  },
  {
    "id" : "d96b3946-1d48-4007-bec0-84595d498ae1",
    "prId" : 2079,
    "comments" : [
      {
        "id" : "fd6bfe65-461c-4b47-a780-d611057ca1fd",
        "parentId" : null,
        "author" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "body" : "I would put all these type definitions at the top of the file, preferably in some kind of logical order.",
        "createdAt" : "2019-07-09T20:05:59Z",
        "updatedAt" : "2019-07-10T15:37:37Z",
        "lastEditedBy" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "37ac8f23-f93c-40c7-8c6a-15c7e03c0676",
        "parentId" : "fd6bfe65-461c-4b47-a780-d611057ca1fd",
        "author" : {
          "login" : "akalburgi",
          "name" : "Anup Kalburgi",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/42743833?v=4"
        },
        "body" : "Yup moved these up",
        "createdAt" : "2019-07-10T15:30:31Z",
        "updatedAt" : "2019-07-10T15:37:37Z",
        "lastEditedBy" : {
          "login" : "akalburgi",
          "name" : "Anup Kalburgi",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/42743833?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "5c9881259fe5c8aa716cfa45994304282d93d71b",
    "line" : null,
    "diffHunk" : "@@ -81,42 +81,49 @@ darToWorld manifest pkg = AST.initWorldSelf pkgs pkg\n tplName :: LF.Template -> T.Text\n tplName LF.Template {..} = head (LF.unTypeConName tplTypeCon)\n \n-handleChoiceAndAction :: ChoiceAndAction -> LF.ChoiceName\n+handleChoiceAndAction :: ChoiceAndAction -> (LF.ChoiceName, IsConsuming)\n handleChoiceAndAction (ChoiceAndAction tpl choice _)\n-    | LF.chcName choice == LF.ChoiceName \"Create\" = LF.ChoiceName $ tplName tpl <> \"_Create\"\n-    | LF.chcName choice == LF.ChoiceName \"Archive\" = LF.ChoiceName $ tplName tpl <> \"_Archive\"\n-    | otherwise = LF.chcName choice\n+    | LF.chcName choice == LF.ChoiceName \"Create\" = (LF.ChoiceName $ tplName tpl <> \"_Create\", False)\n+    | LF.chcName choice == LF.ChoiceName \"Archive\" = (LF.ChoiceName $ tplName tpl <> \"_Archive\", True)\n+    | otherwise = (LF.chcName choice, LF.chcConsuming choice)\n \n+type IsConsuming = Bool\n -- Making choiceName is very weird\n-handleCreateAndArchive :: TemplateChoiceAction -> [LF.ChoiceName]\n+handleCreateAndArchive :: TemplateChoiceAction -> [(LF.ChoiceName, IsConsuming)]\n handleCreateAndArchive TemplateChoiceAction {..} = [createChoice, archiveChoice] ++ map handleChoiceAndAction choiceAndAction\n-    where archiveChoice = LF.ChoiceName $ tplName template <> \"_Archive\"\n-          createChoice = LF.ChoiceName $ tplName template <> \"_Create\"\n+    where archiveChoice = (LF.ChoiceName $ tplName template <> \"_Archive\", True)\n+          createChoice = (LF.ChoiceName $ tplName template <> \"_Create\", False)\n \n+data ChoiceStyle = ChoiceStyle\n+    { nodeId :: Int\n+    , consuming :: Bool\n+    }\n -- This is used to generate the node ids and use as look up table\n-choiceNameWithId :: [TemplateChoiceAction] -> Map.Map LF.ChoiceName Int\n-choiceNameWithId tplChcActions = Map.fromList $ zip choiceActions [0..]\n+\n+choiceNameWithId :: [TemplateChoiceAction] -> Map.Map LF.ChoiceName ChoiceStyle\n+choiceNameWithId tplChcActions = Map.fromList choiceWithIds\n   where choiceActions = concatMap handleCreateAndArchive tplChcActions\n+        choiceWithIds = map (\\ ((cName, consume) , id) -> (cName, ChoiceStyle id consume) ) $ zip choiceActions [0..]\n \n-nodeIdForChoice :: Map.Map LF.ChoiceName Int -> LF.ChoiceName -> Int\n+nodeIdForChoice :: Map.Map LF.ChoiceName ChoiceStyle -> LF.ChoiceName -> ChoiceStyle\n nodeIdForChoice nodeLookUp chc = case Map.lookup chc nodeLookUp of\n   Just node -> node\n   Nothing -> error \"Template node lookup failed\"\n \n -- probably storing the choice is a better Idea, as we can determine what kind of choice it is.\n data SubGraph = SubGraph\n-    { nodes :: [(LF.ChoiceName ,Int)]\n+    { nodes :: [(LF.ChoiceName, ChoiceStyle)]\n     , clusterTemplate :: LF.Template\n     }"
  },
  {
    "id" : "6f4663d9-02eb-454e-90a5-03b6f22fe8ed",
    "prId" : 2079,
    "comments" : [
      {
        "id" : "310e1556-6ece-4549-9846-018b30c9607c",
        "parentId" : null,
        "author" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "body" : "```suggestion\r\n        choiceWithIds = map (\\((cName, consume), id) -> (cName, ChoiceStyle id consume)) $ zip choiceActions [0..]\r\n```",
        "createdAt" : "2019-07-09T20:09:16Z",
        "updatedAt" : "2019-07-10T15:37:37Z",
        "lastEditedBy" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "5c9881259fe5c8aa716cfa45994304282d93d71b",
    "line" : null,
    "diffHunk" : "@@ -81,42 +81,49 @@ darToWorld manifest pkg = AST.initWorldSelf pkgs pkg\n tplName :: LF.Template -> T.Text\n tplName LF.Template {..} = head (LF.unTypeConName tplTypeCon)\n \n-handleChoiceAndAction :: ChoiceAndAction -> LF.ChoiceName\n+handleChoiceAndAction :: ChoiceAndAction -> (LF.ChoiceName, IsConsuming)\n handleChoiceAndAction (ChoiceAndAction tpl choice _)\n-    | LF.chcName choice == LF.ChoiceName \"Create\" = LF.ChoiceName $ tplName tpl <> \"_Create\"\n-    | LF.chcName choice == LF.ChoiceName \"Archive\" = LF.ChoiceName $ tplName tpl <> \"_Archive\"\n-    | otherwise = LF.chcName choice\n+    | LF.chcName choice == LF.ChoiceName \"Create\" = (LF.ChoiceName $ tplName tpl <> \"_Create\", False)\n+    | LF.chcName choice == LF.ChoiceName \"Archive\" = (LF.ChoiceName $ tplName tpl <> \"_Archive\", True)\n+    | otherwise = (LF.chcName choice, LF.chcConsuming choice)\n \n+type IsConsuming = Bool\n -- Making choiceName is very weird\n-handleCreateAndArchive :: TemplateChoiceAction -> [LF.ChoiceName]\n+handleCreateAndArchive :: TemplateChoiceAction -> [(LF.ChoiceName, IsConsuming)]\n handleCreateAndArchive TemplateChoiceAction {..} = [createChoice, archiveChoice] ++ map handleChoiceAndAction choiceAndAction\n-    where archiveChoice = LF.ChoiceName $ tplName template <> \"_Archive\"\n-          createChoice = LF.ChoiceName $ tplName template <> \"_Create\"\n+    where archiveChoice = (LF.ChoiceName $ tplName template <> \"_Archive\", True)\n+          createChoice = (LF.ChoiceName $ tplName template <> \"_Create\", False)\n \n+data ChoiceStyle = ChoiceStyle\n+    { nodeId :: Int\n+    , consuming :: Bool\n+    }\n -- This is used to generate the node ids and use as look up table\n-choiceNameWithId :: [TemplateChoiceAction] -> Map.Map LF.ChoiceName Int\n-choiceNameWithId tplChcActions = Map.fromList $ zip choiceActions [0..]\n+\n+choiceNameWithId :: [TemplateChoiceAction] -> Map.Map LF.ChoiceName ChoiceStyle\n+choiceNameWithId tplChcActions = Map.fromList choiceWithIds\n   where choiceActions = concatMap handleCreateAndArchive tplChcActions\n+        choiceWithIds = map (\\ ((cName, consume) , id) -> (cName, ChoiceStyle id consume) ) $ zip choiceActions [0..]"
  },
  {
    "id" : "18f981b3-890b-4fdb-8116-94449fd1ab16",
    "prId" : 2079,
    "comments" : [
      {
        "id" : "2a0e2d10-7457-414d-b495-10c5cb411c2f",
        "parentId" : null,
        "author" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "body" : "I'm finding the relationship between this function and the one for ChoiceAndAction a bit hard to understand. It seems like there is some duplication here - is that for a good reason?",
        "createdAt" : "2019-07-09T20:14:47Z",
        "updatedAt" : "2019-07-10T15:37:37Z",
        "lastEditedBy" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "c3fa1747-97e3-4320-bceb-0f65289ab8f0",
        "parentId" : "2a0e2d10-7457-414d-b495-10c5cb411c2f",
        "author" : {
          "login" : "akalburgi",
          "name" : "Anup Kalburgi",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/42743833?v=4"
        },
        "body" : "We changed this yesterday.",
        "createdAt" : "2019-07-10T16:02:28Z",
        "updatedAt" : "2019-07-10T16:02:28Z",
        "lastEditedBy" : {
          "login" : "akalburgi",
          "name" : "Anup Kalburgi",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/42743833?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "5c9881259fe5c8aa716cfa45994304282d93d71b",
    "line" : null,
    "diffHunk" : "@@ -81,42 +81,49 @@ darToWorld manifest pkg = AST.initWorldSelf pkgs pkg\n tplName :: LF.Template -> T.Text\n tplName LF.Template {..} = head (LF.unTypeConName tplTypeCon)\n \n-handleChoiceAndAction :: ChoiceAndAction -> LF.ChoiceName\n+handleChoiceAndAction :: ChoiceAndAction -> (LF.ChoiceName, IsConsuming)\n handleChoiceAndAction (ChoiceAndAction tpl choice _)\n-    | LF.chcName choice == LF.ChoiceName \"Create\" = LF.ChoiceName $ tplName tpl <> \"_Create\"\n-    | LF.chcName choice == LF.ChoiceName \"Archive\" = LF.ChoiceName $ tplName tpl <> \"_Archive\"\n-    | otherwise = LF.chcName choice\n+    | LF.chcName choice == LF.ChoiceName \"Create\" = (LF.ChoiceName $ tplName tpl <> \"_Create\", False)\n+    | LF.chcName choice == LF.ChoiceName \"Archive\" = (LF.ChoiceName $ tplName tpl <> \"_Archive\", True)\n+    | otherwise = (LF.chcName choice, LF.chcConsuming choice)\n \n+type IsConsuming = Bool\n -- Making choiceName is very weird\n-handleCreateAndArchive :: TemplateChoiceAction -> [LF.ChoiceName]\n+handleCreateAndArchive :: TemplateChoiceAction -> [(LF.ChoiceName, IsConsuming)]\n handleCreateAndArchive TemplateChoiceAction {..} = [createChoice, archiveChoice] ++ map handleChoiceAndAction choiceAndAction\n-    where archiveChoice = LF.ChoiceName $ tplName template <> \"_Archive\"\n-          createChoice = LF.ChoiceName $ tplName template <> \"_Create\"\n+    where archiveChoice = (LF.ChoiceName $ tplName template <> \"_Archive\", True)\n+          createChoice = (LF.ChoiceName $ tplName template <> \"_Create\", False)"
  },
  {
    "id" : "0e40a4f2-609f-466d-8e20-ce9ac19bbb86",
    "prId" : 2079,
    "comments" : [
      {
        "id" : "1486f3cc-5ec6-4390-bc93-a4e999a07d3a",
        "parentId" : null,
        "author" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "body" : "bad change here",
        "createdAt" : "2019-07-09T20:16:11Z",
        "updatedAt" : "2019-07-10T15:37:37Z",
        "lastEditedBy" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "e37c2c29-9a2c-485e-ac30-ec9d1a86fd3b",
        "parentId" : "1486f3cc-5ec6-4390-bc93-a4e999a07d3a",
        "author" : {
          "login" : "akalburgi",
          "name" : "Anup Kalburgi",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/42743833?v=4"
        },
        "body" : ":( ",
        "createdAt" : "2019-07-10T15:32:39Z",
        "updatedAt" : "2019-07-10T15:37:37Z",
        "lastEditedBy" : {
          "login" : "akalburgi",
          "name" : "Anup Kalburgi",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/42743833?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "5c9881259fe5c8aa716cfa45994304282d93d71b",
    "line" : null,
    "diffHunk" : "@@ -156,7 +159,7 @@ subGraphCluster SubGraph {..} = subGraphHeader clusterTemplate ++ unlines (map s\n \n -- TODO Later on should decorate the edge too\n drawEdge :: ChoiceStyle -> ChoiceStyle -> String\n-drawEdge n1 n2 = \"n\" ++ show (nodeId n1) ++ \"->\" ++ \"n\" ++ show (nodeId n2)\n+drawEdge n1 n2 = \"n\" ++ show (nodeId n1)  ++ \"->\" ++ \"n\" ++ show (nodeId n2)"
  },
  {
    "id" : "81e56f90-3dd4-43fd-86dd-efbb0992609a",
    "prId" : 2079,
    "comments" : [
      {
        "id" : "181d50bf-eefc-4b03-a54b-28739d66b2e4",
        "parentId" : null,
        "author" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "body" : "This is a little strange. Is `Bool` supposed to be `IsConsuming`? You can also use a new data type `data Consumption = Consuming | NonConsuming` to avoid this kind of thing.",
        "createdAt" : "2019-07-09T20:19:02Z",
        "updatedAt" : "2019-07-10T15:37:37Z",
        "lastEditedBy" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "ee9067ff-1cc1-448c-add8-199f90f4ff14",
        "parentId" : "181d50bf-eefc-4b03-a54b-28739d66b2e4",
        "author" : {
          "login" : "akalburgi",
          "name" : "Anup Kalburgi",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/42743833?v=4"
        },
        "body" : "Thanks that should have been `IsConsuming`",
        "createdAt" : "2019-07-09T20:33:36Z",
        "updatedAt" : "2019-07-10T15:37:37Z",
        "lastEditedBy" : {
          "login" : "akalburgi",
          "name" : "Anup Kalburgi",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/42743833?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "5c9881259fe5c8aa716cfa45994304282d93d71b",
    "line" : null,
    "diffHunk" : "@@ -143,9 +143,12 @@ graphEdges lookupData tplChcActions = map (\\(chn1, chn2) -> (nodeIdForChoice loo\n subGraphHeader :: LF.Template -> String\n subGraphHeader tpl = \"subgraph cluster_\" ++ (DAP.renderPretty $ head (LF.unTypeConName $ LF.tplTypeCon tpl)) ++ \"{\\n\"\n \n+choiceStyleColorCode :: Bool -> String\n+choiceStyleColorCode True = \"red\"\n+choiceStyleColorCode False = \"green\""
  }
]