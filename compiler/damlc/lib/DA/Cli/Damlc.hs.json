[
  {
    "id" : "df1ee427-1089-40d8-83b4-df148bf036f1",
    "prId" : 7466,
    "comments" : [
      {
        "id" : "2f0c4913-1c31-470a-8dbe-e2ec31c223b7",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "```suggestion\r\n       progDesc \"Deprecated. Compile the DAML program into a DAR\"\r\n```\r\nThis is consistent with the format @bame-da introduced in https://github.com/digital-asset/daml/pull/7458/files.",
        "createdAt" : "2020-09-23T12:47:58Z",
        "updatedAt" : "2020-09-24T09:44:50Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "3e6546a9e07f9fb8c292cc9d6fc4cc2f4cd61b55",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +362,366 @@cmdPackage numProcessors =\n    command \"package\" $ info (helper <*> cmd) $\n       progDesc \"Compile the DAML program into a DAR (deprecated)\"\n    <> fullDesc\n  where"
  },
  {
    "id" : "a40c6dfd-e89a-48bd-896d-a08f3242c014",
    "prId" : 4660,
    "comments" : [
      {
        "id" : "b4d86f3e-09b5-4a72-bea0-fe227e724852",
        "parentId" : null,
        "author" : null,
        "body" : "It might be nice to add the rest of the project's dependencies/data-dependencies as well (if we're in a project), in the future.",
        "createdAt" : "2020-02-24T09:45:16Z",
        "updatedAt" : "2020-02-24T10:04:46Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "10c640b4-79e3-41f6-ac3c-071d9d7a7962",
        "parentId" : "b4d86f3e-09b5-4a72-bea0-fe227e724852",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Yeah, either that or at least add CLI flags for adding new dependencies/data-dependencies. We also need to support adding imports.",
        "createdAt" : "2020-02-24T10:06:20Z",
        "updatedAt" : "2020-02-24T10:06:21Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "760346aad542cb7fd96ef1141ec51bc525702a51",
    "line" : 73,
    "diffHunk" : "@@ -1,1 +615,619 @@                    , \"version: 0.0.1\"\n                    , \"source: .\"\n                    , \"dependencies:\"\n                    , \"- daml-prim\"\n                    , \"- daml-stdlib\""
  },
  {
    "id" : "ed1b6aca-c501-492f-abcb-4af50721dc85",
    "prId" : 4648,
    "comments" : [
      {
        "id" : "03d0af51-077f-4d8c-bd26-26f46674cdb9",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Note that this is not actually changing anything, it just makes it a bit more explicit. I thought you might be able to inject `version: null` in a `daml.yaml` but the check in `queryProjectConfigRequired` treats `null` and the absence of a field identical.",
        "createdAt" : "2020-02-21T10:35:35Z",
        "updatedAt" : "2020-02-21T10:35:39Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "8afff54f07edf4c4983b62e012c1bf961f504ef9",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +483,487 @@    pSrc <- queryProjectConfigRequired [\"source\"] project\n    pExposedModules <- queryProjectConfig [\"exposed-modules\"] project\n    pVersion <- Just <$> queryProjectConfigRequired [\"version\"] project\n    pDependencies <- queryProjectConfigRequired [\"dependencies\"] project\n    pDataDependencies <- fromMaybe [] <$> queryProjectConfig [\"data-dependencies\"] project"
  },
  {
    "id" : "d9fb4aa2-ef88-4522-8440-6d004e391989",
    "prId" : 4213,
    "comments" : [
      {
        "id" : "1da410d1-9535-4c49-a9a7-ad86cf474db0",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "@cocreature Is this too permissive? What's the right place to add tests for this?",
        "createdAt" : "2020-01-24T22:43:47Z",
        "updatedAt" : "2020-01-28T15:01:36Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "87f780a6-cc89-49e4-8b12-5d5c8fa71ad7",
        "parentId" : "1da410d1-9535-4c49-a9a7-ad86cf474db0",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Should be fine I think. I don’t see any options that are less useful for `damlc ide` than they are for `damlc build`. Not sure what good tests for this would be. We have tests for the config parser but I think the parser is not the issue here. I guess you could extend the LSP tests to check different flag combinations but I’m fine to not have tests for this now.",
        "createdAt" : "2020-01-24T22:48:40Z",
        "updatedAt" : "2020-01-28T15:01:36Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "ba81e7635187faae2df66e955a5426793eb7a1df",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +127,131 @@        <*> debugOpt\n        <*> enableScenarioOpt\n        <*> optionsParser numProcessors (EnableScenarioService True) (pure Nothing)\n\ncmdLicense :: Mod CommandFields Command"
  },
  {
    "id" : "93436f74-7121-4c59-ad53-46b8f9b9c59e",
    "prId" : 4182,
    "comments" : [
      {
        "id" : "d28c8da9-695e-46b2-af32-d5879a262161",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Not necessary to address this in this PR but some type signatures for these maps might be nice.",
        "createdAt" : "2020-01-27T09:36:15Z",
        "updatedAt" : "2020-01-27T09:37:26Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "06a85e217d7504649cf6665d6b337fcafda3e85b",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +813,817 @@            pure (dalfPkgMap, stableDalfPkgMap)\n\n        let allDalfPkgs =\n                [ (unitId, dalfPkg)\n                | ((unitId, _modName), dalfPkg) <- MS.toList stableDalfPkgMap ]"
  },
  {
    "id" : "de212a65-8944-48a9-a473-8a773d71065c",
    "prId" : 4051,
    "comments" : [
      {
        "id" : "11032192-547c-4f08-a5c2-48ab20877f84",
        "parentId" : null,
        "author" : null,
        "body" : "Surprised `either fail pure` isn't in extra. It's `requiredE` in the assistant codebase (± exception handling details), but that is neither here nor there.",
        "createdAt" : "2020-01-15T11:05:51Z",
        "updatedAt" : "2020-01-15T11:06:04Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "8070c0fdb1b2bbc5b95267b94fb75adedc260b6a",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +637,641 @@        let archive = ZipArchive.toArchive $ BSL.fromStrict dar\n        manifest <- either fail pure $ readDalfManifest archive\n        dalfs <- either fail pure $ readDalfs archive\n        pure (BSL.toStrict $ mainDalf dalfs, takeBaseName $ mainDalfPath manifest)\n  | otherwise = (, takeBaseName fp) <$> B.readFile fp"
  },
  {
    "id" : "39eab2e7-fe9e-4029-afe2-561e44577580",
    "prId" : 3503,
    "comments" : [
      {
        "id" : "65e6b8e9-a0cc-4caa-8c09-c249ca16597e",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "We should come up with a better syntax for those flags or just give up and accept them as JSON or something like that. Fine to do that separately given that I hope nobody specifies this manually :slightly_smiling_face: ",
        "createdAt" : "2019-11-18T12:29:51Z",
        "updatedAt" : "2019-11-18T20:20:05Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "1b403e15-8a71-44a2-a9cb-6180a023aa4e",
        "parentId" : "65e6b8e9-a0cc-4caa-8c09-c249ca16597e",
        "author" : {
          "login" : "robin-da",
          "name" : "Robin Krom",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/14074936?u=1b47fdbdfd82ea534219fc1b94d646873c56a7d7&v=4"
        },
        "body" : "my favourite option would be to just use the ghc `package-id` flag and pass it through as ghc option.",
        "createdAt" : "2019-11-18T14:08:51Z",
        "updatedAt" : "2019-11-18T20:20:05Z",
        "lastEditedBy" : {
          "login" : "robin-da",
          "name" : "Robin Krom",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/14074936?u=1b47fdbdfd82ea534219fc1b94d646873c56a7d7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "e11899fa2735e5f9588b587ccc13106f6598a88d",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +689,693 @@          let eqModNamesStr = map (T.unpack . LF.moduleNameString) eqModNames\n          let buildOptions =\n                  [ \"'--package=\" <> show (\"instances-\" <> pkgName1, True, [(m, m ++ \"A\") | m <- eqModNamesStr]) <> \"'\"\n                  , \"'--package=\" <> show (\"instances-\" <> pkgName2, True, [(m, m ++ \"B\") | m <- eqModNamesStr]) <> \"'\"\n                  ]"
  },
  {
    "id" : "caa52f7b-8f48-465d-b9e9-c375efdd092f",
    "prId" : 3406,
    "comments" : [
      {
        "id" : "91764081-77a6-46fb-9ebe-9dab24ad837c",
        "parentId" : null,
        "author" : {
          "login" : "robin-da",
          "name" : "Robin Krom",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/14074936?u=1b47fdbdfd82ea534219fc1b94d646873c56a7d7&v=4"
        },
        "body" : "No need to rewrite self references here, the dalf won't be linked or typechecked and for code generation it's easier if you just have the PRSelf references and translate those to the unit it.",
        "createdAt" : "2019-11-10T12:54:59Z",
        "updatedAt" : "2019-11-10T18:38:25Z",
        "lastEditedBy" : {
          "login" : "robin-da",
          "name" : "Robin Krom",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/14074936?u=1b47fdbdfd82ea534219fc1b94d646873c56a7d7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "aada4ba363644b3ada5ab8ecb1443ad386c52708",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +555,559 @@            (pkgId, package) <-\n                either (fail . DA.Pretty.renderPretty) pure $\n                -- FIXME(MH): This keeps the old behaviour but seems wrong to me.\n                Archive.decodeArchive Archive.DecodeAsMain dalf\n            pure (pkgId, package, dalf, stringToUnitId name)"
  },
  {
    "id" : "77663355-02b9-4af5-9380-f059c5943e0d",
    "prId" : 3399,
    "comments" : [
      {
        "id" : "a1fca147-7236-4f52-87d2-e9e41a426703",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Why do we filter out `0.0.0`? The only case where I can see this being useful is immediately after a release where things are compatible for a very short amount of time. But that doesn’t seem like something anyone should rely on so I’d rather prevent it.",
        "createdAt" : "2019-11-08T12:23:48Z",
        "updatedAt" : "2019-11-08T14:53:30Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "ec77df3d-0ce9-4258-b35b-6d8798742d6c",
        "parentId" : "a1fca147-7236-4f52-87d2-e9e41a426703",
        "author" : {
          "login" : "robin-da",
          "name" : "Robin Krom",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/14074936?u=1b47fdbdfd82ea534219fc1b94d646873c56a7d7&v=4"
        },
        "body" : "It's there because otherwise the assistant integration tests will fail, when they import SDK packages (which have a different sdk version than 0.0.0). ",
        "createdAt" : "2019-11-08T14:10:16Z",
        "updatedAt" : "2019-11-08T14:53:30Z",
        "lastEditedBy" : {
          "login" : "robin-da",
          "name" : "Robin Krom",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/14074936?u=1b47fdbdfd82ea534219fc1b94d646873c56a7d7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "ef33d546-27da-4bd8-86ac-155ed6b4e42c",
        "parentId" : "a1fca147-7236-4f52-87d2-e9e41a426703",
        "author" : {
          "login" : "robin-da",
          "name" : "Robin Krom",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/14074936?u=1b47fdbdfd82ea534219fc1b94d646873c56a7d7&v=4"
        },
        "body" : "I added a comment, I'd like to drop it if somehow possible.",
        "createdAt" : "2019-11-08T14:13:04Z",
        "updatedAt" : "2019-11-08T14:53:30Z",
        "lastEditedBy" : {
          "login" : "robin-da",
          "name" : "Robin Krom",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/14074936?u=1b47fdbdfd82ea534219fc1b94d646873c56a7d7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "3d9851e204dcebd5655cc9f17cb2763d0fa1942c",
    "line" : 136,
    "diffHunk" : "@@ -1,1 +528,532 @@    deps <- handleSdkPackages $ filter (`notElem` basePackages) deps0\n    depsExtracted <- mapM extractDar deps\n    let uniqSdkVersions = nubSort $ filter (/= \"0.0.0\") $ thisSdkVer : map edSdkVersions depsExtracted\n    -- we filter the 0.0.0 version because otherwise integration tests fail that import SDK packages\n    unless (length uniqSdkVersions <= 1) $"
  },
  {
    "id" : "fcf23e58-c3ac-4a41-9beb-6a1cc32f13de",
    "prId" : 3399,
    "comments" : [
      {
        "id" : "b62b93ec-17d2-4846-866f-4eefb2be8d0c",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "I feel like these arguments would be easier if you inline it into the tuple, i..e,\r\n```\r\n[(m <> \"Instances\", m <> \"AInstances\") | m <- eqModNamesStr]\r\n```",
        "createdAt" : "2019-11-08T12:26:41Z",
        "updatedAt" : "2019-11-08T14:53:30Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "57c52681-b36e-4765-a56e-046babbd8998",
        "parentId" : "b62b93ec-17d2-4846-866f-4eefb2be8d0c",
        "author" : {
          "login" : "robin-da",
          "name" : "Robin Krom",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/14074936?u=1b47fdbdfd82ea534219fc1b94d646873c56a7d7&v=4"
        },
        "body" : "yes, why not!",
        "createdAt" : "2019-11-08T13:37:45Z",
        "updatedAt" : "2019-11-08T14:53:30Z",
        "lastEditedBy" : {
          "login" : "robin-da",
          "name" : "Robin Krom",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/14074936?u=1b47fdbdfd82ea534219fc1b94d646873c56a7d7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "3d9851e204dcebd5655cc9f17cb2763d0fa1942c",
    "line" : 300,
    "diffHunk" : "@@ -1,1 +1051,1055 @@                                          , [(m', m'')\n                                            | m <- eqModNamesStr\n                                            , let m' = m <> \"Instances\"\n                                            , let m'' = m <> \"AInstances\"\n                                            ]"
  },
  {
    "id" : "578afead-1f58-4502-a057-86568178e9d8",
    "prId" : 3399,
    "comments" : [
      {
        "id" : "bf21db9c-6079-416e-85a2-2689c1a08deb",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Same here.",
        "createdAt" : "2019-11-08T12:26:50Z",
        "updatedAt" : "2019-11-08T14:53:30Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "3d9851e204dcebd5655cc9f17cb2763d0fa1942c",
    "line" : 307,
    "diffHunk" : "@@ -1,1 +1056,1060 @@                                          ) <> \"'\"\n                  , \"'--package=\" <> show (\"instances-\" <> pkgName2\n                                          , [(m', m'')\n                                            | m <- eqModNamesStr\n                                            , let m' = m <> \"Instances\""
  },
  {
    "id" : "b86ce571-6832-4b75-ab8a-4239ecf37a31",
    "prId" : 3379,
    "comments" : [
      {
        "id" : "9fed526b-8a7f-4987-8190-360597e9a94b",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Why did this change?",
        "createdAt" : "2019-11-07T14:49:25Z",
        "updatedAt" : "2019-11-07T15:06:09Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "636a6071-86d9-42f6-9af0-cb97c74d79cf",
        "parentId" : "9fed526b-8a7f-4987-8190-360597e9a94b",
        "author" : {
          "login" : "robin-da",
          "name" : "Robin Krom",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/14074936?u=1b47fdbdfd82ea534219fc1b94d646873c56a7d7&v=4"
        },
        "body" : "We write the interfaces with `writeIfaceAndHie` in the next step. This way we don't do it two times.",
        "createdAt" : "2019-11-07T15:04:59Z",
        "updatedAt" : "2019-11-07T15:06:09Z",
        "lastEditedBy" : {
          "login" : "robin-da",
          "name" : "Robin Krom",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/14074936?u=1b47fdbdfd82ea534219fc1b94d646873c56a7d7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "7e9d2e43-a216-4bf8-bf20-a734b6968b21",
        "parentId" : "9fed526b-8a7f-4987-8190-360597e9a94b",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "So this was redundant before this PR as well? Makes sense in that case, thanks for the explanation!",
        "createdAt" : "2019-11-07T15:06:18Z",
        "updatedAt" : "2019-11-07T15:06:21Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "5e71ed49-b13e-4a2f-a3a6-582a1da55634",
        "parentId" : "9fed526b-8a7f-4987-8190-360597e9a94b",
        "author" : {
          "login" : "robin-da",
          "name" : "Robin Krom",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/14074936?u=1b47fdbdfd82ea534219fc1b94d646873c56a7d7&v=4"
        },
        "body" : "yes, this was redundant before.",
        "createdAt" : "2019-11-07T15:13:23Z",
        "updatedAt" : "2019-11-07T15:13:24Z",
        "lastEditedBy" : {
          "login" : "robin-da",
          "name" : "Robin Krom",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/14074936?u=1b47fdbdfd82ea534219fc1b94d646873c56a7d7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "a63b2d51d7218279407aef334b68a2efb59dadd2",
    "line" : 56,
    "diffHunk" : "@@ -1,1 +651,655 @@            mkOptions $\n            opts\n                { optWriteInterface = False\n                , optPackageDbs = projectPackageDatabase : optPackageDbs opts\n                , optIfaceDir = Nothing"
  },
  {
    "id" : "a00c6b58-68a5-4337-889e-78a7c766604c",
    "prId" : 3379,
    "comments" : [
      {
        "id" : "c974a44c-7759-4a9a-a8ba-d8d810c448a9",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Same question here, do we need no longer need `optIfaceDir`?",
        "createdAt" : "2019-11-07T14:51:43Z",
        "updatedAt" : "2019-11-07T15:06:09Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "865d3f31-db1a-4095-9813-bab0cc12d088",
        "parentId" : "c974a44c-7759-4a9a-a8ba-d8d810c448a9",
        "author" : {
          "login" : "robin-da",
          "name" : "Robin Krom",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/14074936?u=1b47fdbdfd82ea534219fc1b94d646873c56a7d7&v=4"
        },
        "body" : "same as above.",
        "createdAt" : "2019-11-07T15:05:15Z",
        "updatedAt" : "2019-11-07T15:06:09Z",
        "lastEditedBy" : {
          "login" : "robin-da",
          "name" : "Robin Krom",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/14074936?u=1b47fdbdfd82ea534219fc1b94d646873c56a7d7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "a63b2d51d7218279407aef334b68a2efb59dadd2",
    "line" : 58,
    "diffHunk" : "@@ -1,1 +653,657 @@                { optWriteInterface = False\n                , optPackageDbs = projectPackageDatabase : optPackageDbs opts\n                , optIfaceDir = Nothing\n                , optIsGenerated = True\n                , optDflagCheck = False"
  },
  {
    "id" : "0308d40c-b8ce-4507-93fd-a612947230fc",
    "prId" : 3379,
    "comments" : [
      {
        "id" : "aab91827-c160-4efd-8104-83a28e8f5a45",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "We do basically the same thing in `generateAndInstallInstancesPkg` so we should probably fix that one as well (fine to leave that for a separate PR).",
        "createdAt" : "2019-11-07T14:54:03Z",
        "updatedAt" : "2019-11-07T15:06:09Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "a63b2d51d7218279407aef334b68a2efb59dadd2",
    "line" : 32,
    "diffHunk" : "@@ -1,1 +612,616 @@\n                      unless (null templInstSrc) $\n                          generateAndInstallInstancesPkg\n                              templInstSrc\n                              opts"
  },
  {
    "id" : "749ffb84-1374-443a-9e92-4417aeb670ef",
    "prId" : 3358,
    "comments" : [
      {
        "id" : "caf78f40-b2d6-4f10-9f90-5b6f3177279b",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "I don’t understand this comment.",
        "createdAt" : "2019-11-06T14:33:51Z",
        "updatedAt" : "2019-11-06T17:52:03Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "fe6f1636-24c2-4a1d-a7b0-2ef17a614223",
        "parentId" : "caf78f40-b2d6-4f10-9f90-5b6f3177279b",
        "author" : {
          "login" : "robin-da",
          "name" : "Robin Krom",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/14074936?u=1b47fdbdfd82ea534219fc1b94d646873c56a7d7&v=4"
        },
        "body" : "we use two different zip libraries in Damlc. Here we write a zip archive generated with the first to disc and decode it with the second library. I want to just use one zip library in Damlc.hs",
        "createdAt" : "2019-11-06T14:47:18Z",
        "updatedAt" : "2019-11-06T17:52:03Z",
        "lastEditedBy" : {
          "login" : "robin-da",
          "name" : "Robin Krom",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/14074936?u=1b47fdbdfd82ea534219fc1b94d646873c56a7d7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "b2fc10fb-488f-42d1-a264-332eb7b4b6e7",
        "parentId" : "caf78f40-b2d6-4f10-9f90-5b6f3177279b",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Makes sense :+1:",
        "createdAt" : "2019-11-06T15:47:17Z",
        "updatedAt" : "2019-11-06T17:52:03Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "4b0aeb99ed4d3a42210e8653d7873d2ba828d51d",
    "line" : 108,
    "diffHunk" : "@@ -1,1 +740,744 @@                            (FromDalf False)\n                dar <- mbErr \"ERROR: Creation of instances DAR file failed.\" mbDar\n              -- TODO (drsk) switch to different zip library so we don't have to write\n              -- the dar.\n                let darFp = instancesUnitIdStr <.> \"dar\""
  },
  {
    "id" : "7b690063-e117-4f73-9a4f-0e3d4be71af1",
    "prId" : 3342,
    "comments" : [
      {
        "id" : "1e0b5b22-8dbf-4863-bfc2-53c6bc36e883",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Is there a reason why we can’t always go for the first case, even if the SDK versions are different? Either way we should document this in a comment.",
        "createdAt" : "2019-11-05T14:53:11Z",
        "updatedAt" : "2019-11-05T18:46:21Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "fa454d95-5176-4343-a11b-b06facc32c0b",
        "parentId" : "1e0b5b22-8dbf-4863-bfc2-53c6bc36e883",
        "author" : {
          "login" : "robin-da",
          "name" : "Robin Krom",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/14074936?u=1b47fdbdfd82ea534219fc1b94d646873c56a7d7&v=4"
        },
        "body" : "If we have different sdks we need to allow this with the flag --allow-different-sdks and also import the created instances modules with aliases. If not, we only need aliases for the modules of the two equally named packages. You can't add aliases for the instances modules in the later case, because they are not generated. I'll add a comment.",
        "createdAt" : "2019-11-05T16:10:33Z",
        "updatedAt" : "2019-11-05T18:46:21Z",
        "lastEditedBy" : {
          "login" : "robin-da",
          "name" : "Robin Krom",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/14074936?u=1b47fdbdfd82ea534219fc1b94d646873c56a7d7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "272818c92a48fbaf19707d743912199fcaf709f7",
    "line" : 446,
    "diffHunk" : "@@ -1,1 +981,985 @@          let buildOptions\n                  | differentSdks = buildOptions0 ++ buildOptions1\n                  | otherwise = buildOptions1\n          --If we have different sdks we need to allow this with the flag --allow-different-sdks and\n          --also import the created instances modules with aliases (their names clash). If not, we"
  },
  {
    "id" : "b694fee3-6199-4f56-91c7-e1ae7efe2839",
    "prId" : 3342,
    "comments" : [
      {
        "id" : "c2db746a-0a55-4d89-8990-68dc6ba08b4b",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "We now have a `generate-src` and a `generate-gen-src` command with `generate-src` accepting a DALF and `generate-gen-src` accepting a DAR. That seems like a rather confusing UX. Can we make them consistent?",
        "createdAt" : "2019-11-05T14:58:36Z",
        "updatedAt" : "2019-11-05T18:46:21Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "167fe2a4-c01c-4f04-902f-9ee38c9327cd",
        "parentId" : "c2db746a-0a55-4d89-8990-68dc6ba08b4b",
        "author" : {
          "login" : "robin-da",
          "name" : "Robin Krom",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/14074936?u=1b47fdbdfd82ea534219fc1b94d646873c56a7d7&v=4"
        },
        "body" : "I was thinking about it. But the use cases are a bit different. You typically will call generate-src if you want to debug something and wonder what source was created from the dalf. While you typically call generate-gen-src when you want generic instances in your migration project for your dars. If I would make the second input option a dalf as well, I'd force the user to unzip his packages.",
        "createdAt" : "2019-11-05T15:33:18Z",
        "updatedAt" : "2019-11-05T18:46:21Z",
        "lastEditedBy" : {
          "login" : "robin-da",
          "name" : "Robin Krom",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/14074936?u=1b47fdbdfd82ea534219fc1b94d646873c56a7d7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "272818c92a48fbaf19707d743912199fcaf709f7",
    "line" : 522,
    "diffHunk" : "@@ -1,1 +1083,1087 @@-- | Generate daml source files containing generic instances for data types.\nexecGenerateGenSrc :: FilePath -> Maybe String -> Maybe FilePath -> Command\nexecGenerateGenSrc darFp mbQual outDir = Command GenerateGenerics effect\n  where\n    effect = do"
  },
  {
    "id" : "780e5e6b-8f90-42e9-802a-cfb0f05cf7d5",
    "prId" : 3342,
    "comments" : [
      {
        "id" : "37ad880e-b0a3-4c85-93a3-20c7372e7c2d",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Do we need to change the work dir here? It looks like we can just pass in the directory and prefix the paths in `generateAndInstallIfaceFiles` which would imho be easier to understand and avoids modifying process-global state.",
        "createdAt" : "2019-11-05T15:01:16Z",
        "updatedAt" : "2019-11-05T18:46:21Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "44074e1b-a811-4d8a-8d6f-a32b33b8b6ee",
        "parentId" : "37ad880e-b0a3-4c85-93a3-20c7372e7c2d",
        "author" : {
          "login" : "robin-da",
          "name" : "Robin Krom",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/14074936?u=1b47fdbdfd82ea534219fc1b94d646873c56a7d7&v=4"
        },
        "body" : "I think we could do that but would prefer doing that in a separate PR to keep the noise of this already noisy PR lower.",
        "createdAt" : "2019-11-05T17:04:09Z",
        "updatedAt" : "2019-11-05T18:46:21Z",
        "lastEditedBy" : {
          "login" : "robin-da",
          "name" : "Robin Krom",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/14074936?u=1b47fdbdfd82ea534219fc1b94d646873c56a7d7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "272818c92a48fbaf19707d743912199fcaf709f7",
    "line" : 132,
    "diffHunk" : "@@ -1,1 +594,598 @@                      -- we change the working dir so that we get correct file paths for the\n                      -- interface files.\n                      withCurrentDirectory workDir $\n                          generateAndInstallIfaceFiles\n                              dalf"
  },
  {
    "id" : "4d82a3a7-ac4e-4a55-8cc4-f39aa84af6e6",
    "prId" : 3342,
    "comments" : [
      {
        "id" : "be4c3f51-d662-431a-a578-498abb974e8a",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Why do we compare versions rather than comparing package ids? The latter seems like a more robust solution.",
        "createdAt" : "2019-11-05T15:05:09Z",
        "updatedAt" : "2019-11-05T18:46:21Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "fd6b6489-1a33-45ff-b89e-68e0883b5c12",
        "parentId" : "be4c3f51-d662-431a-a578-498abb974e8a",
        "author" : {
          "login" : "robin-da",
          "name" : "Robin Krom",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/14074936?u=1b47fdbdfd82ea534219fc1b94d646873c56a7d7&v=4"
        },
        "body" : "we are not interested whether we have different package id's for the same package name, we want to know whether we have a mix of packages compiled with different sdks. Comparing package id's wouldn't work I think.",
        "createdAt" : "2019-11-05T15:34:47Z",
        "updatedAt" : "2019-11-05T18:46:21Z",
        "lastEditedBy" : {
          "login" : "robin-da",
          "name" : "Robin Krom",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/14074936?u=1b47fdbdfd82ea534219fc1b94d646873c56a7d7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "835d45ea-bde1-4e8a-8f56-d2d3f3c2555f",
        "parentId" : "be4c3f51-d662-431a-a578-498abb974e8a",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "I was thinking of comparing the package id of `daml-stdlib` not the main dalf.",
        "createdAt" : "2019-11-05T16:09:11Z",
        "updatedAt" : "2019-11-05T18:46:21Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "a10adf9f-7a13-486f-afea-c7f15ec655ee",
        "parentId" : "be4c3f51-d662-431a-a578-498abb974e8a",
        "author" : {
          "login" : "robin-da",
          "name" : "Robin Krom",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/14074936?u=1b47fdbdfd82ea534219fc1b94d646873c56a7d7&v=4"
        },
        "body" : "ah I see. so you would want to get the version of the `daml-stdlib` to figure out this sdk version or also of all dependencies (which would fail in the rare case that a a package doesn't depend on the daml-stdlib).",
        "createdAt" : "2019-11-05T16:20:38Z",
        "updatedAt" : "2019-11-05T18:46:21Z",
        "lastEditedBy" : {
          "login" : "robin-da",
          "name" : "Robin Krom",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/14074936?u=1b47fdbdfd82ea534219fc1b94d646873c56a7d7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "272818c92a48fbaf19707d743912199fcaf709f7",
    "line" : 422,
    "diffHunk" : "@@ -1,1 +960,964 @@                  (NM.names $ LF.packageModules lfPkg2)\n          thisSdkVer <- getSdkVersion\n          let differentSdks = (length $ nubSort [sdkVer1, sdkVer2, thisSdkVer]) /= 1\n          let eqModNamesStr = map (T.unpack . LF.moduleNameString) eqModNames\n          let buildOptions0 ="
  },
  {
    "id" : "69714abf-7fb9-486e-a4f5-181ffed53a07",
    "prId" : 3176,
    "comments" : [
      {
        "id" : "4bc9e5a6-64ff-427e-b1ba-ede47ccc5c5c",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "I guess deduplication of DALFs with the same package id happens at this step? probably worth pointing out in a comment.",
        "createdAt" : "2019-10-15T12:04:48Z",
        "updatedAt" : "2019-10-15T14:51:02Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "d5a7bb26-73cb-4d66-8703-cb9205838db3",
        "parentId" : "4bc9e5a6-64ff-427e-b1ba-ede47ccc5c5c",
        "author" : {
          "login" : "robin-da",
          "name" : "Robin Krom",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/14074936?u=1b47fdbdfd82ea534219fc1b94d646873c56a7d7&v=4"
        },
        "body" : "added a comment.",
        "createdAt" : "2019-10-15T12:38:41Z",
        "updatedAt" : "2019-10-15T14:51:02Z",
        "lastEditedBy" : {
          "login" : "robin-da",
          "name" : "Robin Krom",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/14074936?u=1b47fdbdfd82ea534219fc1b94d646873c56a7d7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "45fdc25e48bcb73c44106adba42b01b2161be66a",
    "line" : 85,
    "diffHunk" : "@@ -1,1 +558,562 @@              -- different unit id's, we would loose a unit id here.\n              let pkgMap =\n                      MS.fromList [(pkgId, unitId) | (pkgId, _pkg, _bs, unitId) <- pkgs]\n              -- order the packages in topological order\n              let (depGraph, vertexToNode, _keyToVertex) ="
  },
  {
    "id" : "a8e24bbf-b14a-46bc-b9e7-380b6c8c5886",
    "prId" : 3140,
    "comments" : [
      {
        "id" : "3c1006cf-916a-4f32-9d54-1da6a6f39c5c",
        "parentId" : null,
        "author" : null,
        "body" : "Would it be better to just have one case to compiling the package db, whether it be with one or multiple SDKs? I guess it would be slower...",
        "createdAt" : "2019-10-09T12:17:57Z",
        "updatedAt" : "2019-10-09T12:26:05Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "e338f0ea-4392-42bc-b6c2-852dec440309",
        "parentId" : "3c1006cf-916a-4f32-9d54-1da6a6f39c5c",
        "author" : {
          "login" : "robin-da",
          "name" : "Robin Krom",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/14074936?u=1b47fdbdfd82ea534219fc1b94d646873c56a7d7&v=4"
        },
        "body" : "That would be a lot slower.",
        "createdAt" : "2019-10-09T15:10:40Z",
        "updatedAt" : "2019-10-09T15:10:40Z",
        "lastEditedBy" : {
          "login" : "robin-da",
          "name" : "Robin Krom",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/14074936?u=1b47fdbdfd82ea534219fc1b94d646873c56a7d7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "3584292e-3678-47f0-9852-d2d2b2894ec4",
        "parentId" : "3c1006cf-916a-4f32-9d54-1da6a6f39c5c",
        "author" : null,
        "body" : "Does that mean the \"slow route\" is also taken for packages in the current SDK, as long as there is a single dependency from another SDK?",
        "createdAt" : "2019-10-09T15:23:57Z",
        "updatedAt" : "2019-10-09T15:23:58Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "9f3d7915-ab20-4df3-a4ab-85b5b1dec69e",
        "parentId" : "3c1006cf-916a-4f32-9d54-1da6a6f39c5c",
        "author" : {
          "login" : "robin-da",
          "name" : "Robin Krom",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/14074936?u=1b47fdbdfd82ea534219fc1b94d646873c56a7d7&v=4"
        },
        "body" : "currently that would just fail. but yes, as soon as you have cross sdk dependencies, we generate the interface files.",
        "createdAt" : "2019-10-09T15:39:52Z",
        "updatedAt" : "2019-10-09T15:39:52Z",
        "lastEditedBy" : {
          "login" : "robin-da",
          "name" : "Robin Krom",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/14074936?u=1b47fdbdfd82ea534219fc1b94d646873c56a7d7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "27bea24afe60cba9068df256b1e821564a3b0450",
    "line" : 269,
    "diffHunk" : "@@ -1,1 +556,560 @@                  ]\n       | length uniqSdkVersions > 1 && optAllowDifferentSdks opts ->\n            -- when we compile packages with different sdk versions, we need to generate the interface files\n           do loggerH <- getLogger opts \"generate interface files\"\n              pkgs <-"
  },
  {
    "id" : "dafec952-3e04-4845-a427-d26d60859a58",
    "prId" : 3129,
    "comments" : [
      {
        "id" : "de81effe-ffdb-4265-9463-4819a62dc3cb",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Should we add something like `-o output_directory`?",
        "createdAt" : "2019-10-08T13:09:15Z",
        "updatedAt" : "2019-10-08T14:02:37Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "4d8475ac-8cae-4d58-ad08-785cfe117c73",
        "parentId" : "de81effe-ffdb-4265-9463-4819a62dc3cb",
        "author" : {
          "login" : "robin-da",
          "name" : "Robin Krom",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/14074936?u=1b47fdbdfd82ea534219fc1b94d646873c56a7d7&v=4"
        },
        "body" : "let's keep it simple for now, I expect you create a directory where you put your dalf into and run this.",
        "createdAt" : "2019-10-08T13:57:22Z",
        "updatedAt" : "2019-10-08T14:02:37Z",
        "lastEditedBy" : {
          "login" : "robin-da",
          "name" : "Robin Krom",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/14074936?u=1b47fdbdfd82ea534219fc1b94d646873c56a7d7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "c5e37998edf3317adac5943b55b47b77ed37b228",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +311,315 @@    progDesc \"Generate DAML source code from a dalf package\" <> fullDesc\n  where\n    cmd = execGenerateSrc <$> inputDalfOpt\n\ncmdDocTest :: Int -> Mod CommandFields Command"
  },
  {
    "id" : "d19ed4da-4ce7-4bf5-be01-36252977f6c6",
    "prId" : 2772,
    "comments" : [
      {
        "id" : "fdf36b35-376b-436a-a411-8bd3135230f7",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "I wonder if we really want to allow all arguments here. The issue with that is that `daml build` accepts different options than `daml ide` so you can end up creating a `daml.yaml` that works with `daml build` but not with `daml ide`. In #2676 I suggested only allowing `--ghc-option` initially which avoids this issue and I would probably also make this logic specific to `execIde` and `execBuild` so we avoid issue with commands that don’t accept `--ghc-option`.",
        "createdAt" : "2019-09-05T14:06:16Z",
        "updatedAt" : "2019-09-10T14:38:02Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "d1da6e0c-f0df-4ce4-8650-5c23b0618701",
        "parentId" : "fdf36b35-376b-436a-a411-8bd3135230f7",
        "author" : {
          "login" : "garyverhaegen-da",
          "name" : "Gary Verhaegen",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/45561385?u=eb17386ea66edbd0cd449e33b2d291bf5a1b51cb&v=4"
        },
        "body" : "That all seems a lot harder to grasp as a mental model for users. \"Add these to all invocations of damlc\" seems plain enough, and matches the name `damlc-options`; \"Add these to only damlc ide and damlc build, and it only supports a subbset of the options they support, and we may change how this behaves in the future\" would seem a bit harder for me as a user. I would personally prefer the simple, straightforward behaviour even if it sometimes mean I end up cutting myself.",
        "createdAt" : "2019-09-05T16:00:28Z",
        "updatedAt" : "2019-09-10T14:38:02Z",
        "lastEditedBy" : {
          "login" : "garyverhaegen-da",
          "name" : "Gary Verhaegen",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/45561385?u=eb17386ea66edbd0cd449e33b2d291bf5a1b51cb&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "fc994c93-3646-4e08-a55d-29b732f94778",
        "parentId" : "fdf36b35-376b-436a-a411-8bd3135230f7",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "I’m fine with allowing arbitrary flags and expecting users to get this right but I believe that we do at least need to limit the commands affected by this.\r\nThere are some commands that do not support `--ghc-options` (e.g. `damlc visualize`) so you would literally be unable to have a `daml.yaml` that sets `--ghc-options` for `damlc build` and `damlc ide` while not breaking `damlc visualize`.",
        "createdAt" : "2019-09-05T16:15:33Z",
        "updatedAt" : "2019-09-10T14:38:02Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "ccad67cf98292f7fae9420c08748172e68348f0e",
    "line" : 922,
    "diffHunk" : "@@ -1,1 +1065,1069 @@    let parse = ParseArgs.lax (parserInfo numProcessors)\n    cliArgs <- getArgs\n    damlYamlArgs <- cliArgsFromDamlYaml\n    let (_, tempParseResult) = parse cliArgs\n    -- Note: need to parse given args first to decide whether we need to add"
  },
  {
    "id" : "f4ba8fe2-4aad-46bb-8bde-d3fb9e46d61c",
    "prId" : 2689,
    "comments" : [
      {
        "id" : "9ad8dfd7-ca81-4b6c-9018-9701245f89b8",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Do we actually still produce DARs that satisfy this assumption?",
        "createdAt" : "2019-08-28T13:25:20Z",
        "updatedAt" : "2019-08-28T13:40:09Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "7caff8dd-7d85-4afd-b1f0-75014da78074",
        "parentId" : "9ad8dfd7-ca81-4b6c-9018-9701245f89b8",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "I have no idea. Presumably @robin-da tested the merge command at some point :slightly_smiling_face: ",
        "createdAt" : "2019-08-28T13:27:41Z",
        "updatedAt" : "2019-08-28T13:40:09Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "e16d7577a743e12f1ffc9e47b2bc89c57762d6cc",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +823,827 @@                -- TODO This should use the proper manifest reader.\n                -- At the moment this relies on the fact that the input manifest\n                -- does not have Dalfs: entries that are split over multiple lines.\n                pure $ case BSL.stripPrefix \"Dalfs:\" l of\n                    Nothing -> l"
  },
  {
    "id" : "850e239c-d204-4d30-932b-134704a8db61",
    "prId" : 2629,
    "comments" : [
      {
        "id" : "8d35f99a-10ec-4e51-8a57-5e6287716c22",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Is that intended?",
        "createdAt" : "2019-08-22T09:39:22Z",
        "updatedAt" : "2019-08-22T12:39:39Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "530f3cc8-deda-4fed-8470-3510fe4f28d9",
        "parentId" : "8d35f99a-10ec-4e51-8a57-5e6287716c22",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Yes, we broke doctests when we switched the lexing mode to make HLint happy. We have tests but we only changed the options in the tests when they broke :man_facepalming: and not in doctest itself. I’ll look into adding an integration test that runs the actual executable on a failing doctest and verifies that it fails so this doesn’t happen again.",
        "createdAt" : "2019-08-22T09:42:02Z",
        "updatedAt" : "2019-08-22T12:39:39Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "87ad487b-83c4-4b77-b070-30faaf548a36",
        "parentId" : "8d35f99a-10ec-4e51-8a57-5e6287716c22",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Thanks for the explanation. Adding a test for this sounds good.",
        "createdAt" : "2019-08-22T09:43:30Z",
        "updatedAt" : "2019-08-22T12:39:39Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "072e2109-630b-4c97-b127-284b064b4c77",
        "parentId" : "8d35f99a-10ec-4e51-8a57-5e6287716c22",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Tests added",
        "createdAt" : "2019-08-22T10:52:45Z",
        "updatedAt" : "2019-08-22T12:39:39Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "7103266c3942f479ba4739f42007eef9dd83d308",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +841,845 @@        -- IdeState at the moment.\n        pure $ nubOrd $ mapMaybe moduleImportPaths pmS\n    opts <- mkOptions opts { optImportPath = importPaths <> optImportPath opts, optHaddock = Haddock True }\n    withDamlIdeState opts logger diagnosticsLogger $ \\ideState ->\n        docTest ideState files'"
  },
  {
    "id" : "811619dc-d842-42a3-8143-ce5e7720fbc0",
    "prId" : 2232,
    "comments" : [
      {
        "id" : "2721e622-f703-4a6f-a14a-e0847d040a08",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Might be a good idea to add a comment that you rely on the fact that `nubSortOn` keeps the first occurence.",
        "createdAt" : "2019-07-19T16:57:00Z",
        "updatedAt" : "2019-07-22T11:38:52Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "e0ea1c92-45cc-4a87-9dbf-7eaac7d2506d",
        "parentId" : "2721e622-f703-4a6f-a14a-e0847d040a08",
        "author" : {
          "login" : "robin-da",
          "name" : "Robin Krom",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/14074936?u=1b47fdbdfd82ea534219fc1b94d646873c56a7d7&v=4"
        },
        "body" : "done.",
        "createdAt" : "2019-07-22T11:37:27Z",
        "updatedAt" : "2019-07-22T11:38:52Z",
        "lastEditedBy" : {
          "login" : "robin-da",
          "name" : "Robin Krom",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/14074936?u=1b47fdbdfd82ea534219fc1b94d646873c56a7d7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "ff79e6096473d1f83a02cf14522304894fdc6fcf",
    "line" : 45,
    "diffHunk" : "@@ -1,1 +824,828 @@    let merged =\n            Archive\n                (nubSortOn eRelativePath $ mf : zEntries dar1 ++ zEntries dar2)\n                -- nubSortOn keeps the first occurence\n                Nothing"
  },
  {
    "id" : "00b3a139-8004-4c6f-8246-37975bfee91f",
    "prId" : 2232,
    "comments" : [
      {
        "id" : "3ffbe6c3-3d64-4f28-966d-6ecc0415b0cc",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Is there a reason why we deduplicate only based on the filename instead of the full relative path? That seems somewhat weird. I guess we never expect dalfs in subdirectories but then we should probably check for that. I would also only deduplicate once and then only filter the deduplicated list here instead of deduplicating once based on the full path and once on the filename.",
        "createdAt" : "2019-07-19T16:58:35Z",
        "updatedAt" : "2019-07-22T11:38:52Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "454ff8e5-9f11-4eb9-86f5-5b0907c7a508",
        "parentId" : "3ffbe6c3-3d64-4f28-966d-6ecc0415b0cc",
        "author" : {
          "login" : "robin-da",
          "name" : "Robin Krom",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/14074936?u=1b47fdbdfd82ea534219fc1b94d646873c56a7d7&v=4"
        },
        "body" : "because only the dalf name will end up in the manifest. we will make sure that the dalf names of two packages are always different if they have different content in the next piece of work.",
        "createdAt" : "2019-07-22T11:35:57Z",
        "updatedAt" : "2019-07-22T11:38:52Z",
        "lastEditedBy" : {
          "login" : "robin-da",
          "name" : "Robin Krom",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/14074936?u=1b47fdbdfd82ea534219fc1b94d646873c56a7d7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "ff79e6096473d1f83a02cf14522304894fdc6fcf",
    "line" : 55,
    "diffHunk" : "@@ -1,1 +834,838 @@        let dalfNames =\n                nubSort\n                    [ takeFileName p\n                    | e <- zEntries dar1 ++ zEntries dar2\n                    , let p = eRelativePath e"
  },
  {
    "id" : "1147dad7-2736-49a4-92e6-1ba16c86ec46",
    "prId" : 2222,
    "comments" : [
      {
        "id" : "f91cf6a1-a6c9-451a-8bae-f60c243befe4",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Can we add a comment here on why we need to change the directory? It isn’t clear to me why that is required.",
        "createdAt" : "2019-07-19T04:45:57Z",
        "updatedAt" : "2019-07-19T09:48:52Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "564fc585-c171-448e-a5bc-b5b2736a6bbe",
        "parentId" : "f91cf6a1-a6c9-451a-8bae-f60c243befe4",
        "author" : {
          "login" : "robin-da",
          "name" : "Robin Krom",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/14074936?u=1b47fdbdfd82ea534219fc1b94d646873c56a7d7&v=4"
        },
        "body" : "so that you get the right filepath's for the generated interface files.",
        "createdAt" : "2019-07-19T09:42:24Z",
        "updatedAt" : "2019-07-19T09:48:52Z",
        "lastEditedBy" : {
          "login" : "robin-da",
          "name" : "Robin Krom",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/14074936?u=1b47fdbdfd82ea534219fc1b94d646873c56a7d7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "0ef5f6898797fc761099139830f38d6ac6b6952e",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +708,712 @@            createDirectoryIfMissing True workDir\n            -- we change the working dir so that we get correct file paths for the interface files.\n            withCurrentDirectory workDir $ do\n                unless\n                -- TODO (drsk) remove this filter"
  },
  {
    "id" : "8d74a324-019b-4d51-83fb-805cbc6c6a14",
    "prId" : 2177,
    "comments" : [
      {
        "id" : "4c6c7a3d-2508-4170-84ef-9581ede05c0b",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "We should exit with `exitFailure` if we get diagnostics. An easy solution is probably something like:\r\n```\r\ndiags <- getDiagnostics ide\r\nunless (null diags) exitFailure\r\n```",
        "createdAt" : "2019-07-16T17:37:29Z",
        "updatedAt" : "2019-07-16T19:34:17Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "6de10d1a-142b-43fb-bd92-8ba47b73fac7",
        "parentId" : "4c6c7a3d-2508-4170-84ef-9581ede05c0b",
        "author" : null,
        "body" : "✔️ ",
        "createdAt" : "2019-07-16T18:35:28Z",
        "updatedAt" : "2019-07-16T19:34:17Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "bc4d6df5136944c7a6a061f4397ddeeda1b10e75",
    "line" : 39,
    "diffHunk" : "@@ -1,1 +337,341 @@    withDamlIdeState opts loggerH diagnosticsLogger $ \\ide -> do\n        setFilesOfInterest ide (Set.singleton inputFile)\n        runAction ide $ getHlintIdeas inputFile\n        diags <- getDiagnostics ide\n        when (null diags) $ hPutStrLn stderr \"No hints.\""
  },
  {
    "id" : "6b6af206-3375-483e-a255-57d57a2f2c96",
    "prId" : 2177,
    "comments" : [
      {
        "id" : "8f9e5299-cdbe-4608-a201-f0cb1c8370b4",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "```suggestion\r\n    opts <- setHlintDataDir =<< mkOptions opts\r\n```\r\nmight be a bit more idiomatic but I don’t feel strongly about this at all so your choice :wink: ",
        "createdAt" : "2019-07-16T19:16:35Z",
        "updatedAt" : "2019-07-16T19:34:17Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "bfa15597-a1db-4ea1-9b56-41b2e3dffd30",
        "parentId" : "8f9e5299-cdbe-4608-a201-f0cb1c8370b4",
        "author" : null,
        "body" : "Noted. Thanks!",
        "createdAt" : "2019-07-16T19:18:42Z",
        "updatedAt" : "2019-07-16T19:34:17Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "bc4d6df5136944c7a6a061f4397ddeeda1b10e75",
    "line" : 36,
    "diffHunk" : "@@ -1,1 +334,338 @@    loggerH <- getLogger opts \"lint\"\n    inputFile <- toNormalizedFilePath <$> relativize inputFile\n    opts <- (setHlintDataDir <=< mkOptions) opts\n    withDamlIdeState opts loggerH diagnosticsLogger $ \\ide -> do\n        setFilesOfInterest ide (Set.singleton inputFile)"
  },
  {
    "id" : "0c77188f-5159-4a5a-beca-2a38af51450f",
    "prId" : 2177,
    "comments" : [
      {
        "id" : "f3ebe3f6-e620-48b7-8d11-6166d0de39d9",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Instead of\r\n```haskell\r\nwhen x a\r\nunless x b\r\n```\r\nI'd just write\r\n```haskell\r\nif x then a else b\r\n```",
        "createdAt" : "2019-07-17T08:41:37Z",
        "updatedAt" : "2019-07-17T08:42:12Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "bc4d6df5136944c7a6a061f4397ddeeda1b10e75",
    "line" : 42,
    "diffHunk" : "@@ -1,1 +340,344 @@        diags <- getDiagnostics ide\n        when (null diags) $ hPutStrLn stderr \"No hints.\"\n        unless (null diags) exitFailure\n  where\n     setHlintDataDir :: Options -> IO Options"
  },
  {
    "id" : "89c4d3d9-8929-4d53-8d26-287341718646",
    "prId" : 2151,
    "comments" : [
      {
        "id" : "9bbef2cc-31df-4b7b-bd0f-0c6966347684",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "I tend to put this at the end of the previous line.",
        "createdAt" : "2019-07-15T16:40:58Z",
        "updatedAt" : "2019-07-16T09:53:08Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "0a3d126b7a3f438fd5aeab809b4352d28723ba26",
    "line" : 200,
    "diffHunk" : "@@ -1,1 +625,629 @@    execInit (optDamlLfVersion opts) projectOpts (InitPkgDb True)\n    withProjectRoot' projectOpts $ \\_relativize\n     -> do\n        -- for all contained dalfs, generate source, typecheck and generate interface files and\n        -- overwrite the existing ones."
  },
  {
    "id" : "4dc4903f-182a-40e0-b99a-5103f033de01",
    "prId" : 2151,
    "comments" : [
      {
        "id" : "5c5c4874-5397-4708-a1e8-f91272dba841",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "This mix of list comprehensions and `do` notation for lists is slightly odd.",
        "createdAt" : "2019-07-15T16:50:15Z",
        "updatedAt" : "2019-07-16T09:53:08Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "0a3d126b7a3f438fd5aeab809b4352d28723ba26",
    "line" : 219,
    "diffHunk" : "@@ -1,1 +644,648 @@            generatePackageState (dbPath : optPackageDbs opts) False []\n        let (depGraph, vertexToNode, _keyToVertex) =\n                graphFromEdges $ do\n                    (uid, src) <- genSrcs\n                    let iuid = toInstalledUnitId uid"
  },
  {
    "id" : "e1005b99-d060-4045-b9e0-3945c02bc6f7",
    "prId" : 2115,
    "comments" : [
      {
        "id" : "de75b4f8-0fc1-4dff-bbe2-4565cb85e8ba",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "```suggestion\r\n    <*> optHlintEnabled\r\n```",
        "createdAt" : "2019-07-12T12:05:57Z",
        "updatedAt" : "2019-07-12T15:42:21Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "70dbda3a4e6f6e2c8b607e944eb807553787c2c2",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +717,721 @@    <*> pure enableScenarioService\n    <*> pure (optScenarioValidation $ defaultOptions Nothing)\n    <*> optHlintEnable\n    <*> optHlintDataDir\n    <*> pure False"
  }
]