[
  {
    "id" : "e24ce61b-f24f-4ab1-85c0-b5075dc02787",
    "prId" : 2747,
    "comments" : [
      {
        "id" : "75d2021b-137e-477a-bf74-4f4a7e48aef9",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Rst is great â€¦ ðŸ¤®",
        "createdAt" : "2019-09-04T18:15:24Z",
        "updatedAt" : "2019-09-05T10:46:05Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "f1ed03322a75e3d661b31e0aed34ad97da5a5eff",
    "line" : null,
    "diffHunk" : "@@ -35,18 +35,25 @@ renderRst env = \\case\n renderRstText :: RenderEnv -> RenderText -> T.Text\n renderRstText env = \\case\n     RenderConcat ts -> mconcatMap (renderRstText env) ts\n-    RenderPlain text -> text\n-    RenderStrong text -> T.concat [\"**\", text, \"**\"]\n+    RenderPlain text -> escapeRst text\n+    RenderStrong text -> T.concat [\"**\", escapeRst text, \"**\"]\n     RenderLink ref text ->\n         case lookupReference env ref of\n-            Nothing -> text\n+            Nothing -> escapeRst text\n             Just anchorLoc@(External _) ->\n                 T.concat\n-                    [\"`\", text, \" <\"\n-                    , anchorHyperlink anchorLoc (referenceAnchor ref)\n+                    [ \"`\", escapeRst (escapeRst text)\n+                        -- For some reason, link text seem to be"
  },
  {
    "id" : "dbd94530-2473-40ae-bfb9-2674cdbf854f",
    "prId" : 2589,
    "comments" : [
      {
        "id" : "9e7ed79d-0928-488c-bcc4-5985a7a158ec",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "We seem to have lost a `_` before the closing `>`. Is that intentional?",
        "createdAt" : "2019-08-19T10:51:08Z",
        "updatedAt" : "2019-08-21T09:33:33Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "4baa1f32-a57d-42c4-97a0-f62b8474862b",
        "parentId" : "9e7ed79d-0928-488c-bcc4-5985a7a158ec",
        "author" : null,
        "body" : "Yep! That's RST for ya! http://docutils.sourceforge.net/docs/user/rst/quickref.html#external-hyperlink-targets",
        "createdAt" : "2019-08-21T09:00:19Z",
        "updatedAt" : "2019-08-21T09:33:33Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "8780e487-0dd6-4b63-96f7-a55d6dd85118",
        "parentId" : "9e7ed79d-0928-488c-bcc4-5985a7a158ec",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "RTS is great â€¦",
        "createdAt" : "2019-08-21T09:16:46Z",
        "updatedAt" : "2019-08-21T09:33:33Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "80f5251971e764b85072660bef0b75497f5e4d90",
    "line" : 14,
    "diffHunk" : "@@ -37,10 +37,16 @@ renderRstText env = \\case\n     RenderConcat ts -> mconcatMap (renderRstText env) ts\n     RenderPlain text -> text\n     RenderStrong text -> T.concat [\"**\", text, \"**\"]\n-    RenderLink anchor text ->\n-        case lookupAnchor env anchor of\n+    RenderLink ref text ->\n+        case lookupReference env ref of\n             Nothing -> text\n-            Just _ -> T.concat [\"`\", text, \" <\", unAnchor anchor, \"_>`_\"]\n+            Just anchorLoc@(External _) ->\n+                T.concat\n+                    [\"`\", text, \" <\"\n+                    , anchorHyperlink anchorLoc (referenceAnchor ref)\n+                    , \">`_\"]"
  },
  {
    "id" : "def53ae7-690b-4eb0-a412-69df7153936a",
    "prId" : 2351,
    "comments" : [
      {
        "id" : "3695089a-f849-463e-ab2a-b6da4747c16a",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "I just spent a minute researching since when you can nest guards as `||` in Haskell until I realized by stupidity :)\r\nHow about either donâ€™t align `||` with the guards or use `any (`T.isPrefixOf` line1) [\"**template instance**, \" :\", \" =\"]` which I personally find easier to understand.",
        "createdAt" : "2019-07-31T11:35:36Z",
        "updatedAt" : "2019-07-31T16:47:11Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "97b76367-b331-4509-8f09-bc404ea9bbb4",
        "parentId" : "3695089a-f849-463e-ab2a-b6da4747c16a",
        "author" : null,
        "body" : "That's better :-) thanks",
        "createdAt" : "2019-07-31T16:32:36Z",
        "updatedAt" : "2019-07-31T16:47:11Z",
        "lastEditedBy" : null,
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "43cf20febd7fb63e1a575296280a2c3177148144",
    "line" : null,
    "diffHunk" : "@@ -4,271 +4,102 @@\n {-# LANGUAGE DerivingStrategies #-}\n \n module DA.Daml.Doc.Render.Rst\n-  ( renderSimpleRst\n+  ( renderRst\n   ) where\n \n import DA.Daml.Doc.Types\n-import DA.Daml.Doc.Render.Util\n import DA.Daml.Doc.Render.Monoid\n \n import qualified Data.Text.Prettyprint.Doc as Pretty\n-import           Data.Text.Prettyprint.Doc (Doc, defaultLayoutOptions, layoutPretty, pretty, (<+>))\n-import           Data.Text.Prettyprint.Doc.Render.Text (renderStrict)\n+import Data.Text.Prettyprint.Doc (Doc, defaultLayoutOptions, layoutPretty, pretty, (<+>))\n+import Data.Text.Prettyprint.Doc.Render.Text (renderStrict)\n \n-import           Data.Char\n-import           Data.Maybe\n+import Data.Char\n import qualified Data.Text as T\n import Data.List.Extra\n \n import CMarkGFM\n \n-renderAnchor :: Maybe Anchor -> RenderOut\n-renderAnchor Nothing = mempty\n-renderAnchor (Just anchor) = mconcat\n-    [ renderDeclareAnchor anchor\n-    , renderLines\n-        [ \"\"\n-        , \".. _\" <> unAnchor anchor <> \":\"\n-        , \"\"\n-        ]\n-    ]\n-\n-renderDocText :: DocText -> RenderOut\n-renderDocText = renderLines . T.lines . docTextToRst\n-\n-renderSimpleRst :: ModuleDoc -> RenderOut\n-renderSimpleRst ModuleDoc{..}\n-  | null md_templates && null md_classes &&\n-    null md_adts && null md_functions &&\n-    isNothing md_descr = mempty\n-renderSimpleRst ModuleDoc{..} = mconcat\n-    [ renderAnchor md_anchor\n-    , renderLines -- h1 heading -- anchor link is added by Rst here.\n-        [ title\n-        , T.replicate (T.length title) \"-\"\n-        , maybe \"\" docTextToRst md_descr\n-        ]\n-    , section \"Templates\" renderTemplateDoc md_templates\n-    , section \"Template Instances\" renderTemplateInstanceDoc md_templateInstances\n-    , section \"Typeclasses\" renderClassDoc md_classes\n-    , section \"Data types\" renderADTDoc md_adts\n-    , section \"Functions\" renderFunctionDoc md_functions\n-    ]\n-\n+renderRst :: RenderEnv -> RenderOut -> [T.Text]\n+renderRst env = \\case\n+    RenderSpaced chunks -> spaced (map (renderRst env) chunks)\n+    RenderModuleHeader title -> header \"-\" title\n+    RenderSectionHeader title -> header \"^\" title\n+    RenderBlock block -> indent (renderRst env block)\n+    RenderList items -> spaced (map (bullet . renderRst env) items)\n+    RenderFields fields -> renderRstFields env fields\n+    RenderPara text -> [renderRstText env text]\n+    RenderDocs docText -> docTextToRst docText\n+    RenderAnchor anchor -> [\".. _\" <> unAnchor anchor <> \":\"]\n+\n+renderRstText :: RenderEnv -> RenderText -> T.Text\n+renderRstText env = \\case\n+    RenderConcat ts -> mconcatMap (renderRstText env) ts\n+    RenderPlain text -> text\n+    RenderStrong text -> T.concat [\"**\", text, \"**\"]\n+    RenderLink anchor text ->\n+        case lookupAnchor env anchor of\n+            Nothing -> text\n+            Just _ -> T.concat [\"`\", text, \" <\", unAnchor anchor, \"_>`_\"]\n+    RenderDocsInline docText ->\n+        T.unwords (docTextToRst docText)\n+\n+-- Utilities\n+\n+-- | Put an extra newline in between chunks. Because Rst has support for definition\n+-- lists, we *sometimes* don't put a newline in between, in particular when the\n+-- next line is indented and looks like a type signature or definition. This\n+-- should affect the output very little either way (it's only spacing).\n+spaced :: [[T.Text]] -> [T.Text]\n+spaced = intercalate [\"\"] . respace\n   where\n-    title = \"Module \" <> unModulename md_name\n-\n-    section :: T.Text -> (a -> RenderOut) -> [a] -> RenderOut\n-    section _ _ [] = mempty\n-    section sectionTitle f xs = mconcat\n-        [ renderLines\n-            [ \"\"\n-            , sectionTitle\n-            , T.replicate (T.length sectionTitle) \"^\"\n-            ]\n-        , mconcatMap f xs\n-        ]\n-\n-renderTemplateDoc :: TemplateDoc -> RenderOut\n-renderTemplateDoc TemplateDoc{..} = mconcat $\n-    [ renderAnchor td_anchor\n-    , renderLineDep $ \\env -> T.unwords . concat $\n-        [ [bold \"template\"]\n-        , renderContext env td_super\n-        , [makeAnchorLink env td_anchor (unTypename td_name)]\n-        , td_args\n-        ]\n-    , maybe mempty ((renderLine \"\" <>) . renderIndent 2 . renderDocText) td_descr\n-    , renderLine \"\"\n-    , renderIndent 2 (fieldTable td_payload)\n-    , renderLine \"\"\n-    ] ++ map (renderIndent 2 . renderChoiceDoc) td_choices\n-\n-renderTemplateInstanceDoc :: TemplateInstanceDoc -> RenderOut\n-renderTemplateInstanceDoc TemplateInstanceDoc{..} = mconcat\n-    [ renderAnchor ti_anchor\n-    , renderLinesDep $ \\env ->\n-        [ \"template instance \" <>\n-            makeAnchorLink env ti_anchor (unTypename ti_name)\n-        , \"  = \" <> renderType env ti_rhs\n-        , \"\"\n-        ]\n-    , maybe mempty ((<> renderLine \"\") . renderIndent 2 . renderDocText) ti_descr\n-    ]\n-\n-renderChoiceDoc :: ChoiceDoc -> RenderOut\n-renderChoiceDoc ChoiceDoc{..} = mconcat\n-    [ renderLine $ prefix \"+ \" $ bold $ \"Choice \" <> unTypename cd_name\n-    , maybe mempty ((renderLine \"\" <>) . renderIndent 2 . renderDocText) cd_descr\n-    , renderIndent 2 (fieldTable cd_fields)\n+    respace = \\case\n+        [line1] : (line2 : block) : xs\n+            | \"`\" `T.isPrefixOf` line1\n+            || \"**type**\" `T.isPrefixOf` line1"
  },
  {
    "id" : "23e9ce48-02eb-466b-be8b-4b1bbcf74b81",
    "prId" : 2240,
    "comments" : [
      {
        "id" : "bd960314-a55e-4ef4-af52-d5d536c5302e",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Nice cleanup!",
        "createdAt" : "2019-07-22T11:26:24Z",
        "updatedAt" : "2019-07-22T12:09:30Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "8cc5011d7625b29e31ecc1842db80d8f6c47d650",
    "line" : 61,
    "diffHunk" : "@@ -40,50 +41,33 @@ renderSimpleRst ModuleDoc{..}\n   | null md_templates && null md_classes &&\n     null md_adts && null md_functions &&\n     isNothing md_descr = mempty\n-renderSimpleRst ModuleDoc{..} = mconcat $\n-  [ renderAnchor md_anchor\n-  , renderLines\n-      [ title\n-      , T.replicate (T.length title) \"-\"\n-      , maybe \"\" docTextToRst md_descr\n-      ]\n-  ]\n-  <> concat\n-  [ if null md_templates\n-    then []\n-    else [ renderLines\n-              [ \"\"\n-              , \"Templates\"\n-              , \"^^^^^^^^^\" ]\n-         , mconcat $ map tmpl2rst md_templates\n-         ]\n-  , if null md_classes\n-    then []\n-    else [ renderLines\n-              [ \"\"\n-              , \"Typeclasses\"\n-              , \"^^^^^^^^^^^\" ]\n-         , mconcat $ map cls2rst md_classes\n-         ]\n-  , if null md_adts\n-    then []\n-    else [ renderLines\n-              [ \"\"\n-              , \"Data types\"\n-              , \"^^^^^^^^^^\"]\n-         , mconcat $ map adt2rst md_adts\n-         ]\n-  , if null md_functions\n-    then []\n-    else [ renderLines\n-              [ \"\"\n-              , \"Functions\"\n-              , \"^^^^^^^^^\" ]\n-         , mconcat $ map fct2rst md_functions\n-         ]\n-  ]\n+renderSimpleRst ModuleDoc{..} = mconcat\n+    [ renderAnchor md_anchor\n+    , renderLines\n+        [ title\n+        , T.replicate (T.length title) \"-\"\n+        , maybe \"\" docTextToRst md_descr\n+        ]\n+    , section \"Templates\" tmpl2rst md_templates"
  },
  {
    "id" : "e47b044e-7cbf-44ec-9d1a-188b45192982",
    "prId" : 2240,
    "comments" : [
      {
        "id" : "b3e7af78-10da-4dbe-bae5-2e7a51ac1d27",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Or even better `bold = enclosedIn \"**\"` :)",
        "createdAt" : "2019-07-22T11:26:55Z",
        "updatedAt" : "2019-07-22T12:09:30Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "0d71f751-2159-406d-ac14-19e752b6523b",
        "parentId" : "b3e7af78-10da-4dbe-bae5-2e7a51ac1d27",
        "author" : null,
        "body" : "a bold suggestion :-)\r\n\r\ndone",
        "createdAt" : "2019-07-22T12:07:55Z",
        "updatedAt" : "2019-07-22T12:09:30Z",
        "lastEditedBy" : null,
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "8cc5011d7625b29e31ecc1842db80d8f6c47d650",
    "line" : null,
    "diffHunk" : "@@ -99,6 +83,17 @@ tmpl2rst TemplateDoc{..} = mconcat $\n   , renderLine \"\"\n   ] ++ map (renderIndent 2 . choiceBullet) td_choices\n \n+renderTemplateInstanceDocAsRst :: TemplateInstanceDoc -> RenderOut\n+renderTemplateInstanceDocAsRst TemplateInstanceDoc{..} = mconcat\n+    [ renderAnchor ti_anchor\n+    , renderLinesDep $ \\env ->\n+        [ \"template instance \" <> enclosedIn \"**\" (unTypename ti_name)"
  },
  {
    "id" : "803d424d-a497-4ce9-9517-07fbd67a8404",
    "prId" : 2181,
    "comments" : [
      {
        "id" : "0111be94-ca83-4b9b-8082-0b8c26cc485c",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Should we have some like\r\n```haskell\r\nbold = enclosedIn \"**\"\r\n```\r\nsomewhere?",
        "createdAt" : "2019-07-17T10:58:25Z",
        "updatedAt" : "2019-07-17T11:04:19Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "fbe766dd-0d7a-48da-a8ac-21cb2fee084a",
        "parentId" : "0111be94-ca83-4b9b-8082-0b8c26cc485c",
        "author" : null,
        "body" : "That's a bold suggestion :-) \r\n",
        "createdAt" : "2019-07-17T11:05:10Z",
        "updatedAt" : "2019-07-17T11:05:11Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "ee946ac2-5dcc-4e8b-bd5a-164b0cd00ab9",
        "parentId" : "0111be94-ca83-4b9b-8082-0b8c26cc485c",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : ":medal_sports: from the _Head of Puns_ for this response.",
        "createdAt" : "2019-07-17T11:07:19Z",
        "updatedAt" : "2019-07-17T11:07:19Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "d8852ced5f6fa19be01c9dec3cb42f2b693fd580",
    "line" : 8,
    "diffHunk" : "@@ -88,7 +88,11 @@ renderSimpleRst ModuleDoc{..} = mconcat $\n tmpl2rst :: TemplateDoc -> RenderOut\n tmpl2rst TemplateDoc{..} = mconcat $\n   [ renderAnchor td_anchor\n-  , renderLine $ \"template \" <> enclosedIn \"**\" (unTypename td_name)\n+  , renderLineDep $ \\env -> T.concat\n+      [ \"template \"\n+      , maybe \"\" ((<> \" => \") . type2rst env) td_super\n+      , T.unwords (enclosedIn \"**\" (unTypename td_name) : td_args)"
  },
  {
    "id" : "0d9ee755-9cbf-45e6-9fd8-01688b37182e",
    "prId" : 2132,
    "comments" : [
      {
        "id" : "cffda37a-1e7b-4261-b87d-cb33511180b9",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Does _spurious_ refer to links that refer to locations that do not exist?",
        "createdAt" : "2019-07-15T07:23:55Z",
        "updatedAt" : "2019-07-15T10:08:09Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "549c06e6-e7a3-43ff-ad4a-86659bc5ae44",
        "parentId" : "cffda37a-1e7b-4261-b87d-cb33511180b9",
        "author" : null,
        "body" : "Yes -- linking to anchors that could exist but don't. I'll try to make this more clear.",
        "createdAt" : "2019-07-15T07:38:55Z",
        "updatedAt" : "2019-07-15T10:08:09Z",
        "lastEditedBy" : null,
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "90a9bf83d6ffc1c38c9e00148662008080d387ea",
    "line" : null,
    "diffHunk" : "@@ -17,110 +18,170 @@ import           Data.Text.Prettyprint.Doc.Render.Text (renderStrict)\n import           Data.Char\n import           Data.Maybe\n import qualified Data.Text as T\n+import qualified Data.Set as Set\n \n import CMarkGFM\n \n-renderAnchor :: Maybe Anchor -> T.Text\n-renderAnchor Nothing = \"\"\n-renderAnchor (Just anchor) = \"\\n.. _\" <> unAnchor anchor <> \":\\n\"\n+-- | Renderer output. This is the set of anchors that were generated, and a\n+-- list of output functions that depend on that set. The goal is to prevent\n+-- the creation of spurious anchors links."
  },
  {
    "id" : "50540830-898d-463b-8678-423a5cc55485",
    "prId" : 2132,
    "comments" : [
      {
        "id" : "27b58032-4ce6-41a3-b6f1-e8a61753eb0e",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Do we do this to guard against bugs in our implementation or because there are valid cases where the anchor does not exists? I suspect the latter but Iâ€™m not entirely clear on when that happens so it would be good to document this in a comment (e.g. in the haddocks for `renderAnchorAvailable`).",
        "createdAt" : "2019-07-15T07:27:01Z",
        "updatedAt" : "2019-07-15T10:08:09Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "ea513fb8-58dd-4f77-b898-31881ac5bb95",
        "parentId" : "27b58032-4ce6-41a3-b6f1-e8a61753eb0e",
        "author" : null,
        "body" : "Will do. Anchors may be missing because they are hidden (through the use of the `-- | HIDE` directive), or because they are imported from a different package (no way to link docs across packages yet).",
        "createdAt" : "2019-07-15T07:37:14Z",
        "updatedAt" : "2019-07-15T10:08:09Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "90a9bf83d6ffc1c38c9e00148662008080d387ea",
    "line" : 320,
    "diffHunk" : "@@ -144,45 +205,61 @@ constr2rst RecordC{..} = T.unlines\n >      - `Text`\n >      - and text\n -}\n-fieldTable :: [FieldDoc] -> T.Text\n-fieldTable []  = \"\"\n-fieldTable fds = T.unlines $ -- NB final empty line is essential and intended\n-  [ \".. list-table::\", \"   :widths: 15 10 30\", \"   :header-rows: 1\", \"\"]\n-  <> map (indent 3) (headerRow <> fieldRows)\n+fieldTable :: [FieldDoc] -> RenderOut\n+fieldTable []  = mempty\n+fieldTable fds = mconcat -- NB final empty line is essential and intended\n+    [ renderLines\n+        [ \".. list-table::\"\n+        , \"   :widths: 15 10 30\"\n+        , \"   :header-rows: 1\"\n+        , \"\"\n+        , \"   * - Field\"\n+        , \"     - Type\"\n+        , \"     - Description\" ]\n+    , fieldRows\n+    ]\n   where\n-    headerRow = [ \"* - Field\"\n-                , \"  - Type\"\n-                , \"  - Description\" ]\n-    fieldRows = concat\n-       [ [ prefix \"* - \" $ escapeTr_ (unFieldname fd_name)\n-         , prefix \"  - \" $ type2rst fd_type\n-         , prefix \"  - \" $ maybe \" \" (docTextToRst . DocText . T.unwords . T.lines . unDocText) fd_descr ] -- FIXME: this makes no sense\n+    fieldRows = renderLinesDep $ \\env -> concat\n+       [ [ prefix \"   * - \" $ escapeTr_ (unFieldname fd_name)\n+         , prefix \"     - \" $ type2rst env fd_type\n+         , prefix \"     - \" $ maybe \" \" (docTextToRst . DocText . T.unwords . T.lines . unDocText) fd_descr ] -- FIXME: indent properly instead of this\n        | FieldDoc{..} <- fds ]\n \n -- | Render a type. Nested type applications are put in parentheses.\n-type2rst :: Type -> T.Text\n-type2rst = f (0 :: Int)\n+type2rst :: RenderEnv -> Type -> T.Text\n+type2rst env = f 0\n   where\n     -- 0 = no brackets\n     -- 1 = brackets around function\n     -- 2 = brackets around function AND application\n-    f _ (TypeApp _ n []) = unTypename n\n-    f i (TypeApp _ n as) = (if i >= 2 then inParens else id) $ T.unwords (unTypename n : map (f 2) as)\n-    f i (TypeFun ts) = (if i >= 1 then inParens else id) $ T.intercalate \" -> \" $ map (f 1) ts\n+    f :: Int -> Type -> T.Text\n+    f _ (TypeApp a n []) = link a n\n+    f i (TypeApp a n as) = (if i >= 2 then inParens else id) $\n+        T.unwords (link a n : map (f 2) as)\n+    f i (TypeFun ts) = (if i >= 1 then inParens else id) $\n+        T.intercalate \" -> \" $ map (f 1) ts\n     f _ (TypeList t1) = \"[\" <> f 0 t1 <> \"]\"\n     f _ (TypeTuple ts) = \"(\" <> T.intercalate \", \" (map (f 0) ts) <>  \")\"\n \n+    link :: Maybe Anchor -> Typename -> T.Text\n+    link Nothing n = unTypename n\n+    link (Just anchor) n =\n+        if renderAnchorAvailable env anchor"
  }
]