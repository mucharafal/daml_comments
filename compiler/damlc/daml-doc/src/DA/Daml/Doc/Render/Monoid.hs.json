[
  {
    "id" : "86af2b6c-f8c5-42c4-8272-fddae7f28d30",
    "prId" : 2589,
    "comments" : [
      {
        "id" : "031b9c7a-6868-4b21-bd9e-79354857a34e",
        "parentId" : null,
        "author" : {
          "login" : "robin-da",
          "name" : "Robin Krom",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/14074936?u=1b47fdbdfd82ea534219fc1b94d646873c56a7d7&v=4"
        },
        "body" : "looks like you can factor this function out and reuse it.",
        "createdAt" : "2019-08-20T10:01:22Z",
        "updatedAt" : "2019-08-21T09:33:33Z",
        "lastEditedBy" : {
          "login" : "robin-da",
          "name" : "Robin Krom",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/14074936?u=1b47fdbdfd82ea534219fc1b94d646873c56a7d7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "e6c423fc-7df7-486f-937e-7c3cd896ce62",
        "parentId" : "031b9c7a-6868-4b21-bd9e-79354857a34e",
        "author" : null,
        "body" : "Thanks! I'm refactoring it :-)",
        "createdAt" : "2019-08-21T09:28:37Z",
        "updatedAt" : "2019-08-21T09:33:33Z",
        "lastEditedBy" : null,
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "80f5251971e764b85072660bef0b75497f5e4d90",
    "line" : null,
    "diffHunk" : "@@ -136,6 +154,11 @@ renderFolder formatter fileMap =\n                 [ SameFile <$ guard (Set.member anchor localAnchors)\n                 , SameFolder <$> Map.lookup anchor globalAnchors\n                 ]\n+            lookupReference ref = asum\n+                [ lookupAnchor (referenceAnchor ref)\n+                , External <$> (packageURI =<< referencePackage ref)\n+                ]"
  },
  {
    "id" : "eb091ca0-a651-4181-a6ba-9c73bd38bab9",
    "prId" : 2351,
    "comments" : [
      {
        "id" : "d45b0c19-c77f-4f66-a9c5-5a756ab98e91",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Might be nice to either rename this to `RenderRecordFields` (I’m happy calling fields in templates and choices record fields :)) or add a comment here. I first got slightly confused as to what `Fields` refers to here.",
        "createdAt" : "2019-07-31T11:19:28Z",
        "updatedAt" : "2019-07-31T16:47:11Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "43cf20febd7fb63e1a575296280a2c3177148144",
    "line" : null,
    "diffHunk" : "@@ -11,11 +11,59 @@ module DA.Daml.Doc.Render.Monoid\n import DA.Daml.Doc.Types\n import Control.Monad\n import Data.Foldable\n+import Data.Maybe\n+import Data.List.Extra\n import System.FilePath\n import qualified Data.Map.Strict as Map\n import qualified Data.Set as Set\n import qualified Data.Text as T\n \n+data RenderOut\n+    = RenderSpaced [RenderOut]\n+    | RenderModuleHeader T.Text\n+    | RenderSectionHeader T.Text\n+    | RenderAnchor Anchor\n+    | RenderBlock RenderOut\n+    | RenderList [RenderOut]\n+    | RenderFields [(RenderText, RenderText, RenderText)]"
  },
  {
    "id" : "db18192f-8114-43b4-a310-48b26f22a115",
    "prId" : 2351,
    "comments" : [
      {
        "id" : "3dfdc842-d61f-4654-832e-c04b79acb29d",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Seem slightly weird to abbreviate this, if none of the other record fields are abbreviated and this is not the longest. But I didn’t get confused by the abbreviation so I’m fine with keeping it.",
        "createdAt" : "2019-07-31T11:21:28Z",
        "updatedAt" : "2019-07-31T16:47:11Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "43cf20febd7fb63e1a575296280a2c3177148144",
    "line" : null,
    "diffHunk" : "@@ -11,11 +11,59 @@ module DA.Daml.Doc.Render.Monoid\n import DA.Daml.Doc.Types\n import Control.Monad\n import Data.Foldable\n+import Data.Maybe\n+import Data.List.Extra\n import System.FilePath\n import qualified Data.Map.Strict as Map\n import qualified Data.Set as Set\n import qualified Data.Text as T\n \n+data RenderOut\n+    = RenderSpaced [RenderOut]\n+    | RenderModuleHeader T.Text\n+    | RenderSectionHeader T.Text\n+    | RenderAnchor Anchor\n+    | RenderBlock RenderOut\n+    | RenderList [RenderOut]\n+    | RenderFields [(RenderText, RenderText, RenderText)]\n+    | RenderPara RenderText"
  },
  {
    "id" : "80aa9fd5-4a20-440e-95b3-ed2de2c26369",
    "prId" : 2259,
    "comments" : [
      {
        "id" : "40801c30-7925-40be-9fa5-e13751bfd34f",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "It looks like we aren’t using this anymore?",
        "createdAt" : "2019-07-23T11:05:20Z",
        "updatedAt" : "2019-07-23T16:24:56Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "5926a8df-3519-418c-8381-6c95e45ef495",
        "parentId" : "40801c30-7925-40be-9fa5-e13751bfd34f",
        "author" : null,
        "body" : "Right! Thanks!",
        "createdAt" : "2019-07-23T16:07:43Z",
        "updatedAt" : "2019-07-23T16:24:56Z",
        "lastEditedBy" : null,
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "2ed4fda9eea075172b450f1f9bef15880ed2a82c",
    "line" : null,
    "diffHunk" : "@@ -23,38 +47,71 @@ newtype RenderEnv = RenderEnv (Set.Set Anchor)\n -- Another possibly reason is that the anchor refers to a definition in another\n -- package (and at the moment it's not possible to link accross packages).\n renderAnchorAvailable :: RenderEnv -> Anchor -> Bool\n-renderAnchorAvailable (RenderEnv anchors) anchor = Set.member anchor anchors\n+renderAnchorAvailable RenderEnv{..} anchor = isJust (lookupAnchor anchor)"
  },
  {
    "id" : "0e182c63-35df-44cc-a507-628a1bfc3eb1",
    "prId" : 2259,
    "comments" : [
      {
        "id" : "8c0c64e1-504a-4279-863d-2beae13c38d4",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "```suggestion\r\n    = SameFile  -- ^ anchor is in same file\r\n```",
        "createdAt" : "2019-07-23T12:24:09Z",
        "updatedAt" : "2019-07-23T16:24:56Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "2ed4fda9eea075172b450f1f9bef15880ed2a82c",
    "line" : null,
    "diffHunk" : "@@ -9,12 +9,36 @@ module DA.Daml.Doc.Render.Monoid\n   ) where\n \n import DA.Daml.Doc.Types\n+import Control.Monad\n+import Data.Foldable\n+import Data.Maybe\n+import System.FilePath\n+import qualified Data.Map.Strict as Map\n import qualified Data.Set as Set\n import qualified Data.Text as T\n \n -- | Environment in which to generate final documentation.\n-newtype RenderEnv = RenderEnv (Set.Set Anchor)\n-    deriving newtype (Semigroup, Monoid)\n+data RenderEnv = RenderEnv\n+    { lookupAnchor :: Anchor -> Maybe AnchorLocation\n+        -- ^ get location of anchor relative to render output, if available\n+    }\n+\n+-- | Location of an anchor relative to the output being rendered. An anchor\n+-- that lives on the same page may be rendered differently from an anchor\n+-- that lives in the same folder but a different page, and that may be\n+-- rendered differently from an anchor that is external. Thus we can\n+-- handle every case correctly.\n+data AnchorLocation\n+    = SamePage  -- ^ anchor is in same file"
  },
  {
    "id" : "21225c07-b599-4782-8fdf-41889301a35e",
    "prId" : 2156,
    "comments" : [
      {
        "id" : "e9af20e2-45b0-4e60-a09b-8605cd735844",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Should we use a `DList` here? The `Semigroup` instance of `[a]` has its performance issues.",
        "createdAt" : "2019-07-16T11:51:01Z",
        "updatedAt" : "2019-07-16T11:54:08Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "6e02acb6-affe-4a88-9787-8f141c855e88",
        "parentId" : "e9af20e2-45b0-4e60-a09b-8605cd735844",
        "author" : null,
        "body" : "That's a pretty good idea :) ",
        "createdAt" : "2019-07-16T12:41:36Z",
        "updatedAt" : "2019-07-16T12:41:36Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "4be12cde-f351-46cd-baf6-5a2708b822a9",
        "parentId" : "e9af20e2-45b0-4e60-a09b-8605cd735844",
        "author" : null,
        "body" : "^ I'll change it in a future PR, when the renderer thing becomes more settled. (Still have to figure out how to render to multiple files while still linking everything up properly.)",
        "createdAt" : "2019-07-16T12:52:31Z",
        "updatedAt" : "2019-07-16T12:52:51Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "016bc982aaab1c6f6d2c1e7da4db8600400ec927",
    "line" : 39,
    "diffHunk" : "@@ -0,0 +1,68 @@\n+-- Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+-- SPDX-License-Identifier: Apache-2.0\n+\n+{-# LANGUAGE OverloadedStrings, DerivingStrategies #-}\n+\n+-- | Monoid with which to render documentation.\n+module DA.Daml.Doc.Render.Monoid\n+  ( module DA.Daml.Doc.Render.Monoid\n+  ) where\n+\n+import DA.Daml.Doc.Types\n+import qualified Data.Set as Set\n+import qualified Data.Text as T\n+\n+-- | Environment in which to generate final documentation.\n+newtype RenderEnv = RenderEnv (Set.Set Anchor)\n+    deriving newtype (Semigroup, Monoid)\n+\n+-- | Is the anchor available in the rendering environment? Renderers should avoid\n+-- generating links to anchors that don't actually exist.\n+--\n+-- One reason an anchor may be unavailable is because of a @-- | HIDE@ directive.\n+-- Another possibly reason is that the anchor refers to a definition in another\n+-- package (and at the moment it's not possible to link accross packages).\n+renderAnchorAvailable :: RenderEnv -> Anchor -> Bool\n+renderAnchorAvailable (RenderEnv anchors) anchor = Set.member anchor anchors\n+\n+-- | Renderer output. This is the set of anchors that were generated, and a\n+-- list of output functions that depend on that set. The goal is to prevent\n+-- the creation of spurious anchors links (i.e. links to anchors that don't\n+-- exist).\n+--\n+-- (In theory this could be done in two steps, but that seems more error prone\n+-- than building up both steps at the same time, and combining them at the\n+-- end, as is done here.)\n+--\n+-- Using a newtype here so we can derive the semigroup / monoid instances we\n+-- want automatically. :-)\n+newtype RenderOut = RenderOut (RenderEnv, [RenderEnv -> [T.Text]])"
  }
]