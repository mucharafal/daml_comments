[
  {
    "id" : "2b6280f3-9804-4915-9c7f-19b1cb3f1a7c",
    "prId" : 2240,
    "comments" : [
      {
        "id" : "3154273e-52ed-4ee1-b6ae-8a1ef9134696",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "`without`? This looks more like it only has `dc_templates` and `dc_choices`.",
        "createdAt" : "2019-07-22T11:21:32Z",
        "updatedAt" : "2019-07-22T12:09:30Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "c223a150-167b-4dd8-b818-0cb7b660253d",
        "parentId" : "3154273e-52ed-4ee1-b6ae-8a1ef9134696",
        "author" : null,
        "body" : "It is without :-) that's what `withoutKeys` does",
        "createdAt" : "2019-07-22T11:58:14Z",
        "updatedAt" : "2019-07-22T12:09:30Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "53a6df1c-d486-44d3-81d0-c406311584f8",
        "parentId" : "3154273e-52ed-4ee1-b6ae-8a1ef9134696",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Apparently I canâ€™t read :slightly_smiling_face: ",
        "createdAt" : "2019-07-22T12:02:08Z",
        "updatedAt" : "2019-07-22T12:09:30Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "8cc5011d7625b29e31ecc1842db80d8f6c47d650",
    "line" : 15,
    "diffHunk" : "@@ -67,16 +67,23 @@ mkDocs opts fp = do\n                     case stripInstanceSuffix (cl_name classDoc) of\n                         Nothing -> Left classDoc\n                         Just templateName -> Right (templateName, classDoc)\n-            templateInstanceMap = MS.fromList templateInstanceClasses\n+            templateInstanceClassMap = MS.fromList templateInstanceClasses\n \n             md_name = dc_modname\n             md_anchor = Just (moduleAnchor md_name)\n             md_descr = modDoc dc_tcmod\n-            md_templates = getTemplateDocs ctx typeMap templateInstanceMap\n+            md_templates = getTemplateDocs ctx typeMap templateInstanceClassMap\n             md_functions = mapMaybe (getFctDocs ctx) dc_decls\n-            md_adts\n+\n+            filteredAdts -- all ADT docs without templates or choices"
  },
  {
    "id" : "780c6fde-b170-4870-ae6c-f203fb1f8aa1",
    "prId" : 2240,
    "comments" : [
      {
        "id" : "62b73d13-ec9c-432d-9505-3e29d3fa3251",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "`md_adts` does not contain all ADTs right? It looks like it only contains template and choice ADTs that are not template instances?",
        "createdAt" : "2019-07-22T11:23:00Z",
        "updatedAt" : "2019-07-22T12:09:30Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "8cc5011d7625b29e31ecc1842db80d8f6c47d650",
    "line" : 20,
    "diffHunk" : "@@ -67,16 +67,23 @@ mkDocs opts fp = do\n                     case stripInstanceSuffix (cl_name classDoc) of\n                         Nothing -> Left classDoc\n                         Just templateName -> Right (templateName, classDoc)\n-            templateInstanceMap = MS.fromList templateInstanceClasses\n+            templateInstanceClassMap = MS.fromList templateInstanceClasses\n \n             md_name = dc_modname\n             md_anchor = Just (moduleAnchor md_name)\n             md_descr = modDoc dc_tcmod\n-            md_templates = getTemplateDocs ctx typeMap templateInstanceMap\n+            md_templates = getTemplateDocs ctx typeMap templateInstanceClassMap\n             md_functions = mapMaybe (getFctDocs ctx) dc_decls\n-            md_adts\n+\n+            filteredAdts -- all ADT docs without templates or choices\n                 = MS.elems . MS.withoutKeys typeMap . Set.unions\n-                $ dc_templates : MS.keysSet dc_templateInstances : MS.elems dc_choices\n+                $ dc_templates : MS.elems dc_choices\n+\n+            (md_adts, md_templateInstances) ="
  },
  {
    "id" : "bd959831-95e8-4d0e-ae76-8143c2f42b18",
    "prId" : 2240,
    "comments" : [
      {
        "id" : "e7918be5-8da4-48d8-b339-3fd6469f2f7f",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Might be a good idea to add a comment here that this marker does not exist so far.",
        "createdAt" : "2019-07-22T11:23:58Z",
        "updatedAt" : "2019-07-22T12:09:30Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "51d4b18a-a207-47b6-8b54-4af50f66e10f",
        "parentId" : "e7918be5-8da4-48d8-b339-3fd6469f2f7f",
        "author" : null,
        "body" : "Good idea :-) thanks",
        "createdAt" : "2019-07-22T12:01:04Z",
        "updatedAt" : "2019-07-22T12:09:30Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "8cc5011d7625b29e31ecc1842db80d8f6c47d650",
    "line" : 71,
    "diffHunk" : "@@ -388,29 +391,51 @@ getTemplateDocs DocCtx{..} typeMap templateInstanceMap =\n                       [] -> [] -- catching the dummy case here, see above\n                       _other -> error \"getFields: found multiple constructors\"\n \n+-- | As per issue #2239, a template instance is desugared into a\n+-- newtype with a docs marker. For example,\n+--\n+-- @template instance ProposalIou = Proposal Iou@\n+--\n+-- becomes\n+--\n+-- @newtype ProposalIou = MkProposalIou with unProposalIou : Proposal Iou -- ^ TEMPLATE_INSTANCE@\n+--\n+-- So the goal of this function is to extract the template instance doc\n+-- from the newtype doc if it exists.\n+getTemplateInstanceDoc :: ADTDoc -> Maybe TemplateInstanceDoc\n+getTemplateInstanceDoc adt\n+    | ADTDoc{..} <- adt\n+    , [RecordC{..}] <- ad_constrs\n+    , [FieldDoc{..}] <- ac_fields\n+    , Just (DocText \"TEMPLATE_INSTANCE\") <- fd_descr"
  },
  {
    "id" : "0ffe9aac-e31b-4647-a5da-f692ce9029eb",
    "prId" : 2202,
    "comments" : [
      {
        "id" : "35d0d590-090b-421c-af9f-e5ee1ff31563",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Do we have an example where this is used?",
        "createdAt" : "2019-07-18T08:29:55Z",
        "updatedAt" : "2019-07-18T08:30:27Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "f38d4c33-7d99-4a7f-904a-cb99074bcad7",
        "parentId" : "35d0d590-090b-421c-af9f-e5ee1ff31563",
        "author" : null,
        "body" : "Not really. It's used in the `adt2rst` function to make it more robust against missing type information. AFAIK this happens only with `Bool` and `[]` in `GHC.Types` right now. The former doesn't actually use `_`. The latter does use it for the cons constructor, but it's something to fix later or never.",
        "createdAt" : "2019-07-18T12:53:55Z",
        "updatedAt" : "2019-07-18T12:53:55Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "2f51a3ea-0977-40ee-a5ba-87847b72a54c",
        "parentId" : "35d0d590-090b-421c-af9f-e5ee1ff31563",
        "author" : null,
        "body" : "So, I guess the answer isn't \"Not really\" but \"only in cases where the type information is missing because of weirdness with primitives\".",
        "createdAt" : "2019-07-18T12:55:35Z",
        "updatedAt" : "2019-07-18T12:55:35Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "a2956089b450045bb72dc7eec73756649ed31638",
    "line" : 4,
    "diffHunk" : "@@ -269,6 +269,9 @@ getClsDocs ctx@DocCtx{..} (DeclData (L _ (TyClD _ c@ClassDecl{..})) docs) = do\n     subdocs = memberDocs c\n getClsDocs _ _ = Nothing\n \n+unknownType :: DDoc.Type"
  },
  {
    "id" : "7db42213-c6fb-4e2b-a409-dad7a97797c6",
    "prId" : 2202,
    "comments" : [
      {
        "id" : "b137ec7e-c560-4c8c-8d27-eb665ee9c605",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Why don't we need this guard anymore?",
        "createdAt" : "2019-07-18T08:30:17Z",
        "updatedAt" : "2019-07-18T08:30:28Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "013af330-c224-4632-a768-3ebf7cf4ca96",
        "parentId" : "b137ec7e-c560-4c8c-8d27-eb665ee9c605",
        "author" : null,
        "body" : "I'm not sure it was ever necessary. The guard was there because at the time I wrote this function there wasn't a way to check that we only link to anchors that are actually available. But then I went ahead and added the RenderOut monoid that solves that problem, so it's fine to have more anchors than we produce in general.",
        "createdAt" : "2019-07-18T12:32:33Z",
        "updatedAt" : "2019-07-18T12:32:33Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "d68140d4-62d1-4cc9-b71a-696a8607ee52",
        "parentId" : "b137ec7e-c560-4c8c-8d27-eb665ee9c605",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Thanks for the explanation.",
        "createdAt" : "2019-07-18T12:50:10Z",
        "updatedAt" : "2019-07-18T12:50:10Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "a2956089b450045bb72dc7eec73756649ed31638",
    "line" : 69,
    "diffHunk" : "@@ -532,9 +543,7 @@ tyConAnchor DocCtx{..} tycon = do\n         mod = maybe dc_modname getModulename (nameModule_maybe ghcName)\n         anchorFn\n             | isClassTyCon tycon = classAnchor\n-            | isDataTyCon tycon = dataAnchor\n             | otherwise = typeAnchor\n-    guard (not (isWiredInName ghcName))"
  },
  {
    "id" : "c7994887-c5fa-451c-a335-8b54286237a9",
    "prId" : 2179,
    "comments" : [
      {
        "id" : "8418ece1-38ee-42dc-ac1a-813d48503e42",
        "parentId" : null,
        "author" : {
          "login" : "jberthold-da",
          "name" : "Jost Berthold",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/28879196?u=41dee6fb7ab2761a566b324e2f4e5ad9b577ae0e&v=4"
        },
        "body" : "`<nit-pick>` haddock description is not correct any more",
        "createdAt" : "2019-07-17T01:25:24Z",
        "updatedAt" : "2019-07-17T07:02:56Z",
        "lastEditedBy" : {
          "login" : "jberthold-da",
          "name" : "Jost Berthold",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/28879196?u=41dee6fb7ab2761a566b324e2f4e5ad9b577ae0e&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "7b596d2f-1d09-4d4e-862c-5116ede39a55",
        "parentId" : "8418ece1-38ee-42dc-ac1a-813d48503e42",
        "author" : null,
        "body" : "that's a good point :-)",
        "createdAt" : "2019-07-17T06:53:18Z",
        "updatedAt" : "2019-07-17T07:02:56Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "81042f21-ae6a-4d8a-9f5d-97e8d2637ede",
        "parentId" : "8418ece1-38ee-42dc-ac1a-813d48503e42",
        "author" : null,
        "body" : "Fixed!",
        "createdAt" : "2019-07-17T07:04:25Z",
        "updatedAt" : "2019-07-17T07:04:25Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "70b96b2af6e6f59b1d104e2919e842c33d9904e4",
    "line" : 50,
    "diffHunk" : "@@ -368,16 +374,20 @@ getTemplateDocs DocCtx{..} typeMap = map mkTemplateDoc $ Set.toList dc_templates\n -- | Extracts all names of Template instances defined in a module and a map of\n -- template to set of its choices (instances of Choice with a particular\n -- template).\n-getTemplateData :: ParsedModule -> (Set.Set Typename, MS.Map Typename (Set.Set Typename))\n+getTemplateData :: ParsedModule ->"
  },
  {
    "id" : "4acff44f-c9d8-4db8-8881-673592ffc891",
    "prId" : 2132,
    "comments" : [
      {
        "id" : "5c55f1fd-db58-4a04-8bcb-7998a54a4db6",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "```suggestion\r\n  let dc_modname = packModule . ms_mod . pm_mod_summary . tm_parsed_module $ dc_tcmod\r\n```\r\nMakes it a bit clearer what is going on. `packModule` also seems like a weird name for getting the module name from a module.",
        "createdAt" : "2019-07-15T07:07:33Z",
        "updatedAt" : "2019-07-15T10:08:09Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "90a9bf83d6ffc1c38c9e00148662008080d387ea",
    "line" : null,
    "diffHunk" : "@@ -136,15 +148,33 @@ data DeclData = DeclData\n \n buildDocCtx :: TypecheckedModule -> DocCtx\n buildDocCtx dc_tcmod  =\n-  let dc_mod\n-          = Modulename . T.pack . moduleNameString . moduleName\n-          . ms_mod . pm_mod_summary . tm_parsed_module $ dc_tcmod\n+  let dc_mod = packModule . ms_mod . pm_mod_summary . tm_parsed_module $ dc_tcmod"
  },
  {
    "id" : "a3689f97-dd32-4e01-bf38-11a181f1e3d6",
    "prId" : 2132,
    "comments" : [
      {
        "id" : "d4aa30eb-fcf8-4303-8e9b-6b0f9d4932bd",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "```suggestion\r\n      dc_datacons = MS.fromList . flip mapMaybe tythings $ \\case\r\n```",
        "createdAt" : "2019-07-15T07:09:28Z",
        "updatedAt" : "2019-07-15T10:08:09Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "90a9bf83d6ffc1c38c9e00148662008080d387ea",
    "line" : null,
    "diffHunk" : "@@ -136,15 +148,33 @@ data DeclData = DeclData\n \n buildDocCtx :: TypecheckedModule -> DocCtx\n buildDocCtx dc_tcmod  =\n-  let dc_mod\n-          = Modulename . T.pack . moduleNameString . moduleName\n-          . ms_mod . pm_mod_summary . tm_parsed_module $ dc_tcmod\n+  let dc_mod = packModule . ms_mod . pm_mod_summary . tm_parsed_module $ dc_tcmod\n       dc_decls\n           = map (uncurry DeclData) . collectDocs . hsmodDecls . unLoc\n           . pm_parsed_source . tm_parsed_module $ dc_tcmod\n       (dc_templates, dc_choices)\n           = getTemplateData . tm_parsed_module $ dc_tcmod\n \n+      tythings = modInfoTyThings . tm_checked_module_info $ dc_tcmod\n+\n+      dc_tycons = MS.fromList . catMaybes . flip map tythings $ \\case\n+          ATyCon tycon ->\n+              let typename = Typename . packName . tyConName $ tycon\n+              in Just (typename, tycon)\n+          _ -> Nothing\n+\n+      dc_datacons = MS.fromList . catMaybes . flip map tythings $ \\case"
  },
  {
    "id" : "36ecb5fe-2d04-4748-8137-29a800ddd475",
    "prId" : 2132,
    "comments" : [
      {
        "id" : "e1c6d2ea-f11f-4a3b-976c-d34886648a22",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "```suggestion\r\n      dc_ids = MS.fromList . flip mapMaybe tythings $ \\case\r\n```",
        "createdAt" : "2019-07-15T07:09:44Z",
        "updatedAt" : "2019-07-15T10:08:09Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "90a9bf83d6ffc1c38c9e00148662008080d387ea",
    "line" : null,
    "diffHunk" : "@@ -136,15 +148,33 @@ data DeclData = DeclData\n \n buildDocCtx :: TypecheckedModule -> DocCtx\n buildDocCtx dc_tcmod  =\n-  let dc_mod\n-          = Modulename . T.pack . moduleNameString . moduleName\n-          . ms_mod . pm_mod_summary . tm_parsed_module $ dc_tcmod\n+  let dc_mod = packModule . ms_mod . pm_mod_summary . tm_parsed_module $ dc_tcmod\n       dc_decls\n           = map (uncurry DeclData) . collectDocs . hsmodDecls . unLoc\n           . pm_parsed_source . tm_parsed_module $ dc_tcmod\n       (dc_templates, dc_choices)\n           = getTemplateData . tm_parsed_module $ dc_tcmod\n \n+      tythings = modInfoTyThings . tm_checked_module_info $ dc_tcmod\n+\n+      dc_tycons = MS.fromList . catMaybes . flip map tythings $ \\case\n+          ATyCon tycon ->\n+              let typename = Typename . packName . tyConName $ tycon\n+              in Just (typename, tycon)\n+          _ -> Nothing\n+\n+      dc_datacons = MS.fromList . catMaybes . flip map tythings $ \\case\n+          AConLike (RealDataCon datacon) ->\n+              let conname = Typename . packName . dataConName $ datacon\n+              in Just (conname, datacon)\n+          _ -> Nothing\n+\n+      dc_ids = MS.fromList . catMaybes . flip map tythings $ \\case"
  },
  {
    "id" : "daa66518-5f2e-4c17-9360-9e3e16e757fd",
    "prId" : 2132,
    "comments" : [
      {
        "id" : "0edb44e1-65f9-4ae1-9629-bf400df3be4c",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "```suggestion\r\n      dc_tycons = MS.fromList . flip mapMaybe tythings $ \\case\r\n```",
        "createdAt" : "2019-07-15T07:10:03Z",
        "updatedAt" : "2019-07-15T10:08:09Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "90a9bf83d6ffc1c38c9e00148662008080d387ea",
    "line" : null,
    "diffHunk" : "@@ -136,15 +148,33 @@ data DeclData = DeclData\n \n buildDocCtx :: TypecheckedModule -> DocCtx\n buildDocCtx dc_tcmod  =\n-  let dc_mod\n-          = Modulename . T.pack . moduleNameString . moduleName\n-          . ms_mod . pm_mod_summary . tm_parsed_module $ dc_tcmod\n+  let dc_mod = packModule . ms_mod . pm_mod_summary . tm_parsed_module $ dc_tcmod\n       dc_decls\n           = map (uncurry DeclData) . collectDocs . hsmodDecls . unLoc\n           . pm_parsed_source . tm_parsed_module $ dc_tcmod\n       (dc_templates, dc_choices)\n           = getTemplateData . tm_parsed_module $ dc_tcmod\n \n+      tythings = modInfoTyThings . tm_checked_module_info $ dc_tcmod\n+\n+      dc_tycons = MS.fromList . catMaybes . flip map tythings $ \\case"
  },
  {
    "id" : "0421eb5c-73a4-4f9c-a67d-3edc7bc5dfab",
    "prId" : 2132,
    "comments" : [
      {
        "id" : "6bca0ad9-8730-4bd0-b904-c794fb45bb26",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Depending on how many `tythings` we have, this could be sped up by only doing a single traversal but at this point I highly doubt itâ€™s worth it.",
        "createdAt" : "2019-07-15T07:13:38Z",
        "updatedAt" : "2019-07-15T10:08:09Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "821a56c5-1dc3-46f8-92ae-60049279fbcf",
        "parentId" : "6bca0ad9-8730-4bd0-b904-c794fb45bb26",
        "author" : null,
        "body" : "Single pass seems more trouble than its worth, tbh. ",
        "createdAt" : "2019-07-15T07:59:00Z",
        "updatedAt" : "2019-07-15T10:08:09Z",
        "lastEditedBy" : null,
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "90a9bf83d6ffc1c38c9e00148662008080d387ea",
    "line" : null,
    "diffHunk" : "@@ -136,15 +148,33 @@ data DeclData = DeclData\n \n buildDocCtx :: TypecheckedModule -> DocCtx\n buildDocCtx dc_tcmod  =\n-  let dc_mod\n-          = Modulename . T.pack . moduleNameString . moduleName\n-          . ms_mod . pm_mod_summary . tm_parsed_module $ dc_tcmod\n+  let dc_mod = packModule . ms_mod . pm_mod_summary . tm_parsed_module $ dc_tcmod\n       dc_decls\n           = map (uncurry DeclData) . collectDocs . hsmodDecls . unLoc\n           . pm_parsed_source . tm_parsed_module $ dc_tcmod\n       (dc_templates, dc_choices)\n           = getTemplateData . tm_parsed_module $ dc_tcmod\n \n+      tythings = modInfoTyThings . tm_checked_module_info $ dc_tcmod\n+\n+      dc_tycons = MS.fromList . catMaybes . flip map tythings $ \\case\n+          ATyCon tycon ->\n+              let typename = Typename . packName . tyConName $ tycon\n+              in Just (typename, tycon)\n+          _ -> Nothing\n+\n+      dc_datacons = MS.fromList . catMaybes . flip map tythings $ \\case\n+          AConLike (RealDataCon datacon) ->\n+              let conname = Typename . packName . dataConName $ datacon\n+              in Just (conname, datacon)\n+          _ -> Nothing\n+\n+      dc_ids = MS.fromList . catMaybes . flip map tythings $ \\case\n+          AnId id ->"
  },
  {
    "id" : "0e012c45-46b8-40f5-8fac-a51bb6b9f30b",
    "prId" : 2132,
    "comments" : [
      {
        "id" : "70199f68-8395-4e90-a6a0-d8af720fb9a7",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "fwiw, list comprehensions also work quite nicely for this kind of stuff, e.g.,\r\n```\r\ndc_datacons = MS.fromList [ (conname, datacon) | AConLike (RealDataCon dataCon) <- tythings, let conname = â€¦]\r\n```",
        "createdAt" : "2019-07-15T07:16:23Z",
        "updatedAt" : "2019-07-15T10:08:09Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "45c880b0-cad6-4dcd-9c8b-871f5d91979e",
        "parentId" : "70199f68-8395-4e90-a6a0-d8af720fb9a7",
        "author" : null,
        "body" : "I like this, thanks :)",
        "createdAt" : "2019-07-15T07:58:35Z",
        "updatedAt" : "2019-07-15T10:08:09Z",
        "lastEditedBy" : null,
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "90a9bf83d6ffc1c38c9e00148662008080d387ea",
    "line" : null,
    "diffHunk" : "@@ -136,15 +148,33 @@ data DeclData = DeclData\n \n buildDocCtx :: TypecheckedModule -> DocCtx\n buildDocCtx dc_tcmod  =\n-  let dc_mod\n-          = Modulename . T.pack . moduleNameString . moduleName\n-          . ms_mod . pm_mod_summary . tm_parsed_module $ dc_tcmod\n+  let dc_mod = packModule . ms_mod . pm_mod_summary . tm_parsed_module $ dc_tcmod\n       dc_decls\n           = map (uncurry DeclData) . collectDocs . hsmodDecls . unLoc\n           . pm_parsed_source . tm_parsed_module $ dc_tcmod\n       (dc_templates, dc_choices)\n           = getTemplateData . tm_parsed_module $ dc_tcmod\n \n+      tythings = modInfoTyThings . tm_checked_module_info $ dc_tcmod\n+\n+      dc_tycons = MS.fromList . catMaybes . flip map tythings $ \\case\n+          ATyCon tycon ->\n+              let typename = Typename . packName . tyConName $ tycon\n+              in Just (typename, tycon)\n+          _ -> Nothing\n+\n+      dc_datacons = MS.fromList . catMaybes . flip map tythings $ \\case\n+          AConLike (RealDataCon datacon) ->"
  },
  {
    "id" : "6e040443-00e3-478a-a502-bdc5b1bb3aba",
    "prId" : 2132,
    "comments" : [
      {
        "id" : "a4085294-702e-4cc0-bb90-2062e9698357",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Iâ€™d be more comfortable if we could pass the `TyCon` into `typeApp` and then use GHCâ€™s `isTupleTyCon`.",
        "createdAt" : "2019-07-15T07:21:36Z",
        "updatedAt" : "2019-07-15T10:08:09Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "297a27ee-50c1-4cf4-9b0b-8224f0b66190",
        "parentId" : "a4085294-702e-4cc0-bb90-2062e9698357",
        "author" : null,
        "body" : "good idea :)",
        "createdAt" : "2019-07-15T07:33:58Z",
        "updatedAt" : "2019-07-15T10:08:09Z",
        "lastEditedBy" : null,
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "90a9bf83d6ffc1c38c9e00148662008080d387ea",
    "line" : null,
    "diffHunk" : "@@ -422,84 +455,110 @@ docToText = DocText . T.strip . T.unlines . go . T.lines . T.pack . unpackHDS\n     stripLine limit = T.stripEnd . stripLeading limit\n     stripLeading limit = T.pack . map snd . dropWhile (\\(i, c) -> i < limit && isSpace c) . zip [0..] . T.unpack\n \n--- | show a parsed ID (IdP GhcPs == RdrName) as a string\n-idpToText :: IdP GhcPs -> T.Text\n-idpToText = T.pack . Out.showSDocUnsafe . Out.ppr\n-\n-typenameFromRdrName :: RdrName -> Typename\n-typenameFromRdrName = Typename . idpToText\n-\n----------------------------------------------------------------------\n-\n-hsTypeToContext :: LHsType GhcPs -> Maybe DDoc.Type\n-hsTypeToContext (L _ HsQualTy{..}) = case unLoc hst_ctxt of\n-    [] -> Nothing\n-    xs -> Just $ TypeTuple $ map hsTypeToType xs\n-hsTypeToContext _ = Nothing\n-\n+-- | Turn an Id into Text by taking the unqualified name it represents.\n+packId :: Id -> T.Text\n+packId = packName . idName\n \n-hsTypeToType :: LHsType GhcPs -> DDoc.Type\n-hsTypeToType (L _ t) = hsTypeToType_ t\n+-- | Turn a Name into Text by taking the unqualified name it represents.\n+packName :: Name -> T.Text\n+packName = packOccName . nameOccName\n \n-hsTypeToType_ :: HsType GhcPs -> DDoc.Type\n-hsTypeToType_ t = case t of\n+-- | Turn an OccName into Text by taking the unqualified name it represents.\n+packOccName :: OccName -> T.Text\n+packOccName = T.pack . occNameString\n \n-  -- drop context things\n-  HsForAllTy{..} -> hsTypeToType hst_body\n-  HsQualTy {..} -> hsTypeToType hst_body\n-  HsBangTy _ _b ty -> hsTypeToType ty\n+-- | Turn a RdrName into Text by taking the unqualified name it represents.\n+packRdrName :: RdrName -> T.Text\n+packRdrName = packOccName . rdrNameOcc\n \n-  -- drop comments (we might want to re-add those at some point)\n-  HsDocTy _ ty _doc -> hsTypeToType ty\n+-- | Turn a GHC Module into a Modulename. (Unlike the above functions,\n+-- we only ever want this to be a Modulename, so no reason to return\n+-- Text.)\n+packModule :: Module -> Modulename\n+packModule = Modulename . T.pack . moduleNameString . moduleName\n \n-  -- special tuple syntax\n-  HsTupleTy _ _con tys -> TypeTuple $ map hsTypeToType tys\n-\n-  -- GHC specials. FIXME deal with them specially\n-  HsRecTy _ _flds -> TypeApp Nothing (Typename $ toText t) [] -- FIXME pprConDeclFields flds\n-\n-  HsSumTy _ _tys -> undefined -- FIXME tupleParens UnboxedTuple (pprWithBars ppr tys)\n-\n-\n-  -- straightforward base case\n-  HsTyVar _ _ (L _ name) -> TypeApp Nothing (Typename $ idpToText name) []\n-\n-  HsFunTy _ ty1 ty2 -> case hsTypeToType ty2 of\n-    TypeFun as -> TypeFun $ hsTypeToType ty1 : as\n-    ty22 -> TypeFun [hsTypeToType ty1, ty22]\n-\n-  HsKindSig _ ty _kind -> hsTypeToType ty\n-\n-  HsListTy _ ty -> TypeList (hsTypeToType ty)\n-\n-  HsIParamTy _ _n ty -> hsTypeToType ty\n-  -- currently bailing out when we meet promoted structures\n-  HsSpliceTy _ _s     -> unexpected \"splice\"\n-  HsExplicitListTy _ _ _tys ->  unexpected \"explicit list\"\n-  HsExplicitTupleTy _ _tys  -> unexpected \"explicit tuple\"\n-\n-  HsTyLit _ ty      -> TypeApp Nothing (Typename $ toText ty) []\n-  -- kind things. Can be printed, not sure why we would\n-  HsWildCardTy {}   -> TypeApp Nothing (Typename \"_\") []\n-  HsStarTy _ _      -> TypeApp Nothing (Typename \"*\") []\n-\n-  HsAppTy _ fun_ty arg_ty ->\n-    case hsTypeToType fun_ty of\n-      TypeApp m f as -> TypeApp m f $ as <> [hsTypeToType arg_ty]  -- flattens app chains\n-      TypeFun _ -> unexpected \"function type in a type app\"\n-      TypeList _   -> unexpected \"list type in a type app\"\n-      TypeTuple _   -> unexpected \"tuple type in a type app\"\n+---------------------------------------------------------------------\n \n-  HsAppKindTy _ _ _ -> unexpected \"kind application\"\n+-- | Create an anchor from a TyCon. Don't make anchors for wired in names.\n+tyConAnchor :: DocCtx -> TyCon -> Maybe Anchor\n+tyConAnchor DocCtx{..} tycon = do\n+    let ghcName = tyConName tycon\n+        name = Typename . packName $ ghcName\n+        mod = maybe dc_mod packModule (nameModule_maybe ghcName)\n+        anchorFn\n+            | isClassTyCon tycon = classAnchor\n+            | isDataTyCon tycon = dataAnchor\n+            | otherwise = typeAnchor\n+    guard (not (isWiredInName ghcName))\n+    Just (anchorFn mod name)\n \n-  HsOpTy _ ty1 (L _ op) ty2 ->\n-    TypeApp Nothing (Typename $ toText op) [ hsTypeToType ty1, hsTypeToType ty2 ]\n+---------------------------------------------------------------------\n \n-  HsParTy _ ty  -> hsTypeToType ty\n+-- | Extract context from GHC type. Returns Nothing if there are no constraints.\n+typeToContext :: DocCtx -> TyCoRep.Type -> Maybe DDoc.Type\n+typeToContext dc ty =\n+    let ctx = typeToConstraints dc ty\n+    in guard (notNull ctx) >> Just (TypeTuple ctx)\n+\n+-- | Extract constraints from GHC type, returning list of constraints.\n+typeToConstraints :: DocCtx -> TyCoRep.Type -> [DDoc.Type]\n+typeToConstraints dc = \\case\n+    FunTy a@(TyConApp tycon _) b | isClassTyCon tycon ->\n+        typeToType dc a : typeToConstraints dc b\n+    FunTy _ b ->\n+        typeToConstraints dc b\n+    ForAllTy _ b -> -- TODO: I think forall can introduce constraints?\n+        typeToConstraints dc b\n+    _ -> []\n+\n+\n+-- | Convert GHC Type into a damldoc type, ignoring constraints.\n+typeToType :: DocCtx -> TyCoRep.Type -> DDoc.Type\n+typeToType ctx = \\case\n+    TyVarTy var -> TypeApp Nothing (Typename $ packId var) []\n+    AppTy a b ->\n+        case typeToType ctx a of\n+            TypeApp m f bs -> TypeApp m f (bs <> [typeToType ctx b]) -- flatten app chains\n+            TypeFun _ -> unexpected \"function type in a type app\"\n+            TypeList _ -> unexpected \"list type in a type app\"\n+            TypeTuple _ -> unexpected \"tuple type in a type app\"\n+    TyConApp tycon bs ->\n+        typeApp\n+            (tyConAnchor ctx tycon)\n+            (Typename . packName . tyConName $ tycon)\n+            (map (typeToType ctx) bs)\n+\n+    -- ignore context\n+    ForAllTy _ b -> typeToType ctx b\n+    FunTy (TyConApp tycon _) b | isClassTyCon tycon ->\n+        typeToType ctx b\n+\n+    FunTy a b ->\n+        case typeToType ctx b of\n+            TypeFun bs -> TypeFun (typeToType ctx a : bs) -- flatten function types\n+            b' -> TypeFun [typeToType ctx a, b']\n+\n+    CastTy a _ -> typeToType ctx a\n+    LitTy x -> TypeApp Nothing (Typename $ toText x) []\n+    CoercionTy _ -> unexpected \"coercion\" -- TODO?\n \n-  XHsType _t -> unexpected \"XHsType\"\n+  where\n+    -- | Deal with list and tuple type constructors specially.\n+    typeApp _ (Typename \"[]\") [x] = TypeList x\n+    typeApp _ (Typename c) xs | isTupleCons (T.unpack c) = TypeTuple xs\n+    typeApp anchor name xs = TypeApp anchor name xs\n+\n+    -- | Is the input a tuple constructor?\n+    isTupleCons xs = and"
  }
]