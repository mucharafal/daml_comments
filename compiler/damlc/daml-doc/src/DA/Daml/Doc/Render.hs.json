[
  {
    "id" : "f8e754b5-70bc-45a7-b83e-949bc9fe45ab",
    "prId" : 2259,
    "comments" : [
      {
        "id" : "24f2c5e2-8380-40d0-968b-948f31c2c59e",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Might be worth adding a comment that the conversion to Html is done in postProcessing. I first thought this was a typo :slightly_smiling_face: ",
        "createdAt" : "2019-07-23T11:00:39Z",
        "updatedAt" : "2019-07-23T16:24:56Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "d33ab23a-924f-46a5-97ce-c8bca8c608d1",
        "parentId" : "24f2c5e2-8380-40d0-968b-948f31c2c59e",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Maybe this can be made clearer in code by something like\r\n```haskell\r\nlet (renderModule, postProcessing) = case ro_format of\r\n      Markdown -> (renderSimpleMD, id)\r\n      Html -> (renderSimpleMD, GFM.commonmarkToHtml [GFM.optUnsafe] [GFM.extTable])\r\n      ...\r\n```",
        "createdAt" : "2019-07-23T12:21:41Z",
        "updatedAt" : "2019-07-23T16:24:56Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "0060b089-8e5b-4008-b1ac-f040fdc49827",
        "parentId" : "24f2c5e2-8380-40d0-968b-948f31c2c59e",
        "author" : null,
        "body" : "Oh, that is more intuitive :-)",
        "createdAt" : "2019-07-23T16:07:08Z",
        "updatedAt" : "2019-07-23T16:24:56Z",
        "lastEditedBy" : null,
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "2ed4fda9eea075172b450f1f9bef15880ed2a82c",
    "line" : null,
    "diffHunk" : "@@ -5,49 +5,112 @@\n \n module DA.Daml.Doc.Render\n   ( DocFormat(..)\n-  , renderFinish\n+  , RenderOptions(..)\n+  , RenderMode(..)\n+  , renderDocs\n+  , renderPage\n   , renderSimpleRst\n   , renderSimpleMD\n-  , renderSimpleHtml\n   , renderSimpleHoogle\n   , jsonConf\n   ) where\n \n+import DA.Daml.Doc.Render.Types\n import DA.Daml.Doc.Render.Monoid\n import DA.Daml.Doc.Render.Rst\n import DA.Daml.Doc.Render.Markdown\n import DA.Daml.Doc.Render.Hoogle\n import DA.Daml.Doc.Types\n \n+import Data.Maybe\n+import Data.List.Extra\n+import Data.Foldable\n+import System.Directory\n+import System.FilePath\n+\n import qualified CMarkGFM as GFM\n import qualified Data.Aeson.Encode.Pretty as AP\n import qualified Data.Text as T\n-import qualified Data.Text.Lazy as TL\n-import qualified Text.Blaze.Html5 as H\n-import qualified Text.Blaze.Html.Renderer.Text as H\n+import qualified Data.Text.Encoding as T\n+import qualified Data.ByteString as BS\n+import qualified Data.Map.Strict as Map\n \n \n -- | centralised JSON configuration for pretty-printing\n jsonConf :: AP.Config\n jsonConf = AP.Config (AP.Spaces 2) (AP.keyOrder [\"id\"]) AP.Generic True\n \n+renderDocs :: RenderOptions -> [ModuleDoc] -> IO ()\n+renderDocs RenderOptions{..} mods = do\n+    let renderModule =\n+            case ro_format of\n+                Json -> const (renderLine \"\") -- not implemented (yet?)\n+                Hoogle -> const (renderLine \"\") -- not implemented (yet?)\n+                Rst -> renderSimpleRst\n+                Markdown -> renderSimpleMD\n+                Html -> renderSimpleMD"
  },
  {
    "id" : "0e9a5af0-017c-49d9-b35e-1389dfe40a07",
    "prId" : 2259,
    "comments" : [
      {
        "id" : "c729535f-d981-434c-891e-1bdc206a724c",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "If this starts becoming more complex we might want to switch to some standard templating library, e.g., `mustache`. For now this is totally fine.",
        "createdAt" : "2019-07-23T11:02:22Z",
        "updatedAt" : "2019-07-23T16:24:56Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "13bc829c-bf7b-4960-86d2-6042e538aa06",
        "parentId" : "c729535f-d981-434c-891e-1bdc206a724c",
        "author" : null,
        "body" : "Agreed :-) ",
        "createdAt" : "2019-07-23T16:14:58Z",
        "updatedAt" : "2019-07-23T16:24:56Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "2ed4fda9eea075172b450f1f9bef15880ed2a82c",
    "line" : 102,
    "diffHunk" : "@@ -5,49 +5,112 @@\n \n module DA.Daml.Doc.Render\n   ( DocFormat(..)\n-  , renderFinish\n+  , RenderOptions(..)\n+  , RenderMode(..)\n+  , renderDocs\n+  , renderPage\n   , renderSimpleRst\n   , renderSimpleMD\n-  , renderSimpleHtml\n   , renderSimpleHoogle\n   , jsonConf\n   ) where\n \n+import DA.Daml.Doc.Render.Types\n import DA.Daml.Doc.Render.Monoid\n import DA.Daml.Doc.Render.Rst\n import DA.Daml.Doc.Render.Markdown\n import DA.Daml.Doc.Render.Hoogle\n import DA.Daml.Doc.Types\n \n+import Data.Maybe\n+import Data.List.Extra\n+import Data.Foldable\n+import System.Directory\n+import System.FilePath\n+\n import qualified CMarkGFM as GFM\n import qualified Data.Aeson.Encode.Pretty as AP\n import qualified Data.Text as T\n-import qualified Data.Text.Lazy as TL\n-import qualified Text.Blaze.Html5 as H\n-import qualified Text.Blaze.Html.Renderer.Text as H\n+import qualified Data.Text.Encoding as T\n+import qualified Data.ByteString as BS\n+import qualified Data.Map.Strict as Map\n \n \n -- | centralised JSON configuration for pretty-printing\n jsonConf :: AP.Config\n jsonConf = AP.Config (AP.Spaces 2) (AP.keyOrder [\"id\"]) AP.Generic True\n \n+renderDocs :: RenderOptions -> [ModuleDoc] -> IO ()\n+renderDocs RenderOptions{..} mods = do\n+    let renderModule =\n+            case ro_format of\n+                Json -> const (renderLine \"\") -- not implemented (yet?)\n+                Hoogle -> const (renderLine \"\") -- not implemented (yet?)\n+                Rst -> renderSimpleRst\n+                Markdown -> renderSimpleMD\n+                Html -> renderSimpleMD\n+        postProcessing =\n+            case ro_format of\n+                Html -> GFM.commonmarkToHtml [GFM.optUnsafe] [GFM.extTable]\n+                _ -> id\n+        template = fromMaybe (defaultTemplate ro_format) ro_template\n+\n+    case ro_mode of\n+        RenderToFile path -> do\n+            BS.writeFile path\n+                . T.encodeUtf8\n+                . renderTemplate template\n+                    (fromMaybe \"Package Docs\" ro_title)\n+                . postProcessing\n+                . renderPage\n+                $ mconcatMap renderModule mods\n+\n+        RenderToFolder path -> do\n+            let renderMap = Map.fromList\n+                    [(md_name mod, renderModule mod) | mod <- mods]\n+                outputMap = renderFolder renderMap\n+                extension =\n+                    case ro_format of\n+                        Json -> \"json\"\n+                        Hoogle -> \"txt\"\n+                        Markdown -> \"md\"\n+                        Rst -> \"rst\"\n+                        Html -> \"html\"\n+\n+                outputPath mod = path </> moduleNameToFileName mod <.> extension\n+                pageTitle mod = T.concat\n+                    [ maybe \"\" (<> \" - \") ro_title\n+                    , \"Module \"\n+                    , unModulename mod ]\n \n--- TODO rendering structures closely resembles each other. Could share code and\n--- use a common typeclass if need be (unsure about ROI so far).\n+            createDirectoryIfMissing True path\n+            for_ (Map.toList outputMap) $ \\ (mod, renderedOutput) -> do\n+                BS.writeFile (outputPath mod)\n+                    . T.encodeUtf8\n+                    . renderTemplate template (pageTitle mod)\n+                    . postProcessing\n+                    $ renderedOutput\n \n-data DocFormat = Json | Rst | Markdown | Html | Hoogle\n-  deriving (Eq, Show, Read, Enum, Bounded)\n \n+renderTemplate ::\n+    T.Text -- ^ template\n+    -> T.Text -- ^ page title\n+    -> T.Text -- ^ page body\n+    -> T.Text\n+renderTemplate template pageTitle pageBody\n+    = T.replace \"__BODY__\" pageBody"
  }
]