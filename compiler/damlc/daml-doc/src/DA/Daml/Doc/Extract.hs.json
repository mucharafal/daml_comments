[
  {
    "id" : "a9061e6e-f291-40a9-a256-a51aa2ce83b5",
    "prId" : 4112,
    "comments" : [
      {
        "id" : "6cec8b22-05c3-4586-ae15-95fc84e32647",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "This looks like we will attach a `DocCommentPrev` at the beginning to the next declaration which seems odd. I _think_ this is the same behavior as before but it seems weird. Is there a case where this actually makes sense?",
        "createdAt" : "2020-01-20T14:49:15Z",
        "updatedAt" : "2020-01-20T15:37:55Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "6b45daa5-5c8b-41dd-ae1e-8783abcf0e71",
        "parentId" : "6cec8b22-05c3-4586-ae15-95fc84e32647",
        "author" : null,
        "body" : "I'm not sure if it comes up in practice, but if a `DocCommentNext` is followed up by a `DocCommentPrev` ... or we have a `DocCommentPrev` at the beginning of the list ... this will treat the `DocCommentPrev` as a `DocCommentNext` instead of silently ignoring it or treating it as a standalone declaration. ",
        "createdAt" : "2020-01-20T15:36:25Z",
        "updatedAt" : "2020-01-20T15:37:55Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "963c4e5ed4bd0c0fab26ee50c703b5f58e68582b",
    "line" : 112,
    "diffHunk" : "@@ -1,1 +103,107 @@collectDocs :: [LHsDecl GhcPs] -> [DeclData]\ncollectDocs ds\n    | (nextDocs, decl:ds') <- spanMaybe getNextOrPrevDoc ds\n    , (prevDocs, ds'') <- spanMaybe getPrevDoc ds'\n    = DeclData decl (joinDocs nextDocs prevDocs)"
  },
  {
    "id" : "68242555-8df1-45eb-99aa-a5dbda3957bb",
    "prId" : 3670,
    "comments" : [
      {
        "id" : "1e4b20cb-cfcc-4111-81b2-4a967d6fc6ef",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "@associahedron I’ve hacked around this for now since I don’t want to clutter this PR too much but we should kill the generic templates support from `daml-docs` in a separate PR.",
        "createdAt" : "2019-11-29T09:48:59Z",
        "updatedAt" : "2019-11-29T13:04:50Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "d3cf64f9-9899-419e-897b-da0d9dc7c2b9",
        "parentId" : "1e4b20cb-cfcc-4111-81b2-4a967d6fc6ef",
        "author" : null,
        "body" : "Makes sense. I can do it if you don't mind.",
        "createdAt" : "2019-11-29T11:17:57Z",
        "updatedAt" : "2019-11-29T13:04:50Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "abb363aad65b2173e41b6b0e0e9a16e83c6474a2",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +124,128 @@            (adts, md_templateInstances) =\n                partitionEithers . flip map filteredTyCons $ \\adt ->\n                    case find (\\td -> td_name td == ad_name adt) md_templates of\n                        Nothing -> Left adt\n                        Just td -> Right TemplateInstanceDoc"
  },
  {
    "id" : "8d85e088-0926-4b93-8a5d-3920f0b72d3e",
    "prId" : 3165,
    "comments" : [
      {
        "id" : "331f3cd0-cdeb-45e9-90f5-9b6b4cb7dd1d",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Can we be more specific here and at least check the module name this is coming from, maybe even the package id?",
        "createdAt" : "2019-10-14T11:56:37Z",
        "updatedAt" : "2019-10-14T15:24:22Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "66a1ee81-375e-4e2b-bff0-02df7197b226",
        "parentId" : "331f3cd0-cdeb-45e9-90f5-9b6b4cb7dd1d",
        "author" : null,
        "body" : "Based on my reading of the code, there's no way to be more specific here without rewriting the way we extract template data from the module. That's probably worth doing at some point.",
        "createdAt" : "2019-10-14T15:34:16Z",
        "updatedAt" : "2019-10-14T15:34:28Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "b1bf6930f83002bbac256a37b2ca19c53473b676",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +511,515 @@                             }\n\n            dummyName (Typename \"Archive\") = Typename \"Archive\"\n            dummyName (Typename t) = Typename $ \"External:\" <> t\n"
  },
  {
    "id" : "0b3fdbe3-3a0f-4bad-bd6a-ccd728af1d1b",
    "prId" : 2667,
    "comments" : [
      {
        "id" : "68574373-5501-4ea1-9ea3-61eccaa62a5c",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Note to myself and other reviewers: This corresponds to most of what `memberDocs` did before. What changed is that now we postprocess this with `getMethodDocs`.",
        "createdAt" : "2019-08-27T11:15:17Z",
        "updatedAt" : "2019-08-27T12:05:42Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "d42c9a445d00d6609a82fee50c9ba51fa1ee4914",
    "line" : 122,
    "diffHunk" : "@@ -1,1 +296,300 @@    -- and then use collectDocs.\n    -- This is the equivalent of Haddock’s Haddock.Interface.Create.classDecls.\n    subDecls :: [(LHsDecl GhcPs, Maybe DocText)]\n    subDecls = collectDocs . sortOn getLoc $ decls\n    decls = docs ++ defs ++ sigs ++ ats"
  },
  {
    "id" : "99f25728-f013-421b-9c96-235b4f2d81c1",
    "prId" : 2632,
    "comments" : [
      {
        "id" : "341df1d3-9149-41e5-80c1-c7099a8f24ef",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Do we expect to ever reach this case atm? If not, maybe just call `error` so we see if we mess it up instead of silently doing something that might be wrong?",
        "createdAt" : "2019-08-22T12:29:14Z",
        "updatedAt" : "2019-08-22T13:17:36Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "bbcd2c41d3a0b442a584d575d784209b0d007d0b",
    "line" : 55,
    "diffHunk" : "@@ -1,1 +343,347 @@\n                _ -> Just context\n                    -- TODO: Move to using a more appropriate type\n                    -- for contexts in damldocs, to avoid this case.\n        }"
  },
  {
    "id" : "ab282254-8e52-4b9e-a50c-49126231ed94",
    "prId" : 2589,
    "comments" : [
      {
        "id" : "ed857126-1630-41eb-a300-00b3c2890d2b",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Does it ever happen that we get `Nothing` here but `nameModule_maybe` returns `Just`? My understanding was that during compilation we have an `IndefiniteUnitId` for the current package so that case should already check for whether the name is from the current package.",
        "createdAt" : "2019-08-19T10:03:37Z",
        "updatedAt" : "2019-08-21T09:33:33Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "3b18f5b7-2e40-499f-99b5-fb33880d80ea",
        "parentId" : "ed857126-1630-41eb-a300-00b3c2890d2b",
        "author" : null,
        "body" : "Hm. It seems to affect the docs somehow (if I remove this check, the instances disappear from the golden tests ... which seems like a bug. But it does suggest that by the time we look at instances the unit IDs are no longer indefinite.). I need to investigate this further.",
        "createdAt" : "2019-08-21T09:14:22Z",
        "updatedAt" : "2019-08-21T09:33:33Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "c2181a45-326d-493b-880e-7671a0ec1e67",
        "parentId" : "ed857126-1630-41eb-a300-00b3c2890d2b",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "It could very well just be me misunderstanding unit ids. No need to investigate this before merging or even anytime soon if it works but maybe add a comment.",
        "createdAt" : "2019-08-21T09:15:49Z",
        "updatedAt" : "2019-08-21T09:33:33Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "80f5251971e764b85072660bef0b75497f5e4d90",
    "line" : 33,
    "diffHunk" : "@@ -1,1 +647,651 @@    let ghcName = tyConName tycon\n        referencePackage = do\n            guard (not (nameIsHomePackage dc_ghcMod ghcName))\n            mod <- nameModule_maybe ghcName\n            modulePackage mod"
  },
  {
    "id" : "dc2bcd1a-8fbb-4d34-8cd6-94911a62198a",
    "prId" : 2492,
    "comments" : [
      {
        "id" : "d9a15e45-2af3-48bc-b387-b3a57cd3d8a1",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "🕴️",
        "createdAt" : "2019-08-12T14:38:12Z",
        "updatedAt" : "2019-08-12T14:46:58Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "c9036c763dbb375fc675db8191ae81710f66b9b0",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +704,708 @@\n    -- Special case for unsaturated (->) to remove the levity arguments.\n    TyConApp tycon (_:_:bs) | isFunTyCon tycon ->\n        TypeApp\n            Nothing"
  },
  {
    "id" : "5e2ef771-e889-4d72-8423-9511c0eb008d",
    "prId" : 2487,
    "comments" : [
      {
        "id" : "3ccddc1b-a8d2-45b1-b4b2-ac1fd015e2be",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "I wonder if it would make sense to add a phantom type parameter indicating the “phase”, i.e., whetehr we are before or after `distributeInstanceDocs`.",
        "createdAt" : "2019-08-12T12:13:20Z",
        "updatedAt" : "2019-08-12T12:42:13Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "9bc45126-72f0-4b7d-bf42-ac2da545087f",
        "parentId" : "3ccddc1b-a8d2-45b1-b4b2-ac1fd015e2be",
        "author" : null,
        "body" : "I think it's a bit much, but I'll keep it in mind for the future.",
        "createdAt" : "2019-08-12T12:24:37Z",
        "updatedAt" : "2019-08-12T12:42:13Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "e788b2a993c57598623ba9cd06bff1615ac6bb39",
    "line" : 55,
    "diffHunk" : "@@ -1,1 +364,368 @@            ad_anchor = Just $ typeAnchor dc_modname ad_name\n            ad_constrs = mapMaybe (constrDoc ad_name) . dd_cons $ tcdDataDefn\n            ad_instances = Nothing -- filled out later in 'distributeInstanceDocs'\n        guard (exportsType dc_exports ad_name)\n        Just (ad_name, ADTDoc {..})"
  },
  {
    "id" : "9c7a2a51-5fa1-489c-9e77-a058e0f1ae83",
    "prId" : 2394,
    "comments" : [
      {
        "id" : "c6b401c7-075b-4acc-a6d4-39fdd1992b1f",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "This option seems weird to me. Why would you want to qualify stuff from the same package but not stuff from other packages?",
        "createdAt" : "2019-08-05T11:06:17Z",
        "updatedAt" : "2019-08-05T12:47:50Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "33daae08-8126-427e-95b1-af68fd56d6b2",
        "parentId" : "c6b401c7-075b-4acc-a6d4-39fdd1992b1f",
        "author" : null,
        "body" : "That's why it's an option from many. I think the main reason you'd want it is if your package has some strange convention (...like where you name all your types `T` like in OCaml...), but you still want the standard library (& other packages) to be unqualified like the default.",
        "createdAt" : "2019-08-05T11:11:27Z",
        "updatedAt" : "2019-08-05T12:47:50Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "00fb9f4c-f4a7-4be1-907f-7e22db971bf4",
        "parentId" : "c6b401c7-075b-4acc-a6d4-39fdd1992b1f",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "That makes sense. Thanks a lot for the explanation. I have not thought of using the OCaml convention in DAML but I know some people who do use it. :)",
        "createdAt" : "2019-08-05T11:20:22Z",
        "updatedAt" : "2019-08-05T12:47:50Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "0b9d15a77e50bf8780331c378c6b7080345b1c42",
    "line" : 36,
    "diffHunk" : "@@ -1,1 +58,62 @@data QualifyTypes\n    = QualifyTypesAlways\n    | QualifyTypesInPackage\n    | QualifyTypesNever\n    deriving (Eq, Show, Read)"
  },
  {
    "id" : "508ca824-090d-46db-94e7-0f5403f83dbc",
    "prId" : 2394,
    "comments" : [
      {
        "id" : "493826bc-1867-4f2a-b0fd-c19bd016962f",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "I'm not convinced this option is a good idea in a Haskell-based language since you cannot refer to `X.Y.z` as `Y.z` when you're in `X`. (In OCaml this would be a great option though.)",
        "createdAt" : "2019-08-05T11:08:09Z",
        "updatedAt" : "2019-08-05T12:47:50Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "0941ecb8-7cff-466d-be9e-6462375093cd",
        "parentId" : "493826bc-1867-4f2a-b0fd-c19bd016962f",
        "author" : {
          "login" : "jberthold-da",
          "name" : "Jost Berthold",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/28879196?u=41dee6fb7ab2761a566b324e2f4e5ad9b577ae0e&v=4"
        },
        "body" : "I see this option as a viable compromise to achieve a short but qualified name . Use case being something like `import X.Y.Z.Blah as Blah` - imported `stuff` may come out as `Z.Blah.stuff` but that is better than the full name or simply `stuff`.",
        "createdAt" : "2019-08-05T11:27:32Z",
        "updatedAt" : "2019-08-05T12:47:50Z",
        "lastEditedBy" : {
          "login" : "jberthold-da",
          "name" : "Jost Berthold",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/28879196?u=41dee6fb7ab2761a566b324e2f4e5ad9b577ae0e&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "5afc9993-42d9-4bbc-b559-f3cc109c3ba6",
        "parentId" : "493826bc-1867-4f2a-b0fd-c19bd016962f",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "I disagree that `Z.Blah.stuff` is better than `X.Y.Z.Blah.stuff` or `stuff`. If there's actually something whose fully qualified names is `Z.Blah.stuff`, this can be incredibly confusing.",
        "createdAt" : "2019-08-05T12:21:46Z",
        "updatedAt" : "2019-08-05T12:47:50Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "5315808c-d5d2-44c1-991c-436ba894b670",
        "parentId" : "493826bc-1867-4f2a-b0fd-c19bd016962f",
        "author" : null,
        "body" : "The links are still pointing to the right place though, it's just the text that is a little more qualified. This really is for the use case where fully unqualified names (the default) are too ambiguous (e.g. with OCaml convention), but fully qualified names are overly verbose. Some ambiguity is expected.",
        "createdAt" : "2019-08-05T12:25:34Z",
        "updatedAt" : "2019-08-05T12:47:50Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "0b9d15a77e50bf8780331c378c6b7080345b1c42",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +52,56 @@    { eo_qualifyTypes :: QualifyTypes\n        -- ^ qualify non-local types\n    , eo_simplifyQualifiedTypes :: Bool\n        -- ^ drop common module prefix when qualifying types\n    } deriving (Eq, Show, Read)"
  },
  {
    "id" : "25c2bb90-daaf-4d9c-bcc8-5a1d2d3d4b75",
    "prId" : 2394,
    "comments" : [
      {
        "id" : "b8e51bfb-321d-4f54-ac28-2f3695582860",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Is `dc_modname` the same as the root module of your DALF? In that case, I am not sure this option is very useful as a lot of people seem to just call that module `LibraryModules`. Maybe an option that strips away everything but the last component would be more useful? (I realize that this makes things potentially ambiguous.)",
        "createdAt" : "2019-08-05T11:32:52Z",
        "updatedAt" : "2019-08-05T12:47:50Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "0f2ed141-b2a6-4395-97cc-acf6e8779ef3",
        "parentId" : "b8e51bfb-321d-4f54-ac28-2f3695582860",
        "author" : null,
        "body" : "`dc_modname` is the name of the current module.\r\n\r\n> Maybe an option that strips away everything but the last component would be more useful?\r\n\r\nThat's definitely another possibility.",
        "createdAt" : "2019-08-05T11:37:41Z",
        "updatedAt" : "2019-08-05T12:47:50Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "addcc658-9ae0-4eb4-b526-4528458df8cf",
        "parentId" : "b8e51bfb-321d-4f54-ac28-2f3695582860",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Oh I see, in that case the current behavior seems fine.",
        "createdAt" : "2019-08-05T11:39:32Z",
        "updatedAt" : "2019-08-05T12:47:50Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "0b9d15a77e50bf8780331c378c6b7080345b1c42",
    "line" : 154,
    "diffHunk" : "@@ -1,1 +625,629 @@-- periods. For instance @dropCommonModulePrefix \"Foo.BarBaz\" \"Foo.BarSpam\"@\n-- will evaluate to @\"BarSpam\"@, not @\"Spam\"@.\ndropCommonModulePrefix :: Modulename -> Modulename -> Modulename\ndropCommonModulePrefix (Modulename baseMod) (Modulename targetMod) =\n    Modulename . T.intercalate \".\" $"
  }
]