[
  {
    "id" : "5600f2b1-12e6-4598-83db-0c21f96784c8",
    "prId" : 4807,
    "comments" : [
      {
        "id" : "a7b637cb-51f9-40d6-9850-d9080f7d5d07",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Under what circumstances is this lazier? Only if `>>=` involved some sort of function composition, as in `State` or `Reader` and in `Update` or `Scenario` because they get rewritten into some sort of `Reader` in the speedy compiler, right? `Optional` and `Either _` are unaffected by this. Should we add some documentation around this? Or should we add an internal type class for monads that allow for `debug`?",
        "createdAt" : "2020-03-04T15:39:18Z",
        "updatedAt" : "2020-03-04T15:45:32Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "6dc0bf9a-acc8-48ea-b65e-72fc0134ec3a",
        "parentId" : "a7b637cb-51f9-40d6-9850-d9080f7d5d07",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Given that I constantly get confused by strictness myself, I think trying to explain this in docs is probably going to do more harm than good. For `Either` it works as expected with and without this change but I think I managed to confuse myself sufficiently now to not be able to tell you why exactly :slightly_smiling_face: ",
        "createdAt" : "2020-03-04T16:20:38Z",
        "updatedAt" : "2020-03-04T16:20:38Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "c72d3341b427eb431e7830ecc69effad10916d2f",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +536,540 @@  -- Instead it will only be printed when you execute the monadic\n  -- action.\n  pure () >>= \\_ -> pure (trace x ())\n\n-- | Return the first element of a tuple."
  },
  {
    "id" : "62218645-42ea-44f8-b493-c63e4d7a899d",
    "prId" : 4552,
    "comments" : [
      {
        "id" : "e30e5d1a-211d-48cd-927e-1d425bc99846",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "It would be good to document why we give this the more restrictive constraint.",
        "createdAt" : "2020-02-17T17:11:16Z",
        "updatedAt" : "2020-02-18T13:22:23Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "ff01b9d3-446d-4309-8091-7654f5ea0865",
        "parentId" : "e30e5d1a-211d-48cd-927e-1d425bc99846",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Totally agreed. And done.",
        "createdAt" : "2020-02-17T17:59:17Z",
        "updatedAt" : "2020-02-18T13:22:23Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "e65fd8da34470a622c7f2e0a13f72ab5e3079ff7",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +87,91 @@-- by the first. This is like sequencing operators (such as the semicolon)\n-- in imperative languages.\n(>>) : Action m => m a -> m b -> m b\n-- NOTE(MH): We need an `Action` constraint here rather than an `Applicative`\n-- constrait since the conversion to DAML-LF rewrites `A >> B` into"
  },
  {
    "id" : "bcd2007e-4739-4f6a-adc2-284fa219645a",
    "prId" : 2163,
    "comments" : [
      {
        "id" : "74dd86a2-724d-4a69-80e7-5b3950e62ba0",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Not really sure what a better description would be but this seems like we should be able to come up with something better.",
        "createdAt" : "2019-07-16T14:09:19Z",
        "updatedAt" : "2019-07-17T07:09:05Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "2e9bc32b-b764-4307-9de7-e0c2d5d0c7f5",
        "parentId" : "74dd86a2-724d-4a69-80e7-5b3950e62ba0",
        "author" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "body" : "Yeah, I really don't like this either, but I don't know how to improve.",
        "createdAt" : "2019-07-16T14:14:11Z",
        "updatedAt" : "2019-07-17T07:09:05Z",
        "lastEditedBy" : {
          "login" : "bethaitman",
          "name" : "Beth Aitman",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/3482051?u=97f3942927ae304a99251ea448bb8b65b6024e74&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "a785640fe8d72eb256de0bbfe8b1eaf7c46d032e",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +50,54 @@    pure : a -> f a\n\n    -- | Sequentially apply the function.\n    --\n    -- A few functors support an implementation of `<*>` that is more"
  },
  {
    "id" : "4e7321b5-0ef3-466c-ba98-020da8780601",
    "prId" : 2163,
    "comments" : [
      {
        "id" : "0514983c-4a7a-48fa-a893-dc6d2879780c",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Good catch!",
        "createdAt" : "2019-07-16T14:09:56Z",
        "updatedAt" : "2019-07-17T07:09:05Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "a785640fe8d72eb256de0bbfe8b1eaf7c46d032e",
    "line" : 44,
    "diffHunk" : "@@ -1,1 +194,198 @@-- measures such as `error`.\n--\n-- The `Optional` type is also an `Action`.  It is a simple kind of error\n-- `Action`, where all errors are represented by `None`.  A richer\n-- error `Action` could be built using the `Data.Either.Either` type."
  }
]