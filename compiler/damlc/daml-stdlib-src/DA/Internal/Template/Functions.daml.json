[
  {
    "id" : "b87c5374-f0f1-4b06-bd51-8537fa12e34f",
    "prId" : 7146,
    "comments" : [
      {
        "id" : "3da48219-d77c-4dd0-937b-be4529e5a719",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "I'm not the biggest fan of this name but can't really think of anything better. Ideally, this would end in `ByKey`, like the other primitives for contract keys. How about `doesExistByKey`? cc @bame-da @cocreature ",
        "createdAt" : "2020-08-17T13:26:36Z",
        "updatedAt" : "2020-08-24T12:11:38Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "7bb55fc2-36e2-4867-8554-06b198b786b4",
        "parentId" : "3da48219-d77c-4dd0-937b-be4529e5a719",
        "author" : {
          "login" : "garyverhaegen-da",
          "name" : "Gary Verhaegen",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/45561385?u=eb17386ea66edbd0cd449e33b2d291bf5a1b51cb&v=4"
        },
        "body" : "But this is not checking for existence, as it may exist without you having permission to see it.",
        "createdAt" : "2020-08-17T14:26:34Z",
        "updatedAt" : "2020-08-24T12:11:38Z",
        "lastEditedBy" : {
          "login" : "garyverhaegen-da",
          "name" : "Gary Verhaegen",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/45561385?u=eb17386ea66edbd0cd449e33b2d291bf5a1b51cb&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "cbb62106-c2a3-4a68-a5ae-5367894077cd",
        "parentId" : "3da48219-d77c-4dd0-937b-be4529e5a719",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "I agree that the name sounds a bit weird but I cannot come up with anything better either. I do agree with @garyverhaegen-da that `doesExistByKey` is not an improvement.",
        "createdAt" : "2020-08-17T15:15:37Z",
        "updatedAt" : "2020-08-24T12:11:38Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "d83a3cc8-c9d5-43a0-92f8-165dd0525226",
        "parentId" : "3da48219-d77c-4dd0-937b-be4529e5a719",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "@bame-da Do you have something to add to the bikeshedding I initiated?",
        "createdAt" : "2020-08-17T16:28:27Z",
        "updatedAt" : "2020-08-24T12:11:38Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "5668ba6e-8a6f-4301-8f2e-837b54d309e5",
        "parentId" : "3da48219-d77c-4dd0-937b-be4529e5a719",
        "author" : {
          "login" : "garyverhaegen-da",
          "name" : "Gary Verhaegen",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/45561385?u=eb17386ea66edbd0cd449e33b2d291bf5a1b51cb&v=4"
        },
        "body" : "What about `canFetchContractByKey`?",
        "createdAt" : "2020-08-17T17:39:47Z",
        "updatedAt" : "2020-08-24T12:11:38Z",
        "lastEditedBy" : {
          "login" : "garyverhaegen-da",
          "name" : "Gary Verhaegen",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/45561385?u=eb17386ea66edbd0cd449e33b2d291bf5a1b51cb&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "e00c728b-6f68-4324-b4b2-beb7101561f1",
        "parentId" : "3da48219-d77c-4dd0-937b-be4529e5a719",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "That sounds pretty confusing given that it deliberately has different auth rules than `fetchByKey`.",
        "createdAt" : "2020-08-17T18:52:36Z",
        "updatedAt" : "2020-08-24T12:11:38Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "9d26d9dd-5739-43f6-ad3c-21c54b1ffa2f",
        "parentId" : "3da48219-d77c-4dd0-937b-be4529e5a719",
        "author" : {
          "login" : "bame-da",
          "name" : "Bernhard Elsner",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/40762178?u=28b5edbfe9271d5db3fcfa3b80d30f93cce4321f&v=4"
        },
        "body" : "How about `existsKey`. It will almost always be used like\r\n\r\n```\r\ne <- existsKey @t key\r\nif e\r\n  then ... \r\n  else ...\r\n```\r\n\r\nWith that name I can read that as \"If exists key k then ... else ...\"",
        "createdAt" : "2020-08-18T07:52:59Z",
        "updatedAt" : "2020-08-24T12:11:38Z",
        "lastEditedBy" : {
          "login" : "bame-da",
          "name" : "Bernhard Elsner",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/40762178?u=28b5edbfe9271d5db3fcfa3b80d30f93cce4321f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "2f5509ae-aad4-4e0a-b23a-0335bc1bf229",
        "parentId" : "3da48219-d77c-4dd0-937b-be4529e5a719",
        "author" : {
          "login" : "robin-da",
          "name" : "Robin Krom",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/14074936?u=1b47fdbdfd82ea534219fc1b94d646873c56a7d7&v=4"
        },
        "body" : "I like this one as well, even though it's not about the existence of the key, but the contract with that key.",
        "createdAt" : "2020-08-18T08:28:08Z",
        "updatedAt" : "2020-08-24T12:11:38Z",
        "lastEditedBy" : {
          "login" : "robin-da",
          "name" : "Robin Krom",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/14074936?u=1b47fdbdfd82ea534219fc1b94d646873c56a7d7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "c68d4166-0cf6-483c-a395-b34e7df87285",
        "parentId" : "3da48219-d77c-4dd0-937b-be4529e5a719",
        "author" : {
          "login" : "garyverhaegen-da",
          "name" : "Gary Verhaegen",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/45561385?u=eb17386ea66edbd0cd449e33b2d291bf5a1b51cb&v=4"
        },
        "body" : "> That sounds pretty confusing given that it deliberately has different auth rules than `fetchByKey`.\r\n\r\nI don't think so, given that `fetchByKey` explodes. It seems reasonable to me that it takes more care to ensure it will not blow up before calling it than to just call it and hope for the best.\r\n\r\nAlso, the name makes sense to me, given that the whole point of this function is to tell you whether you can call `fetchByKey` without exploding.",
        "createdAt" : "2020-08-18T13:41:28Z",
        "updatedAt" : "2020-08-24T12:11:38Z",
        "lastEditedBy" : {
          "login" : "garyverhaegen-da",
          "name" : "Gary Verhaegen",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/45561385?u=eb17386ea66edbd0cd449e33b2d291bf5a1b51cb&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "b495ee4f-ba9e-4722-9ea7-31734180e70c",
        "parentId" : "3da48219-d77c-4dd0-937b-be4529e5a719",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Having `canFetchContractByKey` return `False` in a case where `fetchByKey` succeeds seems pretty confusing to me. I think you need at least something like `canSafelyFetch…` but that’s an awkward name.",
        "createdAt" : "2020-08-18T13:53:16Z",
        "updatedAt" : "2020-08-24T12:11:38Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "cef5f3e2-1df6-48e5-b852-ad4d46ed9bd4",
        "parentId" : "3da48219-d77c-4dd0-937b-be4529e5a719",
        "author" : {
          "login" : "garyverhaegen-da",
          "name" : "Gary Verhaegen",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/45561385?u=eb17386ea66edbd0cd449e33b2d291bf5a1b51cb&v=4"
        },
        "body" : "Updated to `visibleByKey` for now as that seems to be the favourite per the ongoing Slack discussion. I'll give it one more day to settle down, and for anyone who really dislikes it to reach out.",
        "createdAt" : "2020-08-18T15:11:48Z",
        "updatedAt" : "2020-08-24T12:11:38Z",
        "lastEditedBy" : {
          "login" : "garyverhaegen-da",
          "name" : "Gary Verhaegen",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/45561385?u=eb17386ea66edbd0cd449e33b2d291bf5a1b51cb&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "4fc3351a23f3b5dd403214e0e6d5c60cf5c1289e",
    "line" : null,
    "diffHunk" : "@@ -322,3 +322,11 @@ fromAnyContractKey (AnyContractKey any rep)\n \n deriving instance Eq Archive\n deriving instance Show Archive\n+\n+-- | True if contract exists, fails if current context doesn't have permission to know.\n+canSeeContractWithKey : forall t k. (HasLookupByKey t k) => k -> Update Bool"
  },
  {
    "id" : "84ed513a-b88e-4b17-9524-4542703b1d87",
    "prId" : 7146,
    "comments" : [
      {
        "id" : "f34ce9e5-fff8-4708-9867-e8c85ff27db1",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "```suggestion\r\n    Some _ -> pure True\r\n    None -> pure False\r\n```",
        "createdAt" : "2020-08-17T13:27:11Z",
        "updatedAt" : "2020-08-24T12:11:38Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "07341f34-dc2a-4e61-b351-7a52a7257f0f",
        "parentId" : "f34ce9e5-fff8-4708-9867-e8c85ff27db1",
        "author" : {
          "login" : "garyverhaegen-da",
          "name" : "Gary Verhaegen",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/45561385?u=eb17386ea66edbd0cd449e33b2d291bf5a1b51cb&v=4"
        },
        "body" : "Done.",
        "createdAt" : "2020-08-17T14:30:53Z",
        "updatedAt" : "2020-08-24T12:11:38Z",
        "lastEditedBy" : {
          "login" : "garyverhaegen-da",
          "name" : "Gary Verhaegen",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/45561385?u=eb17386ea66edbd0cd449e33b2d291bf5a1b51cb&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "4fc3351a23f3b5dd403214e0e6d5c60cf5c1289e",
    "line" : null,
    "diffHunk" : "@@ -322,3 +322,11 @@ fromAnyContractKey (AnyContractKey any rep)\n \n deriving instance Eq Archive\n deriving instance Show Archive\n+\n+-- | True if contract exists, fails if current context doesn't have permission to know.\n+canSeeContractWithKey : forall t k. (HasLookupByKey t k) => k -> Update Bool\n+canSeeContractWithKey k = do\n+  m <- lookupByKey @t k\n+  case m of\n+    Some _ -> return True\n+    None -> return False"
  },
  {
    "id" : "40d609c5-5bbb-4b44-8f85-83b0495ad93f",
    "prId" : 5014,
    "comments" : [
      {
        "id" : "d8cfb848-5644-4709-af4d-d170365af609",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : ":tada: Now I can add `Ord` instances :slightly_smiling_face: ",
        "createdAt" : "2020-03-16T11:05:33Z",
        "updatedAt" : "2020-03-16T11:07:57Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "dce317df-2673-409e-b2ae-e2dc023e2ebb",
        "parentId" : "d8cfb848-5644-4709-af4d-d170365af609",
        "author" : null,
        "body" : "Yes :)",
        "createdAt" : "2020-03-16T11:08:52Z",
        "updatedAt" : "2020-03-16T11:08:52Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "627a181c-ef9c-4693-87a7-8e6a5760aa4d",
        "parentId" : "d8cfb848-5644-4709-af4d-d170365af609",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "The order for enums and variants still needs to be adjusted. ",
        "createdAt" : "2020-03-16T11:35:03Z",
        "updatedAt" : "2020-03-16T11:35:04Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "9624bbc8e99ef22fe521c17e57ef7ebef36b6457",
    "line" : 12,
    "diffHunk" : "@@ -243,6 +241,7 @@ instance Eq AnyChoice where\n instance Eq AnyContractKey where"
  },
  {
    "id" : "2a65f516-1602-4a47-9016-9fafee4facd2",
    "prId" : 4030,
    "comments" : [
      {
        "id" : "885bf054-a0e4-4b6f-8dba-4c8a1eec22dd",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "It looks like this comment belongs to `fetchByKey`.",
        "createdAt" : "2020-01-14T09:14:29Z",
        "updatedAt" : "2020-01-15T14:32:49Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "7524c66d-7aef-466c-98c1-7edcca3a356f",
        "parentId" : "885bf054-a0e4-4b6f-8dba-4c8a1eec22dd",
        "author" : null,
        "body" : "Oops, fixed!",
        "createdAt" : "2020-01-14T11:52:42Z",
        "updatedAt" : "2020-01-15T14:32:49Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "3a6d332937a2569a52ae38499c6fe1022c9fe04c",
    "line" : 134,
    "diffHunk" : "@@ -14,75 +14,115 @@ daml 1.2\n -- | MOVE Prelude DAML-LF primitives, just templates/contracts\n module DA.Internal.Template.Functions where\n \n+#ifdef DAML_ANY_TYPE\n import DA.Internal.Any\n+#endif\n import DA.Internal.LF\n import DA.Internal.Prelude\n import DA.Internal.Template\n \n-class Template t where\n+-- | Constraints satisfied by template types.\n+type Template t =\n+  ( HasSignatory t\n+  , HasObserver t\n+  , HasEnsure t\n+  , HasAgreement t\n+  , HasCreate t\n+  , HasFetch t\n+  , HasArchive t\n+#ifdef DAML_TYPE_REP\n+  , HasTemplateTypeRep t\n+#ifdef DAML_ANY_TYPE\n+  , HasToAnyTemplate t\n+  , HasFromAnyTemplate t\n+#endif\n+#endif\n+  )\n \n+class HasSignatory t where\n   -- | The signatories of a contract.\n   signatory : t -> [Party]\n \n+class HasObserver t where\n   -- | The observers of a contract.\n   observer : t -> [Party]\n \n+class HasEnsure t where\n   -- | A predicate that must be true, otherwise contract creation will fail.\n   ensure : t -> Bool\n \n+class HasAgreement t where\n   -- | The agreement text of a contract.\n   agreement : t -> Text\n \n+class HasCreate t where\n   -- | Create a contract based on a template `t`.\n   create : t -> Update (ContractId t)\n \n+class HasFetch t where\n   -- | Fetch the contract data associated with the given contract ID.\n   -- If the `ContractId t` supplied is not the contract ID of an active\n   -- contract, this fails and aborts the entire transaction.\n   fetch : ContractId t -> Update t\n \n+class HasArchive t where\n   -- | Archive the contract with the given contract ID.\n   archive : ContractId t -> Update ()\n \n-  -- | Wrap the template in AnyTemplate\n-  toAnyTemplate : t -> AnyTemplate\n-\n-  -- | Extract the underlying template from AnyTemplate if the type matches\n-  -- or return `None`.\n-  fromAnyTemplate : AnyTemplate -> Optional t\n-\n-  -- | Generate a unique textual representation of the template Id.\n-  _templateTypeRep : proxy t -> TemplateTypeRep\n-\n -- | The stakeholders of a contract: its signatories and observers.\n-stakeholder : Template t => t -> [Party]\n+stakeholder : (HasSignatory t, HasObserver t) => t -> [Party]\n stakeholder t = signatory t ++ observer t\n \n-class Template t => Choice t c r | t c -> r where\n+-- | Constraints satisfied by template choice types.\n+type Choice t c r =\n+  ( Template t\n+  , HasExercise t c r\n+#ifdef DAML_TYPE_REP && DAML_ANY_TYPE\n+  , HasToAnyChoice t c r\n+  , HasFromAnyChoice t c r\n+#endif\n+  )\n+\n+class HasExercise t c r | t c -> r where\n   -- | Exercise a choice on the contract with the given contract ID.\n   exercise : ContractId t -> c -> Update r\n-  _toAnyChoice : proxy t -> c -> Any\n-  _fromAnyChoice : proxy t -> Any -> Optional c\n \n-class Template t => TemplateKey t k | t -> k where\n+-- | Constrants satisfied by template key types.\n+type TemplateKey t k =\n+  ( Template t\n+  , HasKey t k\n+  , HasLookupByKey t k\n+  , HasFetchByKey t k\n+  , HasMaintainer t k\n+#ifdef DAML_TYPE_REP && DAML_ANY_TYPE\n+  , HasToAnyContractKey t k\n+  , HasFromAnyContractKey t k\n+#endif\n+  )\n+\n+class HasKey t k | t -> k where\n   -- | The key of a contract.\n   key : t -> k\n \n+class HasLookupByKey t k | t -> k where\n   -- | Look up the contract ID `t` associated with a given contract key `k`.\n   --\n   -- You must pass the `t` using an explicit type application. For\n   -- instance, if you want to look up a contract of template `Account` by its\n   -- key `k`, you must call `lookupByKey @Account k`.\n   lookupByKey : k -> Update (Optional (ContractId t))\n \n+class HasFetchByKey t k | t -> k where\n   -- | Fetch the contract ID and contract data associated with a given\n   -- contract key.\n   --\n   -- You must pass the `t` using an explicit type application. For\n   -- instance, if you want to fetch a contract of template `Account` by its\n   -- key `k`, you must call `fetchByKey @Account k`.\n   fetchByKey : k -> Update (ContractId t, t)\n-  -- NOTE(FM): the motivation for this function to return both the\n+\n+class HasMaintainer t k | t -> k where\n+  -- NOTE(F. Mazzoli): the motivation for this function to return both the"
  },
  {
    "id" : "7ecd20bb-d8e6-4409-b30a-92b006d2c043",
    "prId" : 4030,
    "comments" : [
      {
        "id" : "fea73e58-a399-40ea-938a-854f2c72a454",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "I think you need to move the definition of those classes out of the `ifdef`. The template desugaring does not depend on the LF version so we will always generate instances for this.",
        "createdAt" : "2020-01-14T09:15:40Z",
        "updatedAt" : "2020-01-15T14:32:49Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "fa872746-a1a5-4117-b1a4-682d32c48433",
        "parentId" : "fea73e58-a399-40ea-938a-854f2c72a454",
        "author" : null,
        "body" : "Ah, good point! I also removed the CPP conditions on the respective constraints in `Template`, `Choice`, and `TemplateKey`, since otherwise I think it might be a bit of a *gotcha* without good reason.",
        "createdAt" : "2020-01-14T11:55:57Z",
        "updatedAt" : "2020-01-15T14:32:49Z",
        "lastEditedBy" : null,
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "3a6d332937a2569a52ae38499c6fe1022c9fe04c",
    "line" : null,
    "diffHunk" : "@@ -161,15 +198,47 @@ instance Eq AnyContractKey where\n #endif\n \n #ifdef DAML_TYPE_REP\n+\n+class HasTemplateTypeRep t where\n+  -- | Generate a unique textual representation of the template Id.\n+  _templateTypeRep : proxy t -> TypeRep\n+\n -- | Generate a unique textual representation of the template Id.\n-templateTypeRep : forall t. Template t => TemplateTypeRep\n-templateTypeRep = _templateTypeRep ([] : [t])\n+templateTypeRep : forall t. HasTemplateTypeRep t => TemplateTypeRep\n+templateTypeRep = TemplateTypeRep (_templateTypeRep ([] : [t]))\n \n instance Eq TemplateTypeRep where\n   TemplateTypeRep a == TemplateTypeRep b = a == b\n \n #ifdef DAML_ANY_TYPE\n \n+class HasToAnyTemplate t where"
  }
]