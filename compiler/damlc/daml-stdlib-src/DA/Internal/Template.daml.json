[
  {
    "id" : "31b80754-366a-463f-8457-3d3b58e638de",
    "prId" : 3152,
    "comments" : [
      {
        "id" : "70e6e10d-ad50-43fa-9887-228855e12a89",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "I suppose these two methods have the `proxy t` and not the signatures from below because their signatures need to refer to `t`. Is that correct?",
        "createdAt" : "2019-10-14T08:11:11Z",
        "updatedAt" : "2019-10-14T08:11:12Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "b244d4d4-2fe8-4cc9-8bb7-86c0f3c9a010",
        "parentId" : "70e6e10d-ad50-43fa-9887-228855e12a89",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "There are two issues here:\r\n\r\n1. Declaring the typeclass `IouInstance` will require `AllowAmbigousTypes` in every module that defines a template if we don’t have the proxy there which is obviously not a good idea (there is a comment in `ghc-lib` on this).\r\n2. 1 applies to the declaration of the typeclass but not the declaration of the `Choice` instance. However, if we don’t have the proxy here we need to make it up during template desugaring to define `_toAnyChoice = _toAnyChoiceProposalArchive someProxy` and apart from that complicating template desugaring, I’m not really sure how to do this nicely without requiring `ScopedTypeVariables` in every module that defines a `template`.\r\n\r\nI’ll add a comment for `2` here.",
        "createdAt" : "2019-10-14T08:20:27Z",
        "updatedAt" : "2019-10-14T08:20:27Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "e67cd61d-c50d-4dda-b5ec-34d9413c572c",
        "parentId" : "70e6e10d-ad50-43fa-9887-228855e12a89",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Don't we have `ScopedTypeVariables` enabled by default in DAML?",
        "createdAt" : "2019-10-14T08:23:53Z",
        "updatedAt" : "2019-10-14T08:23:53Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "bff9b9bb-4172-4f48-9a7b-129fd3b66732",
        "parentId" : "70e6e10d-ad50-43fa-9887-228855e12a89",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "oh good point, I thought I had grepped for that but apparently I missed this.",
        "createdAt" : "2019-10-14T08:27:29Z",
        "updatedAt" : "2019-10-14T08:27:30Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "40c9b7f2-4d27-4b8c-9a76-e056c101db81",
        "parentId" : "70e6e10d-ad50-43fa-9887-228855e12a89",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "That said, I think there is still something to be said for keeping `_toAnyChoice = _toAnyChoiceProposalArchive` and thereby keeping template desugaring as simple as possible.",
        "createdAt" : "2019-10-14T08:28:35Z",
        "updatedAt" : "2019-10-14T08:28:35Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "c63bf452f634b4328536ae697639d3adf4216488",
    "line" : 13,
    "diffHunk" : "@@ -50,6 +51,14 @@ stakeholder t = signatory t ++ observer t\n class Template t => Choice t c r | t c -> r where\n   -- | Exercise a choice on the contract with the given contract ID.\n   exercise : ContractId t -> c -> Update r\n+  _toAnyChoice : proxy t -> c -> AnyChoice\n+  _fromAnyChoice : proxy t -> AnyChoice -> Optional c"
  },
  {
    "id" : "850378ca-4b68-44fe-a6fc-7ebda202c567",
    "prId" : 2178,
    "comments" : [
      {
        "id" : "dc22739a-d38d-4b2d-a7ad-87513ece12ad",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Let's remove it if we don't need it anymore.",
        "createdAt" : "2019-07-17T08:09:00Z",
        "updatedAt" : "2019-07-30T22:55:02Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "22c7a623-a619-4ec3-9331-1244565e9b70",
        "parentId" : "dc22739a-d38d-4b2d-a7ad-87513ece12ad",
        "author" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "body" : "Done",
        "createdAt" : "2019-07-18T18:57:53Z",
        "updatedAt" : "2019-07-30T22:55:02Z",
        "lastEditedBy" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "ca591f5890a7d9487d0b2351de3d08b4592a1a87",
    "line" : null,
    "diffHunk" : "@@ -72,91 +54,45 @@ fetchByKey : forall c k. TemplateKey c k => k -> Update (ContractId c, c)\n --    fetch, and to implement _that_, we need to know what the\n --    stakeholders of the fetched contract are, which requires\n --    getting the contract instance.\n-fetchByKey k = fmap unpackPair (internalFetchByKey k)\n+-- fetchByKey k = fmap unpackPair (internalFetchByKey k)\n+\n+class Template t => TemplateKey t k | t -> k where\n+  key : t -> k\n+  fetchByKey : k -> Update (ContractId t, t)\n+  lookupByKey : k -> Update (Optional (ContractId t))\n \n -- | Exercise a choice on a contract given by its key.\n --\n--- The `c` needs to be passed using an explicit type application. For\n+-- The `t` needs to be passed using an explicit type application. For\n -- instance, if you want to exercise a choice `Withdraw` on a contract of\n -- template `Account` given by its key `k`, you must call\n -- `exerciseByKey @Account k Withdraw`.\n-exerciseByKey : forall c k e r. (TemplateKey c k, Choice c e r) => k -> e -> Update r\n-exerciseByKey k e = do\n-    (cid, _) <- fetchByKey @c k\n-    internalExercise cid e\n-\n-class Template c where\n-\n-    -- | Predicate that must hold for the succesful creation of the contract.\n-    ensure : c -> Bool\n-    ensure _ = True\n-\n-    -- | The signatories of a contract.\n-    signatory : c -> [Party]\n-\n-    -- | The observers of a contract.\n-    observer : c -> [Party]\n-    observer _ = []\n-\n-    -- | The agreement text of a contract.\n-    agreement : c -> Text\n-    agreement _ = \"\"\n-\n-    -- | HIDE\n-    internalCreate : c -> Update (ContractId c)\n-    internalCreate = magic @\"create\"\n-\n-    -- | HIDE\n-    internalFetch : ContractId c -> Update c\n-    internalFetch = magic @\"fetch\"\n+exerciseByKey : forall t k c r. (TemplateKey t k, Choice t c r) => k -> c -> Update r\n+exerciseByKey k c = do\n+    (cid, _) <- fetchByKey @t k\n+    exercise cid c\n \n-    -- | HIDE\n-    internalArchive : ContractId c -> Update ()\n-    internalArchive = magic @\"archive\"\n+data Archive = Archive{}\n+  deriving (Eq, Show)\n \n+data NonConsuming t = NonConsuming {}\n+data PreConsuming t = PreConsuming {}\n+data PostConsuming t = PostConsuming {}\n \n--- Deliberately not exported.\n-data Consuming = PreConsuming  -- Archive before executing exercise body.\n-               | PostConsuming -- Execute exercise body then archive.\n-               | NonConsuming  -- Don't archive.\n+data HasKey t = HasKey {}\n \n--- | HIDE\n-nonconsuming : NoEvent c e -> Consuming\n-nonconsuming _ = NonConsuming\n-\n--- | HIDE\n-preconsuming : NoEvent c e -> Consuming\n-preconsuming _ = PreConsuming\n-\n--- | HIDE\n-postconsuming : NoEvent c e -> Consuming\n-postconsuming _ = PostConsuming\n-\n-class Template c => Choice c e r | c e -> r where\n-    -- | HIDE\n-    consuming : NoEvent c e -> Consuming\n-    consuming = preconsuming\n-\n-    choiceController : c -> e -> [Party]\n-    choice : c -> ContractId c -> e -> Update r\n+-- FIXME(RJR): Do we need these?\n+-- nonconsuming : NoEvent c e -> NonConsuming\n+-- nonconsuming _ = NonConsuming\n \n-    -- | HIDE\n-    internalExercise : ContractId c -> e -> Update r\n-    internalExercise = magic @\"exercise\"\n+-- preconsuming : NoEvent c e -> PreConsuming\n+-- preconsuming _ = PreConsuming\n \n-\n--- | The data type corresponding to the implicit `Archive`\n--- choice in every template.\n-data Archive = Archive\n-\n-instance Template c => Choice c Archive () where\n-    choiceController c _ = signatory c\n-    choice _ _ _ = return ()\n-\n-    internalExercise c Archive = internalArchive c\n+-- postconsuming : NoEvent c e -> PostConsuming\n+-- postconsuming _ = PostConsuming\n \n -- | HIDE\n-data NoEvent c e = NoEvent\n+-- data NoEvent c e = NoEvent"
  },
  {
    "id" : "17677dbc-4933-4700-82f2-f9d10c80e995",
    "prId" : 2178,
    "comments" : [
      {
        "id" : "278b7d15-540a-4cd7-8d83-64ac1bf3955d",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "I think we don't need these anymore because we moved this information to the type level. Let's remove this and its friends.",
        "createdAt" : "2019-07-17T08:09:29Z",
        "updatedAt" : "2019-07-30T22:55:02Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "ca591f5890a7d9487d0b2351de3d08b4592a1a87",
    "line" : null,
    "diffHunk" : "@@ -72,91 +54,45 @@ fetchByKey : forall c k. TemplateKey c k => k -> Update (ContractId c, c)\n --    fetch, and to implement _that_, we need to know what the\n --    stakeholders of the fetched contract are, which requires\n --    getting the contract instance.\n-fetchByKey k = fmap unpackPair (internalFetchByKey k)\n+-- fetchByKey k = fmap unpackPair (internalFetchByKey k)\n+\n+class Template t => TemplateKey t k | t -> k where\n+  key : t -> k\n+  fetchByKey : k -> Update (ContractId t, t)\n+  lookupByKey : k -> Update (Optional (ContractId t))\n \n -- | Exercise a choice on a contract given by its key.\n --\n--- The `c` needs to be passed using an explicit type application. For\n+-- The `t` needs to be passed using an explicit type application. For\n -- instance, if you want to exercise a choice `Withdraw` on a contract of\n -- template `Account` given by its key `k`, you must call\n -- `exerciseByKey @Account k Withdraw`.\n-exerciseByKey : forall c k e r. (TemplateKey c k, Choice c e r) => k -> e -> Update r\n-exerciseByKey k e = do\n-    (cid, _) <- fetchByKey @c k\n-    internalExercise cid e\n-\n-class Template c where\n-\n-    -- | Predicate that must hold for the succesful creation of the contract.\n-    ensure : c -> Bool\n-    ensure _ = True\n-\n-    -- | The signatories of a contract.\n-    signatory : c -> [Party]\n-\n-    -- | The observers of a contract.\n-    observer : c -> [Party]\n-    observer _ = []\n-\n-    -- | The agreement text of a contract.\n-    agreement : c -> Text\n-    agreement _ = \"\"\n-\n-    -- | HIDE\n-    internalCreate : c -> Update (ContractId c)\n-    internalCreate = magic @\"create\"\n-\n-    -- | HIDE\n-    internalFetch : ContractId c -> Update c\n-    internalFetch = magic @\"fetch\"\n+exerciseByKey : forall t k c r. (TemplateKey t k, Choice t c r) => k -> c -> Update r\n+exerciseByKey k c = do\n+    (cid, _) <- fetchByKey @t k\n+    exercise cid c\n \n-    -- | HIDE\n-    internalArchive : ContractId c -> Update ()\n-    internalArchive = magic @\"archive\"\n+data Archive = Archive{}\n+  deriving (Eq, Show)\n \n+data NonConsuming t = NonConsuming {}\n+data PreConsuming t = PreConsuming {}\n+data PostConsuming t = PostConsuming {}\n \n--- Deliberately not exported.\n-data Consuming = PreConsuming  -- Archive before executing exercise body.\n-               | PostConsuming -- Execute exercise body then archive.\n-               | NonConsuming  -- Don't archive.\n+data HasKey t = HasKey {}\n \n--- | HIDE\n-nonconsuming : NoEvent c e -> Consuming\n-nonconsuming _ = NonConsuming\n-\n--- | HIDE\n-preconsuming : NoEvent c e -> Consuming\n-preconsuming _ = PreConsuming\n-\n--- | HIDE\n-postconsuming : NoEvent c e -> Consuming\n-postconsuming _ = PostConsuming\n-\n-class Template c => Choice c e r | c e -> r where\n-    -- | HIDE\n-    consuming : NoEvent c e -> Consuming\n-    consuming = preconsuming\n-\n-    choiceController : c -> e -> [Party]\n-    choice : c -> ContractId c -> e -> Update r\n+-- FIXME(RJR): Do we need these?"
  },
  {
    "id" : "832a2a4d-8e50-46ce-8cba-5e0a52452b50",
    "prId" : 2178,
    "comments" : [
      {
        "id" : "4c88263e-f3c1-4f85-84aa-094a64eff230",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Can you please put\r\n```\r\n\"files.trimFinalNewlines\": true,\r\n\"files.insertFinalNewline\": true,\r\n```\r\ninto your VS Code config to avoid removing the trailing newlines.",
        "createdAt" : "2019-07-17T08:11:42Z",
        "updatedAt" : "2019-07-30T22:55:02Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "ca591f5890a7d9487d0b2351de3d08b4592a1a87",
    "line" : null,
    "diffHunk" : "@@ -171,19 +107,4 @@ instance IsParties [Party] where\n \n instance IsParties (Optional Party) where\n   toParties None = []\n-  toParties (Some p) = [p]\n-\n-class Template c => TemplateKey c k | c -> k where\n-    -- | The key of a contract.\n-    key : c -> k\n-\n-    -- | The maintainers of the contract key.\n-    maintainer : k -> [Party]\n-\n-    -- | HIDE\n-    internalFetchByKey : k -> Update (Pair \"contractId\" \"contract\" (ContractId c) c)\n-    internalFetchByKey = magic @\"fetchByKey\"\n-\n-    -- | HIDE\n-    internalLookupByKey : k -> Update (Optional (ContractId c))\n-    internalLookupByKey = magic @\"lookupByKey\"\n+  toParties (Some p) = [p]"
  },
  {
    "id" : "5963416d-6247-4cca-b060-b90f23ebc1d5",
    "prId" : 2178,
    "comments" : [
      {
        "id" : "41b5a10b-bf16-49ff-9a4b-6e3c67ae0c4a",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Why is this commented out? Same for `fetchByKey`.",
        "createdAt" : "2019-07-17T08:12:26Z",
        "updatedAt" : "2019-07-30T22:55:02Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "5f18f50e-1c7d-4c0a-ba54-69fffb48806b",
        "parentId" : "41b5a10b-bf16-49ff-9a4b-6e3c67ae0c4a",
        "author" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "body" : "These are provided by the `TemplateKey` instances now, right? Is there any value in having separate function definitions?",
        "createdAt" : "2019-07-18T19:02:38Z",
        "updatedAt" : "2019-07-30T22:55:02Z",
        "lastEditedBy" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "31dc29e3-8d4e-41ca-b5f7-6991271a0169",
        "parentId" : "41b5a10b-bf16-49ff-9a4b-6e3c67ae0c4a",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Right, good point. Let's remove them here.",
        "createdAt" : "2019-07-19T07:23:36Z",
        "updatedAt" : "2019-07-30T22:55:02Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "ca591f5890a7d9487d0b2351de3d08b4592a1a87",
    "line" : null,
    "diffHunk" : "@@ -6,60 +6,42 @@\n \n daml 1.2\n -- | MOVE Prelude DAML-LF primitives, just templates/contracts\n-module DA.Internal.Template(\n-    Template(ensure, signatory, observer, agreement),\n-    Choice(consuming, choiceController, choice), preconsuming, nonconsuming, postconsuming, NoEvent(..),\n-    stakeholder,\n-    create, exercise, fetch,\n-    archive, Archive(..),\n-    lookupByKey, fetchByKey, exerciseByKey,\n-    IsParties(toParties),\n-    TemplateKey(key, maintainer)\n-    ) where\n-\n-import GHC.Types (magic)\n+module DA.Internal.Template where\n+\n import DA.Internal.LF\n import DA.Internal.Prelude\n \n--- NOTE: use internalCreate vs create so that people implementing Template can't override create/fetch/exercise\n-\n--- | Create a contract based on a template.\n-create : Template c => c -> Update (ContractId c)\n-create = internalCreate\n-\n--- | Exercise a contract choice.\n-exercise : forall c e r . Choice c e r => ContractId c -> e -> Update r\n-exercise = internalExercise\n-\n--- | Fetch the contract data associated with the given contract id.\n--- This fails and aborts the entire transaction if the `ContractId c`\n--- supplied is not the contract ID of an active contract.\n-fetch : Template c => ContractId c -> Update c\n-fetch = internalFetch\n+-- | The stakeholders of a contract, i.e. its signatories and observers.\n+stakeholder : Template t => t -> [Party]\n+stakeholder t = signatory t ++ observer t\n \n--- | Archive the contract.\n-archive : Template c => ContractId c -> Update ()\n-archive c = exercise c Archive\n+class Template t where\n+  signatory : t -> [Party]\n+  observer : t -> [Party]\n+  ensure : t -> Bool\n+  agreement : t -> Text\n+  create : t -> Update (ContractId t)\n+  fetch : ContractId t -> Update t\n+  archive : ContractId t -> Update ()\n \n--- | The stakeholders of a contract, i.e. its signatories and observers.\n-stakeholder : Template c => c -> [Party]\n-stakeholder c = signatory c ++ observer c\n+class Template t => Choice t c r | t c -> r where\n+  exercise : ContractId t -> c -> Update r\n \n -- | Look up the contract id associated with a given contract key.\n --\n--- The `c` needs to be passed using an explicit type application. For\n+-- The `t` needs to be passed using an explicit type application. For\n -- instance, if you want to look up a contract of template `Account` by its\n -- key `k`, you must call `lookupByKey @Account k`.\n-lookupByKey : forall c k. TemplateKey c k => k -> Update (Optional (ContractId c))\n-lookupByKey = internalLookupByKey\n+-- lookupByKey : forall t k. TemplateKey t k => k -> Update (Optional (ContractId t))"
  },
  {
    "id" : "15c86aa3-04cc-4372-918a-6c74d319fe7c",
    "prId" : 2178,
    "comments" : [
      {
        "id" : "b248577d-8c31-4e71-ac15-35350844072d",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "We should document the methods of `Template`.",
        "createdAt" : "2019-07-29T14:55:56Z",
        "updatedAt" : "2019-07-30T22:55:02Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "e159e1cb-64b3-42b6-bfb6-521347aeaba0",
        "parentId" : "b248577d-8c31-4e71-ac15-35350844072d",
        "author" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "body" : "Ok, I think I dropped the comments for these 4 methods because I didn't think they were very useful. I'll restore them here and we can iterate on it later if we want.",
        "createdAt" : "2019-07-29T16:11:33Z",
        "updatedAt" : "2019-07-30T22:55:02Z",
        "lastEditedBy" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "ca591f5890a7d9487d0b2351de3d08b4592a1a87",
    "line" : 22,
    "diffHunk" : "@@ -6,161 +6,89 @@\n \n daml 1.2\n -- | MOVE Prelude DAML-LF primitives, just templates/contracts\n-module DA.Internal.Template(\n-    Template(ensure, signatory, observer, agreement),\n-    Choice(consuming, choiceController, choice), preconsuming, nonconsuming, postconsuming, NoEvent(..),\n-    stakeholder,\n-    create, exercise, fetch,\n-    archive, Archive(..),\n-    lookupByKey, fetchByKey, exerciseByKey,\n-    IsParties(toParties),\n-    TemplateKey(key, maintainer)\n-    ) where\n-\n-import GHC.Types (magic)\n+module DA.Internal.Template where\n+\n import DA.Internal.LF\n import DA.Internal.Prelude\n \n--- NOTE: use internalCreate vs create so that people implementing Template can't override create/fetch/exercise\n-\n--- | Create a contract based on a template `c`.\n-create : Template c => c -> Update (ContractId c)\n-create = internalCreate\n+class Template t where"
  },
  {
    "id" : "267ba634-6f42-4b01-ac0e-5711b4885bda",
    "prId" : 2163,
    "comments" : [
      {
        "id" : "a6db586a-fe5a-4ac7-b4ac-a131bd9c1f17",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "```suggestion\r\n    -- | The follow-up update of a choice on a contract.\r\n```",
        "createdAt" : "2019-07-16T14:11:08Z",
        "updatedAt" : "2019-07-17T07:09:05Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "a785640fe8d72eb256de0bbfe8b1eaf7c46d032e",
    "line" : null,
    "diffHunk" : "@@ -136,8 +137,10 @@ class Template c => Choice c e r | c e -> r where\n     -- | HIDE\n     consuming : NoEvent c e -> Consuming\n     consuming = preconsuming\n-\n+    \n+    -- | The controller of a choice on a contract.\n     choiceController : c -> e -> [Party]\n+    -- | A choice on a contract."
  }
]