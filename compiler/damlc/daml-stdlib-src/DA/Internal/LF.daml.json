[
  {
    "id" : "b3889828-7e36-45fb-ab89-a66f9c1b6c83",
    "prId" : 7252,
    "comments" : [
      {
        "id" : "1e3ae7e0-afe5-4fec-9b35-897501570bea",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Probably not the right place to comment on this but I would like to also display source locations on failed submits when running against an actual ledger. Definitely something for a separate PR not this one.",
        "createdAt" : "2020-08-27T15:44:44Z",
        "updatedAt" : "2020-08-28T11:39:11Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "5cd8cd54f886d4b5d729f46c48c70c22c49f3082",
    "line" : 13,
    "diffHunk" : "@@ -212,13 +213,13 @@ class HasSubmit m cmds | m -> cmds, cmds -> m where\n   -- from party `p` and returns the value returned by `cmds`.\n   --\n   -- If the transaction fails, `submit` also fails.\n-  submit : Party -> cmds a -> m a\n+  submit : HasCallStack => Party -> cmds a -> m a"
  },
  {
    "id" : "272bdd73-97e9-408e-a198-6989d554eda7",
    "prId" : 4233,
    "comments" : [
      {
        "id" : "03a79a7a-2686-4f56-8393-c55c13a20019",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : ":+1:",
        "createdAt" : "2020-01-28T08:21:03Z",
        "updatedAt" : "2020-01-28T10:56:40Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "7f33fdace1c0823e750c7ff0b6ad930c0031ffd2",
    "line" : 4,
    "diffHunk" : "@@ -179,6 +179,9 @@ instance CanAbort Update where\n instance CanAbort Scenario where\n     abort = fail\n \n+instance CanAbort (Either Text) where"
  },
  {
    "id" : "002a6e6d-bf51-40d9-999a-032206523454",
    "prId" : 3816,
    "comments" : [
      {
        "id" : "7d03b817-86a9-4987-81a8-c203ad71ee87",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Why is this guarded by the existence of `DAML_GENMAP` and not by something related to the existence of the `Any*` types?",
        "createdAt" : "2019-12-11T13:47:00Z",
        "updatedAt" : "2019-12-11T14:20:46Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "463a977f-b8b0-4282-90c7-a92fb30ae2fa",
        "parentId" : "7d03b817-86a9-4987-81a8-c203ad71ee87",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Because we need the generic equality operation for this to work and we don’t separate that from generic maps. Technically it needs to be guarded by both but that’s redundant since we never have a case where we support generic equality but do not support `Any`. I’ve added it anyway to make it more clear and I also added a comment.",
        "createdAt" : "2019-12-11T13:59:00Z",
        "updatedAt" : "2019-12-11T14:20:46Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "7fae38125bd17aedd898f8fa5b05a8313e62b64e",
    "line" : null,
    "diffHunk" : "@@ -243,6 +243,26 @@ data AnyContractKey = AnyContractKey\n   , getanyContractKeyTemplateRep : TemplateTypeRep\n   }\n \n+#ifdef DAML_GENMAP"
  },
  {
    "id" : "93eed7b7-41bd-4bf7-b0fb-500d67d9ef48",
    "prId" : 3816,
    "comments" : [
      {
        "id" : "ff1ed543-dd58-4933-a55e-ea4751ffc571",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Why does `AnyTemplate` not contain any form of type representation in contrast to the other `Any*` types?",
        "createdAt" : "2019-12-11T13:49:38Z",
        "updatedAt" : "2019-12-11T14:20:46Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "2ad2b86a-442c-4d2a-a500-0b1c53f2f2d3",
        "parentId" : "ff1ed543-dd58-4933-a55e-ea4751ffc571",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Because there is no need for it. The reason why we have it in `AnyChoice` is because we want `toAnyChoice @T1 Archive` to be different from `toAnyChoice @T2 Archive`. For the template that type parameter is represented by the template itself.",
        "createdAt" : "2019-12-11T13:59:49Z",
        "updatedAt" : "2019-12-11T14:20:46Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "7fae38125bd17aedd898f8fa5b05a8313e62b64e",
    "line" : 15,
    "diffHunk" : "@@ -243,6 +243,26 @@ data AnyContractKey = AnyContractKey\n   , getanyContractKeyTemplateRep : TemplateTypeRep\n   }\n \n+#ifdef DAML_GENMAP\n+-- We do not have a general Eq instance for Any since Any is not exposed\n+-- to users directly and that instance will crash on some values but\n+-- we can have total Eq instances for AnyTemplate, AnyChoice and AnyContractKey\n+-- since those are guaranteed to be serializable.\n+eqAny : Any -> Any -> Bool\n+eqAny = primitive @\"BEEqual\"\n+\n+instance Eq AnyTemplate where\n+  AnyTemplate a == AnyTemplate b = eqAny a b"
  },
  {
    "id" : "a88d2cf9-86d2-4d69-b9d4-9ef3c81c7b5d",
    "prId" : 3816,
    "comments" : [
      {
        "id" : "b2b695eb-2d88-412b-85f3-cacf505dcc16",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "```suggestion\r\n    aRep == bRep && eqAny aAny bAny\r\n```\r\nSomehow comparing the type reps after the values _feels_ wrong to me. Same below.",
        "createdAt" : "2019-12-11T13:51:30Z",
        "updatedAt" : "2019-12-11T14:20:46Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "05c13a0e-0fd7-4cbb-88dc-b5877e6016bd",
        "parentId" : "b2b695eb-2d88-412b-85f3-cacf505dcc16",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "I disagree, this is not the type of the choice but the type of the template the choice belongs to. Having the same choice type on two different templates is an edge case so it make sense to test for that only if the other test isn’t conclusive.",
        "createdAt" : "2019-12-11T14:00:48Z",
        "updatedAt" : "2019-12-11T14:20:46Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "7fae38125bd17aedd898f8fa5b05a8313e62b64e",
    "line" : 19,
    "diffHunk" : "@@ -243,6 +243,26 @@ data AnyContractKey = AnyContractKey\n   , getanyContractKeyTemplateRep : TemplateTypeRep\n   }\n \n+#ifdef DAML_GENMAP\n+-- We do not have a general Eq instance for Any since Any is not exposed\n+-- to users directly and that instance will crash on some values but\n+-- we can have total Eq instances for AnyTemplate, AnyChoice and AnyContractKey\n+-- since those are guaranteed to be serializable.\n+eqAny : Any -> Any -> Bool\n+eqAny = primitive @\"BEEqual\"\n+\n+instance Eq AnyTemplate where\n+  AnyTemplate a == AnyTemplate b = eqAny a b\n+\n+instance Eq AnyChoice where\n+  AnyChoice aAny aRep == AnyChoice bAny bRep =\n+    eqAny aAny bAny && aRep == bRep"
  },
  {
    "id" : "ea410ac7-54fe-4094-b36a-08624dc5306d",
    "prId" : 3174,
    "comments" : [
      {
        "id" : "f2528c19-cae6-483c-b863-f28f77b2cdc7",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "We probably want a `MapKey` instance for this which we can easily get via GND but we can leave that for a separate PR.",
        "createdAt" : "2019-10-15T06:46:14Z",
        "updatedAt" : "2019-10-15T07:57:36Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "eec666ba2cd9fa9f1f00a60dc38c1e13dda07826",
    "line" : null,
    "diffHunk" : "@@ -216,3 +217,7 @@ newtype AnyTemplate = AnyTemplate { getAnyTemplate : Any }\n \n -- | Existential choice type that can wrap an arbitrary chice.\n newtype AnyChoice = AnyChoice { getAnyChoice : Any }\n+\n+-- | Unique textual representation of a template Id.\n+newtype TemplateTypeRep = TemplateTypeRep { getTemplateTypeRep : Text }\n+  deriving (Eq, Ord)"
  },
  {
    "id" : "c1c76810-d024-4a88-98f2-a5d5e0570b2b",
    "prId" : 2973,
    "comments" : [
      {
        "id" : "b799079c-8405-4a92-8b49-d72b0af8b9c7",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Let's follow the common pattern in this module:\r\n```suggestion\r\ndata AnyTemplate =\r\n    -- | HIDE\r\n    AnyTemplate Opaque\r\n```",
        "createdAt" : "2019-09-23T16:44:25Z",
        "updatedAt" : "2019-09-23T16:44:43Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "ae77a993-1164-4c8f-a019-c610fa45aa74",
        "parentId" : "b799079c-8405-4a92-8b49-d72b0af8b9c7",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "What’s the point of adding a field to this constructor?",
        "createdAt" : "2019-09-23T16:54:14Z",
        "updatedAt" : "2019-09-23T16:54:14Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "c399c8bd-d35b-4b3a-a7a1-4c50f4fe8db0",
        "parentId" : "b799079c-8405-4a92-8b49-d72b0af8b9c7",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "ah nvm, got it.",
        "createdAt" : "2019-09-23T16:56:04Z",
        "updatedAt" : "2019-09-23T16:56:04Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "460521b2-3238-402a-a572-6593bb9ef9e2",
        "parentId" : "b799079c-8405-4a92-8b49-d72b0af8b9c7",
        "author" : null,
        "body" : "Semi-related, we shouldn't need the HIDEs in this module any more since the constructors are not exported, so damldocs now hides them automatically.",
        "createdAt" : "2019-09-23T17:06:25Z",
        "updatedAt" : "2019-09-23T17:06:25Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "256118b7f2894aaab5f49184e0422475cb64d3dd",
    "line" : 5,
    "diffHunk" : "@@ -207,4 +207,5 @@ unpackPair : forall f1 f2 a1 a2. Pair f1 f2 a1 a2 -> (a1, a2)\n unpackPair = magic @\"unpackPair\"\n \n -- | Existential template type that can wrap an arbitrary template.\n-data AnyTemplate\n+data AnyTemplate = AnyTemplate"
  },
  {
    "id" : "c9545a8b-ef45-4c4c-a3c4-e1d9896dea0f",
    "prId" : 2163,
    "comments" : [
      {
        "id" : "2093d9d8-2b52-4b80-bded-038907f3d204",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "```suggestion\r\n-- scenario fails if the underlying update action *succeeds*.\r\n```",
        "createdAt" : "2019-07-16T14:07:07Z",
        "updatedAt" : "2019-07-17T07:09:05Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "a785640fe8d72eb256de0bbfe8b1eaf7c46d032e",
    "line" : null,
    "diffHunk" : "@@ -194,8 +194,8 @@ submit = primitive @\"SCommit\"\n \n infixr 0 `submitMustFail`\n -- | `submitMustFail` describes the scenario in which party `p` attempts to update the\n--- ledger with update action `u`, but is expected to fail. This scenario is considered\n--- a failure if the underlying update action succeeds.\n+-- ledger with update action `u`, and the update is *expected to fail*. Therefore, this\n+-- scenario is fails if the underlying update action *succeeds*."
  }
]