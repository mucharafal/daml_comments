[
  {
    "id" : "98aafec8-3f36-4444-b3ca-a32da7fee0fd",
    "prId" : 7427,
    "comments" : [
      {
        "id" : "047b5f68-2102-4f3f-860d-f0c6c3a2742d",
        "parentId" : null,
        "author" : {
          "login" : "sofiafaro-da",
          "name" : "Sofia Faro",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/63245722?u=b440e86239cc6cb4a8b4aacdc19fff8f1b61068d&v=4"
        },
        "body" : "daml-docs uses markdown syntax: \r\n```suggestion\r\n-- | Update the value in `m` at `k` with `f`, inserting or deleting as\r\n```\r\nand throughout. There's no special handling of variable names as in Haddock.",
        "createdAt" : "2020-09-17T15:59:42Z",
        "updatedAt" : "2020-09-17T16:16:49Z",
        "lastEditedBy" : {
          "login" : "sofiafaro-da",
          "name" : "Sofia Faro",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/63245722?u=b440e86239cc6cb4a8b4aacdc19fff8f1b61068d&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "a4b8e5a4-b7bf-4416-b951-b7be073cce0e",
        "parentId" : "047b5f68-2102-4f3f-860d-f0c6c3a2742d",
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "Ah, I see. Thanks. 400ef896d0dd80c9a6c7df24da6bde2cccb3852f",
        "createdAt" : "2020-09-17T16:17:07Z",
        "updatedAt" : "2020-09-17T16:17:07Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "4751c9271a3a4b84f199ea72dae97e7eeae92900",
    "line" : null,
    "diffHunk" : "@@ -157,6 +158,25 @@ delete = primitive @\"BEGenMapDelete\"\n insert : Ord k => k -> v -> Map k v -> Map k v\n insert = primitive @\"BEGenMapInsert\"\n \n+-- | Update the value in 'm' at 'k' with 'f', inserting or deleting as"
  },
  {
    "id" : "6b6d546c-8b5d-45bd-ab33-6715905ded4e",
    "prId" : 7427,
    "comments" : [
      {
        "id" : "0baa8775-b7a2-4e40-8923-d6741ae29cd1",
        "parentId" : null,
        "author" : {
          "login" : "sofiafaro-da",
          "name" : "Sofia Faro",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/63245722?u=b440e86239cc6cb4a8b4aacdc19fff8f1b61068d&v=4"
        },
        "body" : "I think you need an extra line so it gets interpreted as code block:\r\n\r\n```suggestion\r\n-- Some implications of this behavior:\r\n-- \r\n--   alter identity k = identity\r\n```",
        "createdAt" : "2020-09-17T16:00:48Z",
        "updatedAt" : "2020-09-17T16:16:49Z",
        "lastEditedBy" : {
          "login" : "sofiafaro-da",
          "name" : "Sofia Faro",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/63245722?u=b440e86239cc6cb4a8b4aacdc19fff8f1b61068d&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "a25029e1-5f5b-447d-a7e6-cac584be40f2",
        "parentId" : "0baa8775-b7a2-4e40-8923-d6741ae29cd1",
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "Thanks. 4751c9271a3a4b84f199ea72dae97e7eeae92900 ",
        "createdAt" : "2020-09-17T16:17:24Z",
        "updatedAt" : "2020-09-17T16:17:24Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "4751c9271a3a4b84f199ea72dae97e7eeae92900",
    "line" : null,
    "diffHunk" : "@@ -157,6 +158,25 @@ delete = primitive @\"BEGenMapDelete\"\n insert : Ord k => k -> v -> Map k v -> Map k v\n insert = primitive @\"BEGenMapInsert\"\n \n+-- | Update the value in 'm' at 'k' with 'f', inserting or deleting as\n+-- required.  'f' will be called with either the value at 'k', or `None`\n+-- if absent; 'f' can return `Some` with a new value to be inserted in\n+-- 'm' (replacing the old value if there was one), or `None` to remove\n+-- any 'k' association 'm' may have.\n+--\n+-- Some implications of this behavior:\n+--   alter identity k = identity"
  },
  {
    "id" : "4d42e980-94fa-4790-acd5-f4f9bbde8356",
    "prId" : 5060,
    "comments" : [
      {
        "id" : "45a1c59e-986c-4aaa-8b4d-de771e2ac4be",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Do we still want to mention TextMap given that this is going to go away soonish?",
        "createdAt" : "2020-03-18T09:42:09Z",
        "updatedAt" : "2020-03-18T10:16:06Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "391eac36-272b-4a45-88ee-c30641a15211",
        "parentId" : "45a1c59e-986c-4aaa-8b4d-de771e2ac4be",
        "author" : null,
        "body" : "Good point, I'll update and include more useful examples like `Optional t` and `[t]`.",
        "createdAt" : "2020-03-18T09:43:41Z",
        "updatedAt" : "2020-03-18T10:16:06Z",
        "lastEditedBy" : null,
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "63a383666126dd27cd7c597d9863cf775d58df3f",
    "line" : null,
    "diffHunk" : "@@ -22,10 +22,22 @@ module DA.Map where\n -- This will give access to the `Map` type, and the various operations\n -- as `M.lookup`, `M.insert`, `M.fromList`, etc.\n --\n--- Note that the `Map k v` functions use the built-in equality for the\n--- type `k`, not the `Eq k` instance. Nevertheless, the `Eq k` constraint\n--- is usually required to prevent runtime errors.\n+-- `Map k v` internally uses the built-in order for the type `k`.\n+-- This means that keys that contain functions are not comparable\n+-- and will result in runtime errors. To prevent this, the `Ord k`\n+-- instance is required for most map operations. It is recommended to\n+-- only use `Map k v` for key types that have an `Ord k` instance\n+-- that is derived automatically using `deriving`:\n --\n+-- ```\n+-- data K = ...\n+--   deriving (Eq, Ord)\n+-- ```\n+--\n+-- This includes all built-in types that aren't function types: `Int`,\n+-- `Text`, `Bool`, `(a, b)` assuming `a` and `b` have default `Ord`\n+-- instances, `TextMap v` assuming `v` has default `Ord` instance,"
  },
  {
    "id" : "5682faf0-f0a0-4abf-82da-1fe7e17a92d8",
    "prId" : 3651,
    "comments" : [
      {
        "id" : "4dc3ce5c-9d17-4875-afdf-278831f07b43",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Can we turn those into doctests?",
        "createdAt" : "2019-11-27T12:53:41Z",
        "updatedAt" : "2019-11-27T13:34:03Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "549b69d3-aaac-49ce-b277-0d78d42dcb77",
        "parentId" : "4dc3ce5c-9d17-4875-afdf-278831f07b43",
        "author" : null,
        "body" : "Good idea! üëç ",
        "createdAt" : "2019-11-27T14:03:20Z",
        "updatedAt" : "2019-11-27T14:03:20Z",
        "lastEditedBy" : null,
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "9e09a3cff5b23199ced1ea57c604a7c68fa1676c",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,195 @@\n+{-# LANGUAGE CPP #-}\n+\n+daml 1.2\n+\n+#ifndef DAML_GENMAP\n+\n+-- | HIDE\n+module DA.Map where\n+\n+#else\n+\n+-- | This module exports the generic map type `Map k v` and associated\n+-- functions. This module should be imported qualified, for example:\n+--\n+-- ```\n+-- import DA.Map (Map)\n+-- import DA.Map qualified as M\n+-- ```\n+--\n+-- This will give access to the `Map` type, and the various operations\n+-- as `M.lookup`, `M.insert`, `M.fromList`, etc.\n+--\n+-- Note that the `Map k v` functions use the built-in equality for the\n+-- type `k`, not the `Eq k` instance. Nevertheless, the `Eq k` constraint\n+-- is usually required to prevent runtime errors.\n+--\n+module DA.Map\n+    ( Map\n+    , empty\n+    , size\n+    , toList\n+    , fromList\n+    , fromListWith\n+    , null\n+    , lookup\n+    , member\n+    , filter\n+    , filterWithKey\n+    , delete\n+    , insert\n+    , union\n+    , merge\n+    ) where\n+\n+import Prelude hiding (lookup, null, filter, empty)\n+import DA.Internal.LF (Map)\n+import DA.Foldable qualified as Foldable\n+import DA.List qualified as List\n+import DA.Optional\n+import DA.Traversable qualified as Traversable\n+\n+\n+-- | Create a map from a list of key/value pairs.\n+--\n+-- Note that this function uses the built-in equality for the type `k`,\n+-- not the `Eq` instance. Nevertheless, the `Eq k` constraint is\n+-- necessary to prevent runtime errors.\n+fromList : Eq k => [(k, v)] -> Map k v\n+fromList list = foldl (\\acc (key, value) -> insert key value acc) empty list\n+\n+-- | Create a map from a list of key/value pairs with a combining\n+-- function. Examples:\n+-- ```\n+--   M.fromListWith (++) [(\"A\", [1]), (\"A\", [2]), (\"B\", [2]), (\"B\", [1]), (\"A\", [3])] == M.fromList [(\"A\", [1, 2, 3]), (\"B\", [2, 1])]"
  }
]