[
  {
    "id" : "2819d762-d4f1-44c0-96fd-88950f9886e3",
    "prId" : 5809,
    "comments" : [
      {
        "id" : "f2a33068-0577-4dd3-9f73-03c5aa73bd87",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "This example seems more confusing than helpful. If you always return `Some` there is no point in using `filterA`.",
        "createdAt" : "2020-05-01T05:21:13Z",
        "updatedAt" : "2020-05-04T16:03:38Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "59e2520b-8990-45ab-8347-5fd8aea07c5a",
        "parentId" : "f2a33068-0577-4dd3-9f73-03c5aa73bd87",
        "author" : {
          "login" : "tamaskalcza-da",
          "name" : "Tamás Kálcza",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/54800417?u=2f23b2f81e5322e0a3ccde86f489a6f607b51fcb&v=4"
        },
        "body" : "I agree. I'll try to come up with something else that is still simple. Don't know if I can though. I think the best use-case is when there's an `Update` monad involved.",
        "createdAt" : "2020-05-04T07:18:50Z",
        "updatedAt" : "2020-05-04T16:03:38Z",
        "lastEditedBy" : {
          "login" : "tamaskalcza-da",
          "name" : "Tamás Kálcza",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/54800417?u=2f23b2f81e5322e0a3ccde86f489a6f607b51fcb&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "5789e895-ccd5-4f83-b937-17d61e017bf7",
        "parentId" : "f2a33068-0577-4dd3-9f73-03c5aa73bd87",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "How about something like `filterA (\\cid -> fmap (\\c -> c.value == 5) (fetch cid))`. That probably doesn’t work as a doctest since it depends on external stuff but might at least give people an idea of where this could come in handy.",
        "createdAt" : "2020-05-04T07:21:16Z",
        "updatedAt" : "2020-05-04T16:03:38Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "dff07133-e411-4bb8-aab8-11bf3346cbce",
        "parentId" : "f2a33068-0577-4dd3-9f73-03c5aa73bd87",
        "author" : {
          "login" : "tamaskalcza-da",
          "name" : "Tamás Kálcza",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/54800417?u=2f23b2f81e5322e0a3ccde86f489a6f607b51fcb&v=4"
        },
        "body" : "Sure. I wanted to make the example in a way that it works. If that's not a requirement, something you suggested would totally work.",
        "createdAt" : "2020-05-04T07:23:13Z",
        "updatedAt" : "2020-05-04T16:03:38Z",
        "lastEditedBy" : {
          "login" : "tamaskalcza-da",
          "name" : "Tamás Kálcza",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/54800417?u=2f23b2f81e5322e0a3ccde86f489a6f607b51fcb&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "0131b570-f8a3-464c-ac12-803649e40c0f",
        "parentId" : "f2a33068-0577-4dd3-9f73-03c5aa73bd87",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "I think the docs should primarily be useful for users. If we can test them automatically that’s great but we should opt for more useful docs over docs that might be automatically tested but are not useful to users. If you wan to test a full example you can throw it in the `daml-test-files` directory.",
        "createdAt" : "2020-05-04T07:25:45Z",
        "updatedAt" : "2020-05-04T16:03:38Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "9c7040573e0f8c6fdc3f288fe87609bc173cccf1",
    "line" : null,
    "diffHunk" : "@@ -59,6 +59,15 @@ foldl1A : Action m => (a -> a -> m a) -> [a] -> m a\n foldl1A f (x :: xs) = foldlA f x xs\n foldl1A _ [] = error \"foldl1M: empty list\"\n \n+-- | Filters the list using the applicative function: keeps only the elements where the predicate holds.\n+--\n+-- ```\n+-- >>> filterA (\\x -> Some (x % 2 == 0)) [0..5]"
  },
  {
    "id" : "57fc33b3-8e27-4072-b139-e5662dda37f2",
    "prId" : 3563,
    "comments" : [
      {
        "id" : "83b648b1-3c43-4061-b162-a278dae40352",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "I'm not sure that means a lot to other DAML developers. :)",
        "createdAt" : "2019-11-21T08:39:54Z",
        "updatedAt" : "2019-11-21T08:40:14Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "b3ad4853c3e9651b12e4c23c536d6815e7338f4a",
    "line" : 7,
    "diffHunk" : "@@ -72,3 +72,14 @@ replicateA_ : Applicative m => Int -> m a -> m ()\n replicateA_ n f\n   | n <= 0 = pure ()\n   | otherwise = f *> replicateA_ (n - 1) f\n+\n+infixr 1 <=<, >=>\n+\n+-- | Left-to-right composition of Kleisli arrows."
  }
]