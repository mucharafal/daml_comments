[
  {
    "id" : "d2371046-a1b8-4a31-9f93-9ebe196065d4",
    "prId" : 7552,
    "comments" : [
      {
        "id" : "c49e8ef0-1183-4f79-b729-2bfc0485ec3a",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "This doesn’t trigger in `daml-doctest`.",
        "createdAt" : "2020-10-02T09:43:50Z",
        "updatedAt" : "2020-10-02T10:35:17Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "731077c6-ff5f-47c0-99a5-8e9fbd9d1bac",
        "parentId" : "c49e8ef0-1183-4f79-b729-2bfc0485ec3a",
        "author" : {
          "login" : "bame-da",
          "name" : "Bernhard Elsner",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/40762178?u=28b5edbfe9271d5db3fcfa3b80d30f93cce4321f&v=4"
        },
        "body" : "ok, reverting this change.",
        "createdAt" : "2020-10-02T10:33:47Z",
        "updatedAt" : "2020-10-02T10:35:17Z",
        "lastEditedBy" : {
          "login" : "bame-da",
          "name" : "Bernhard Elsner",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/40762178?u=28b5edbfe9271d5db3fcfa3b80d30f93cce4321f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "72eb8825-f04e-4c19-b12f-de3b9f5c3726",
        "parentId" : "c49e8ef0-1183-4f79-b729-2bfc0485ec3a",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Opened https://github.com/digital-asset/daml/issues/7553 to improve this",
        "createdAt" : "2020-10-02T10:41:44Z",
        "updatedAt" : "2020-10-02T10:41:45Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "472db374ebfe656b53796d231b8feb7c5f1b7aa8",
    "line" : null,
    "diffHunk" : "@@ -7,107 +7,107 @@ module DA.Bifunctor(Bifunctor(..)) where\n \n -- | A bifunctor is a type constructor that takes\n -- two type arguments and is a functor in /both/ arguments. That\n--- is, unlike with 'Functor', a type constructor such as 'Either'\n--- does not need to be partially applied for a 'Bifunctor'\n+-- is, unlike with Functor, a type constructor such as Either\n+-- does not need to be partially applied for a Bifunctor\n -- instance, and the methods in this class permit mapping\n--- functions over the 'Left' value or the 'Right' value,\n+-- functions over the Left value or the Right value,\n -- or both at the same time.\n --\n -- It is a bifunctor where both the first and second\n -- arguments are covariant.\n --\n--- You can define a 'Bifunctor' by either defining 'bimap' or by\n--- defining both 'first' and 'second'.\n+-- You can define a Bifunctor by either defining bimap or by\n+-- defining both first and second.\n --\n--- If you supply 'bimap', you should ensure that:\n+-- If you supply bimap, you should ensure that:\n --\n--- ```\n--- @'bimap' 'identity' 'identity' ≡ 'identity'@\n--- ```\n+-- ````\n+-- bimap identity identity ≡ identity\n+-- ````\n --\n--- If you supply 'first' and 'second', ensure:\n+-- If you supply first and second, ensure:\n --\n--- ```\n--- @\n--- 'first' 'identity' ≡ 'identity'\n--- 'second' 'identity' ≡ 'identity'\n--- @\n--- ```\n+-- ````\n+-- \n+-- first identity ≡ identity\n+-- second identity ≡ identity\n+-- \n+-- ````\n --\n -- If you supply both, you should also ensure:\n --\n -- ````\n--- @'bimap' f g ≡ 'first' f '.' 'second' g@\n--- ```\n+-- bimap f g ≡ first f . second g\n+-- ````\n --\n -- By parametricity, these will ensure that:\n --\n--- ```\n--- @\n--- 'bimap'  (f '.' g) (h '.' i) ≡ 'bimap' f h '.' 'bimap' g i\n--- 'first'  (f '.' g) ≡ 'first'  f '.' 'first'  g\n--- 'second' (f '.' g) ≡ 'second' f '.' 'second' g\n--- @\n--- ```\n+-- ````\n+-- \n+-- bimap  (f . g) (h . i) ≡ bimap f h . bimap g i\n+-- first  (f . g) ≡ first  f . first  g\n+-- second (f . g) ≡ second f . second g\n+-- \n+-- ````\n class Bifunctor p where\n     {-# MINIMAL bimap | first, second #-}\n \n     -- | Map over both arguments at the same time.\n     --\n     -- ````\n-    -- @'bimap' f g ≡ 'first' f '.' 'second' g@\n+    -- bimap f g ≡ first f . second g\n     -- ````\n     --\n     -- Examples:\n     --\n-    -- ```\n-    -- >>> bimap not (+1) (True, 3)\n+    -- ````\n+    -- daml> bimap not (+1) (True, 3)"
  },
  {
    "id" : "3f57486a-aafc-44fe-a243-11920cc11adf",
    "prId" : 7552,
    "comments" : [
      {
        "id" : "5ddc6801-29ed-4a10-be7a-e10de0a53c2d",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Do we need an empty line here?",
        "createdAt" : "2020-10-02T09:54:15Z",
        "updatedAt" : "2020-10-02T10:35:17Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "84e63b58-0b82-4740-85c9-f324810da3f0",
        "parentId" : "5ddc6801-29ed-4a10-be7a-e10de0a53c2d",
        "author" : {
          "login" : "bame-da",
          "name" : "Bernhard Elsner",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/40762178?u=28b5edbfe9271d5db3fcfa3b80d30f93cce4321f&v=4"
        },
        "body" : "fixed.",
        "createdAt" : "2020-10-02T10:35:30Z",
        "updatedAt" : "2020-10-02T10:35:30Z",
        "lastEditedBy" : {
          "login" : "bame-da",
          "name" : "Bernhard Elsner",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/40762178?u=28b5edbfe9271d5db3fcfa3b80d30f93cce4321f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "472db374ebfe656b53796d231b8feb7c5f1b7aa8",
    "line" : null,
    "diffHunk" : "@@ -7,107 +7,107 @@ module DA.Bifunctor(Bifunctor(..)) where\n \n -- | A bifunctor is a type constructor that takes\n -- two type arguments and is a functor in /both/ arguments. That\n--- is, unlike with 'Functor', a type constructor such as 'Either'\n--- does not need to be partially applied for a 'Bifunctor'\n+-- is, unlike with Functor, a type constructor such as Either\n+-- does not need to be partially applied for a Bifunctor\n -- instance, and the methods in this class permit mapping\n--- functions over the 'Left' value or the 'Right' value,\n+-- functions over the Left value or the Right value,\n -- or both at the same time.\n --\n -- It is a bifunctor where both the first and second\n -- arguments are covariant.\n --\n--- You can define a 'Bifunctor' by either defining 'bimap' or by\n--- defining both 'first' and 'second'.\n+-- You can define a Bifunctor by either defining bimap or by\n+-- defining both first and second.\n --\n--- If you supply 'bimap', you should ensure that:\n+-- If you supply bimap, you should ensure that:\n --\n--- ```\n--- @'bimap' 'identity' 'identity' ≡ 'identity'@\n--- ```\n+-- ````\n+-- bimap identity identity ≡ identity\n+-- ````\n --\n--- If you supply 'first' and 'second', ensure:\n+-- If you supply first and second, ensure:\n --\n--- ```\n--- @\n--- 'first' 'identity' ≡ 'identity'\n--- 'second' 'identity' ≡ 'identity'\n--- @\n--- ```\n+-- ````\n+-- "
  },
  {
    "id" : "7e203ed2-25ee-46db-a3fb-8fca37c27488",
    "prId" : 7552,
    "comments" : [
      {
        "id" : "5cb23b29-e124-4b6e-a9b5-71c7963fa65b",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Don't we want `Functor` to be typeset as code anymore?",
        "createdAt" : "2020-10-02T09:54:32Z",
        "updatedAt" : "2020-10-02T10:35:17Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "3581d072-5f64-457c-99a1-2e8c235fee9c",
        "parentId" : "5cb23b29-e124-4b6e-a9b5-71c7963fa65b",
        "author" : {
          "login" : "bame-da",
          "name" : "Bernhard Elsner",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/40762178?u=28b5edbfe9271d5db3fcfa3b80d30f93cce4321f&v=4"
        },
        "body" : "That is not what apostrophes do in our docs. They are just rendered as text. But I'll replace them with backticks where appropriate so they become inline literals.",
        "createdAt" : "2020-10-02T10:33:32Z",
        "updatedAt" : "2020-10-02T10:35:17Z",
        "lastEditedBy" : {
          "login" : "bame-da",
          "name" : "Bernhard Elsner",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/40762178?u=28b5edbfe9271d5db3fcfa3b80d30f93cce4321f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "b9a2cd59-5961-47e9-94cb-5d081a8ae5e8",
        "parentId" : "5cb23b29-e124-4b6e-a9b5-71c7963fa65b",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "In Haddock proper, apostrophes typeset text as code and back it with a link to the definition of the identifier. I'm not sure we can do the latter but we should definitely do the former by using backticks. Thanks for taking care of it.",
        "createdAt" : "2020-10-02T10:58:14Z",
        "updatedAt" : "2020-10-02T10:58:15Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "472db374ebfe656b53796d231b8feb7c5f1b7aa8",
    "line" : null,
    "diffHunk" : "@@ -7,107 +7,107 @@ module DA.Bifunctor(Bifunctor(..)) where\n \n -- | A bifunctor is a type constructor that takes\n -- two type arguments and is a functor in /both/ arguments. That\n--- is, unlike with 'Functor', a type constructor such as 'Either'\n--- does not need to be partially applied for a 'Bifunctor'\n+-- is, unlike with Functor, a type constructor such as Either"
  }
]