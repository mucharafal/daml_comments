[
  {
    "id" : "6fca6c78-7ecc-49e3-9149-2e128d40d364",
    "prId" : 1736,
    "comments" : [
      {
        "id" : "1e0cf253-67c6-46d8-a082-81c628d15693",
        "parentId" : null,
        "author" : {
          "login" : "ndmitchell",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1651197?u=2a7f401a0bc6c1e722d5fbecc923715861c4567c&v=4"
        },
        "body" : "I'd recommend using a Barrier from Control.Concurrent.Extra as that catches some ways this can go wrong",
        "createdAt" : "2019-06-18T10:22:18Z",
        "updatedAt" : "2019-06-18T11:20:53Z",
        "lastEditedBy" : {
          "login" : "ndmitchell",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1651197?u=2a7f401a0bc6c1e722d5fbecc923715861c4567c&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "9ce4ff30-9647-4514-a5a9-aa77a1356f44",
        "parentId" : "1e0cf253-67c6-46d8-a082-81c628d15693",
        "author" : {
          "login" : "ndmitchell",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1651197?u=2a7f401a0bc6c1e722d5fbecc923715861c4567c&v=4"
        },
        "body" : "For the moment you might as well use the return value rather than the callback - but I assume you're going to change that next?",
        "createdAt" : "2019-06-18T10:25:08Z",
        "updatedAt" : "2019-06-18T11:20:53Z",
        "lastEditedBy" : {
          "login" : "ndmitchell",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1651197?u=2a7f401a0bc6c1e722d5fbecc923715861c4567c&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "c2824684-e717-41f9-af24-4dc2c7cd1ac6",
        "parentId" : "1e0cf253-67c6-46d8-a082-81c628d15693",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Switched to a barrier. Using the return value is not the same. `shakeRun` returns an `IO (IO [a])` and if you try to `join` that you end up waiting for all rules to finish.\r\n\r\nI also renamed it to `runActionSync`. Given that I managed to mistype this several times myself while making this PR, that definitely seems like a good idea :)",
        "createdAt" : "2019-06-18T10:55:32Z",
        "updatedAt" : "2019-06-18T11:20:53Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "10e61d00f3e1f2400cbf9ea899bceed08e0caa84",
    "line" : null,
    "diffHunk" : "@@ -100,14 +101,32 @@ setProfiling opts shakeOpts =\n shutdown :: IdeState -> IO ()\n shutdown = shakeShut\n \n--- | Run a single action using the supplied service.\n+-- | Run a single action using the supplied service. See `runActions`\n+-- for more details.\n runAction :: IdeState -> Action a -> IO a\n runAction service action = head <$> runActions service [action]\n \n -- | Run a list of actions in parallel using the supplied service.\n+-- This will return as soon as the results of the actions are\n+-- available.  There might still be other rules running at this point,\n+-- e.g., the ofInterestRule.\n runActions :: IdeState -> [Action a] -> IO [a]\n-runActions x = join . shakeRun x\n-\n+runActions x acts = do\n+    var <- newEmptyMVar\n+    _ <- shakeRun x acts (putMVar var)"
  }
]