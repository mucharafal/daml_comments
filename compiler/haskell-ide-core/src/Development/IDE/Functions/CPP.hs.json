[
  {
    "id" : "3981412d-ee77-4c3d-ba33-b37bf1c9b267",
    "prId" : 1694,
    "comments" : [
      {
        "id" : "b3b42955-6f98-4758-972d-d42a17b485df",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "What exactly broke the existing code?",
        "createdAt" : "2019-06-16T13:45:25Z",
        "updatedAt" : "2019-06-16T13:45:53Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "5585beff-bdca-4391-ab11-7bc65bf2df13",
        "parentId" : "b3b42955-6f98-4758-972d-d42a17b485df",
        "author" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "body" : "Before I had commented out all these defines, when hacking over the CPP module in the first place. Shake has some `#ifdef mingw32_HOST_OS` and that wasn't defined, despite me being on Windows.",
        "createdAt" : "2019-06-17T11:10:11Z",
        "updatedAt" : "2019-06-17T11:10:11Z",
        "lastEditedBy" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "7535e124-eed8-4806-95e5-45235a0e53c9",
        "parentId" : "b3b42955-6f98-4758-972d-d42a17b485df",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Oooh, I missed the block comment around this. Now this makes a lot more sense :)",
        "createdAt" : "2019-06-17T11:11:39Z",
        "updatedAt" : "2019-06-17T11:11:40Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "4675d4c3cd5e4d5441d88c54f2fad16cbb6e4084",
    "line" : 18,
    "diffHunk" : "@@ -52,11 +53,12 @@ doCpp dflags raw input_fn output_fn = do\n                       | otherwise = SysTools.runCc\n                                           dflags (SysTools.Option \"-E\" : args)\n \n-    let target_defs = [] {-\n-          [ \"-D\" ++ HOST_OS     ++ \"_BUILD_OS\",\n-            \"-D\" ++ HOST_ARCH   ++ \"_BUILD_ARCH\",\n-            \"-D\" ++ TARGET_OS   ++ \"_HOST_OS\",\n-            \"-D\" ++ TARGET_ARCH ++ \"_HOST_ARCH\" ] -}\n+    let target_defs =\n+          -- NEIL: Patched to use System.Info instead of constants from CPP"
  },
  {
    "id" : "70ae4317-ed75-4d72-90c6-351703304cad",
    "prId" : 1131,
    "comments" : [
      {
        "id" : "5552370a-6773-4479-8e8c-444e0ec1de79",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Do we want to have this comment here? It looks like you only copied the comment but not the logic the comment refers to.",
        "createdAt" : "2019-05-14T17:06:50Z",
        "updatedAt" : "2019-05-14T17:57:24Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "7de4d88f-12ca-4b9a-a62b-8621858c5193",
        "parentId" : "5552370a-6773-4479-8e8c-444e0ec1de79",
        "author" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "body" : "Deleted. Thanks",
        "createdAt" : "2019-05-14T17:57:41Z",
        "updatedAt" : "2019-05-14T17:57:41Z",
        "lastEditedBy" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "571b5a9773a2a6724df6d1061d2a3f643358ce2f",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,211 @@\n+-- Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n+-- SPDX-License-Identifier: Apache-2.0\n+\n+-- Copied from https://github.com/ghc/ghc/blob/master/compiler/main/DriverPipeline.hs on 14 May 2019\n+-- Requested to be exposed at https://gitlab.haskell.org/ghc/ghc/merge_requests/944\n+{- HLINT ignore -} -- since copied from upstream\n+\n+{-# LANGUAGE CPP, NamedFieldPuns, NondecreasingIndentation, BangPatterns, MultiWayIf #-}\n+{-# OPTIONS_GHC -Wno-incomplete-uni-patterns #-}\n+\n+-----------------------------------------------------------------------------\n+--\n+-- GHC Driver\n+--\n+-- (c) The University of Glasgow 2005\n+--\n+-----------------------------------------------------------------------------\n+\n+module Development.IDE.Functions.CPP(doCpp) where\n+\n+import Packages\n+import SysTools\n+import Module\n+import DynFlags\n+import Panic\n+import FileCleanup\n+\n+import System.Directory\n+import System.FilePath\n+import Control.Monad\n+import Data.List        ( intercalate )\n+import Data.Maybe\n+import Data.Version\n+\n+\n+\n+doCpp :: DynFlags -> Bool -> FilePath -> FilePath -> IO ()\n+doCpp dflags raw input_fn output_fn = do\n+    let hscpp_opts = picPOpts dflags\n+    let cmdline_include_paths = includePaths dflags\n+\n+    pkg_include_dirs <- getPackageIncludePath dflags []\n+    let include_paths_global = foldr (\\ x xs -> (\"-I\" ++ x) : xs) []\n+          (includePathsGlobal cmdline_include_paths ++ pkg_include_dirs)\n+    let include_paths_quote = foldr (\\ x xs -> (\"-iquote\" ++ x) : xs) []\n+          (includePathsQuote cmdline_include_paths)\n+    let include_paths = include_paths_quote ++ include_paths_global\n+\n+    let verbFlags = getVerbFlags dflags\n+\n+    let cpp_prog args | raw       = SysTools.runCpp dflags args\n+                      | otherwise = SysTools.runCc Nothing dflags (SysTools.Option \"-E\" : args)\n+\n+    let target_defs = [] {-\n+          [ \"-D\" ++ HOST_OS     ++ \"_BUILD_OS\",\n+            \"-D\" ++ HOST_ARCH   ++ \"_BUILD_ARCH\",\n+            \"-D\" ++ TARGET_OS   ++ \"_HOST_OS\",\n+            \"-D\" ++ TARGET_ARCH ++ \"_HOST_ARCH\" ] -}\n+        -- remember, in code we *compile*, the HOST is the same our TARGET,\n+        -- and BUILD is the same as our HOST.\n+\n+    let sse_defs =\n+          [ \"-D__SSE__\"      | isSseEnabled      dflags ] ++\n+          [ \"-D__SSE2__\"     | isSse2Enabled     dflags ] ++\n+          [ \"-D__SSE4_2__\"   | isSse4_2Enabled   dflags ]\n+\n+    let avx_defs =\n+          [ \"-D__AVX__\"      | isAvxEnabled      dflags ] ++\n+          [ \"-D__AVX2__\"     | isAvx2Enabled     dflags ] ++\n+          [ \"-D__AVX512CD__\" | isAvx512cdEnabled dflags ] ++\n+          [ \"-D__AVX512ER__\" | isAvx512erEnabled dflags ] ++\n+          [ \"-D__AVX512F__\"  | isAvx512fEnabled  dflags ] ++\n+          [ \"-D__AVX512PF__\" | isAvx512pfEnabled dflags ]\n+\n+    backend_defs <- getBackendDefs dflags\n+\n+    let th_defs = [ \"-D__GLASGOW_HASKELL_TH__\" ]\n+    -- Default CPP defines in Haskell source\n+    ghcVersionH <- getGhcVersionPathName dflags\n+    let hsSourceCppOpts = [ \"-include\", ghcVersionH ]\n+\n+    -- MIN_VERSION macros\n+    let uids = explicitPackages (pkgState dflags)\n+        pkgs = catMaybes (map (lookupPackage dflags) uids)\n+    mb_macro_include <-\n+        if not (null pkgs) && gopt Opt_VersionMacros dflags\n+            then do macro_stub <- newTempName dflags TFL_CurrentModule \"h\"\n+                    writeFile macro_stub (generatePackageVersionMacros pkgs)\n+                    -- Include version macros for every *exposed* package.\n+                    -- Without -hide-all-packages and with a package database\n+                    -- size of 1000 packages, it takes cpp an estimated 2\n+                    -- milliseconds to process this file. See #10970\n+                    -- comment 8.\n+                    return [SysTools.FileOption \"-include\" macro_stub]\n+            else return []\n+\n+    cpp_prog       (   map SysTools.Option verbFlags\n+                    ++ map SysTools.Option include_paths\n+                    ++ map SysTools.Option hsSourceCppOpts\n+                    ++ map SysTools.Option target_defs\n+                    ++ map SysTools.Option backend_defs\n+                    ++ map SysTools.Option th_defs\n+                    ++ map SysTools.Option hscpp_opts\n+                    ++ map SysTools.Option sse_defs\n+                    ++ map SysTools.Option avx_defs\n+                    ++ mb_macro_include\n+        -- Set the language mode to assembler-with-cpp when preprocessing. This\n+        -- alleviates some of the C99 macro rules relating to whitespace and the hash\n+        -- operator, which we tend to abuse. Clang in particular is not very happy\n+        -- about this.\n+                    ++ [ SysTools.Option     \"-x\"\n+                       , SysTools.Option     \"assembler-with-cpp\"\n+                       , SysTools.Option     input_fn\n+        -- We hackily use Option instead of FileOption here, so that the file\n+        -- name is not back-slashed on Windows.  cpp is capable of\n+        -- dealing with / in filenames, so it works fine.  Furthermore\n+        -- if we put in backslashes, cpp outputs #line directives\n+        -- with *double* backslashes.   And that in turn means that\n+        -- our error messages get double backslashes in them.\n+        -- In due course we should arrange that the lexer deals\n+        -- with these \\\\ escapes properly.\n+                       , SysTools.Option     \"-o\"\n+                       , SysTools.FileOption \"\" output_fn\n+                       ])\n+\n+getBackendDefs :: DynFlags -> IO [String]\n+getBackendDefs dflags | hscTarget dflags == HscLlvm = do\n+    llvmVer <- figureLlvmVersion dflags\n+    return $ case llvmVer of\n+               Just n -> [ \"-D__GLASGOW_HASKELL_LLVM__=\" ++ format n ]\n+               _      -> []\n+  where\n+    format (major, minor)\n+      | minor >= 100 = error \"getBackendDefs: Unsupported minor version\"\n+      | otherwise = show $ (100 * major + minor :: Int) -- Contract is Int\n+\n+getBackendDefs _ =\n+    return []\n+\n+-- ---------------------------------------------------------------------------\n+-- Macros (cribbed from Cabal)\n+\n+generatePackageVersionMacros :: [PackageConfig] -> String\n+generatePackageVersionMacros pkgs = concat\n+  -- Do not add any C-style comments. See #3389.\n+  [ generateMacros \"\" pkgname version\n+  | pkg <- pkgs\n+  , let version = packageVersion pkg\n+        pkgname = map fixchar (packageNameString pkg)\n+  ]\n+\n+fixchar :: Char -> Char\n+fixchar '-' = '_'\n+fixchar c   = c\n+\n+generateMacros :: String -> String -> Version -> String\n+generateMacros prefix name version =\n+  concat\n+  [\"#define \", prefix, \"VERSION_\",name,\" \",show (showVersion version),\"\\n\"\n+  ,\"#define MIN_\", prefix, \"VERSION_\",name,\"(major1,major2,minor) (\\\\\\n\"\n+  ,\"  (major1) <  \",major1,\" || \\\\\\n\"\n+  ,\"  (major1) == \",major1,\" && (major2) <  \",major2,\" || \\\\\\n\"\n+  ,\"  (major1) == \",major1,\" && (major2) == \",major2,\" && (minor) <= \",minor,\")\"\n+  ,\"\\n\\n\"\n+  ]\n+  where\n+    (major1:major2:minor:_) = map show (versionBranch version ++ repeat 0)\n+\n+-- ---------------------------------------------------------------------------\n+-- join object files into a single relocatable object file, using ld -r"
  }
]