[
  {
    "id" : "96e2ba03-00c6-4301-9307-0aa83a74a916",
    "prId" : 1633,
    "comments" : [
      {
        "id" : "05e6ebe4-44cc-43c8-a44d-24bb330503c9",
        "parentId" : null,
        "author" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "body" : "If all we want to do is replace `\\` with `/` I'd be tempted by `replace \"\\\\\" \"/\"` since I worry the drive/path stuff is scary and more likely to go wrong in corner cases (and that's 90% because I wrote all those functions).",
        "createdAt" : "2019-06-13T12:29:45Z",
        "updatedAt" : "2019-06-13T12:39:03Z",
        "lastEditedBy" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "57d2f5bc-21ba-4f81-a4c5-784373ad21f1",
        "parentId" : "05e6ebe4-44cc-43c8-a44d-24bb330503c9",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Changed but we only replace on Windows since backslashes are valid in filenames on Linux.",
        "createdAt" : "2019-06-13T12:34:33Z",
        "updatedAt" : "2019-06-13T12:39:03Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "75d2f656a94e4f190c9b49e6279bdf7e83bd2624",
    "line" : 50,
    "diffHunk" : "@@ -67,6 +75,27 @@ import Language.Haskell.LSP.Diagnostics\n \n import Development.IDE.Types.Location\n \n+-- | Newtype wrapper around FilePath that always has normalized slashes.\n+newtype NormalizedFilePath = NormalizedFilePath FilePath\n+    deriving (Eq, Ord, Show, Hashable, NFData)\n+\n+instance IsString NormalizedFilePath where\n+    fromString = toNormalizedFilePath\n+\n+toNormalizedFilePath :: FilePath -> NormalizedFilePath\n+toNormalizedFilePath \"\" = NormalizedFilePath \"\"\n+toNormalizedFilePath fp = NormalizedFilePath $ normalise' fp"
  },
  {
    "id" : "9a61a627-0c45-4373-bf7f-21eea28976ba",
    "prId" : 1603,
    "comments" : [
      {
        "id" : "fa0c764f-40d6-40f0-839e-d9c06f1e2e7d",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "```suggestion\r\n  , NormalizedUri\r\n```",
        "createdAt" : "2019-06-12T11:46:40Z",
        "updatedAt" : "2019-06-12T11:47:56Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "1df81c7cf7a639f8bff3128f10e4d78625ada37c",
    "line" : 22,
    "diffHunk" : "@@ -56,7 +58,10 @@ import Language.Haskell.LSP.Types as LSP (\n   , filePathToUri\n   , List(..)\n   , DiagnosticRelatedInformation(..)\n+  , NormalizedUri(..)"
  },
  {
    "id" : "83ca82c5-0eb0-4eb2-9690-b6f1df7fe451",
    "prId" : 1504,
    "comments" : [
      {
        "id" : "d2df778d-db3b-4ef4-84ff-ca09977a869f",
        "parentId" : null,
        "author" : null,
        "body" : "I guess `filePathToUri` has some LSP-specific logic, otherwise I would recommend using `escapeURIString isUnescapedInURIComponent` instead of building the URI / stripping the prefix / escaping / adding prefix back.",
        "createdAt" : "2019-06-04T07:28:53Z",
        "updatedAt" : "2019-06-04T07:29:33Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "8a3c3c8f-6d0c-4a08-b02a-02e539d61e5a",
        "parentId" : "d2df778d-db3b-4ef4-84ff-ca09977a869f",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Not really LSP specific but it takes care of converting backslashes to forward slashes which is necessary for `file:` URIs.",
        "createdAt" : "2019-06-04T07:32:23Z",
        "updatedAt" : "2019-06-04T07:32:23Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "50de4869-58f9-4e7e-b523-c4321a7bee41",
        "parentId" : "d2df778d-db3b-4ef4-84ff-ca09977a869f",
        "author" : null,
        "body" : "Right! Filepaths... !!",
        "createdAt" : "2019-06-04T07:40:44Z",
        "updatedAt" : "2019-06-04T07:40:44Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "df3c10c9e934a11bdb5910d7531153c277ad3b32",
    "line" : 35,
    "diffHunk" : "@@ -67,9 +68,21 @@ import Development.IDE.Types.Location\n -- So we have our own wrapper here that supports empty filepaths.\n uriToFilePath' :: Uri -> Maybe FilePath\n uriToFilePath' uri\n-    | uri == filePathToUri \"\" = Just \"\"\n+    | uri == filePathToUri' \"\" = Just \"\"\n     | otherwise = LSP.uriToFilePath uri\n \n+-- TODO This is a temporary hack: VSCode escapes ':' in URIs while haskell-lspâ€™s filePathToUri doesn't.\n+-- This causes issues since haskell-lsp stores the original URI in the VFS while we roundtrip once via\n+-- uriToFilePath' and filePathToUri before we look it up again. At that point : will be unescaped in the URI\n+-- so the lookup fails. The long-term solution here is to avoid roundtripping URIs but that is a larger task\n+-- so for now we have our own version of filePathToUri that does escape colons.\n+filePathToUri' :: FilePath -> Uri\n+filePathToUri' fp =\n+    case T.stripPrefix \"file:\" (getUri uri) of\n+        Just suffix -> Uri $ T.pack $ \"file:\" <> escapeURIString (/= ':') (T.unpack suffix)\n+        Nothing -> uri\n+    where uri = filePathToUri fp"
  },
  {
    "id" : "ab54fb11-a8db-4039-bd68-5b0100d07143",
    "prId" : 1423,
    "comments" : [
      {
        "id" : "ad9a44b2-e823-4bb4-b5c0-eb967858494a",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "These functions were simply unused.",
        "createdAt" : "2019-05-28T11:17:45Z",
        "updatedAt" : "2019-05-28T11:22:13Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "69b14fe0-6f7f-4a55-8533-c46dbbaa38fe",
        "parentId" : "ad9a44b2-e823-4bb4-b5c0-eb967858494a",
        "author" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "body" : "Yes, I had noticed this, but wondered if DMD was going to use them in a future version...",
        "createdAt" : "2019-05-30T11:40:11Z",
        "updatedAt" : "2019-05-30T11:40:11Z",
        "lastEditedBy" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "55ff51b7e3b25657762ac2910822bd5ab50d66d2",
    "line" : 90,
    "diffHunk" : "@@ -167,20 +161,61 @@ prettyDiagnostic (fp, LSP.Diagnostic{..}) =\n     where\n         sev = fromMaybe LSP.DsError _severity\n \n-prettyDiagnosticStore :: DiagnosticStore -> Doc SyntaxClass"
  },
  {
    "id" : "34dc7dd3-cd9d-4d3c-a90a-4e95f05d56bd",
    "prId" : 1423,
    "comments" : [
      {
        "id" : "193b4a76-020a-4dca-95ba-db4ba129cb2d",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Also unused.",
        "createdAt" : "2019-05-28T11:17:54Z",
        "updatedAt" : "2019-05-28T11:22:13Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "55ff51b7e3b25657762ac2910822bd5ab50d66d2",
    "line" : 65,
    "diffHunk" : "@@ -96,28 +112,6 @@ defDiagnostic _range _message = LSP.Diagnostic {\n   , _relatedInformation = Nothing\n   }\n \n-filterSeriousErrors ::\n-    FilePath ->\n-    [LSP.Diagnostic] ->\n-    [LSP.Diagnostic]\n-filterSeriousErrors fp ="
  },
  {
    "id" : "56c23ba4-8137-42cb-bb7e-54ddb97d1b41",
    "prId" : 897,
    "comments" : [
      {
        "id" : "4027ef13-ee0f-4555-9004-516f9cec4dee",
        "parentId" : null,
        "author" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "body" : "I'd get rid of this and use `fst` and `Data.Tuple.Extra.first` as the functions that work on the first element of a pair.",
        "createdAt" : "2019-05-03T15:51:22Z",
        "updatedAt" : "2019-05-03T17:04:58Z",
        "lastEditedBy" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "1fff754e0a8427f79531bada2fa8e80e997f29f5",
    "line" : null,
    "diffHunk" : "@@ -101,30 +101,20 @@ defDiagnostic _range _message = LSP.Diagnostic {\n \n -- | setLocation but with no range information\n dFilePath ::\n-  Lens' LSP.Diagnostic (Maybe FilePath)\n+  Lens' FileDiagnostic FilePath"
  },
  {
    "id" : "6c693c70-7122-40b7-9226-7291d3dba0c7",
    "prId" : 897,
    "comments" : [
      {
        "id" : "742810a4-e546-4a4c-ad57-52d5747f9fe1",
        "parentId" : null,
        "author" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "body" : "The one use of this function seems decidedly dodgy. I'd kill it.",
        "createdAt" : "2019-05-03T15:59:26Z",
        "updatedAt" : "2019-05-03T17:04:58Z",
        "lastEditedBy" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "5763bece-729a-47f8-983b-7ea39897022f",
        "parentId" : "742810a4-e546-4a4c-ad57-52d5747f9fe1",
        "author" : {
          "login" : "DavidM-D",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/11191170?u=3edc6e08b7c7f0d980a6dc81e5a2ce49dd1ef0f0&v=4"
        },
        "body" : "Yup, first pass I tried to change as little as possible and see what shook out. Turns out the lenses were one of those things. Should have used a draft PR to check the tests instead of a regular one",
        "createdAt" : "2019-05-03T16:16:41Z",
        "updatedAt" : "2019-05-03T17:04:58Z",
        "lastEditedBy" : {
          "login" : "DavidM-D",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/11191170?u=3edc6e08b7c7f0d980a6dc81e5a2ce49dd1ef0f0&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "1fff754e0a8427f79531bada2fa8e80e997f29f5",
    "line" : null,
    "diffHunk" : "@@ -101,30 +101,20 @@ defDiagnostic _range _message = LSP.Diagnostic {\n \n -- | setLocation but with no range information\n dFilePath ::\n-  Lens' LSP.Diagnostic (Maybe FilePath)\n+  Lens' FileDiagnostic FilePath\n dFilePath = lens g s where\n-    g :: LSP.Diagnostic -> Maybe FilePath\n-    g d = (uriToFilePath . _uri) =<< view dLocation d\n-    s :: LSP.Diagnostic -> Maybe FilePath -> LSP.Diagnostic\n-    s d@Diagnostic{..} fp = set dLocation\n-        (Location <$> (filePathToUri <$> fp) <*> pure _range) d\n+    g = fst\n+    s (_, d) fpB = (fpB, d)\n \n -- | This adds location information to the diagnostics but this is only used in\n --   the case of serious errors to give some context to what went wrong\n dLocation ::"
  },
  {
    "id" : "edbf96ef-c1c1-49d9-a85f-446228d156ee",
    "prId" : 737,
    "comments" : [
      {
        "id" : "24c87001-9190-4ad4-b7fe-1596e1079960",
        "parentId" : null,
        "author" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "body" : "Should we add \"dLocation: Unknown error\" here just so we ever see blank errors we know why they are showing up?",
        "createdAt" : "2019-04-26T14:40:25Z",
        "updatedAt" : "2019-04-30T19:58:17Z",
        "lastEditedBy" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "01cf1c2b-c02c-449c-b2d5-a2e5a87c562d",
        "parentId" : "24c87001-9190-4ad4-b7fe-1596e1079960",
        "author" : {
          "login" : "DavidM-D",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/11191170?u=3edc6e08b7c7f0d980a6dc81e5a2ce49dd1ef0f0&v=4"
        },
        "body" : "Good call",
        "createdAt" : "2019-04-26T14:54:29Z",
        "updatedAt" : "2019-04-30T19:58:17Z",
        "lastEditedBy" : {
          "login" : "DavidM-D",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/11191170?u=3edc6e08b7c7f0d980a6dc81e5a2ce49dd1ef0f0&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "56bd2774d9769f214ab5ad7d06d1e6caed208589",
    "line" : null,
    "diffHunk" : "@@ -3,137 +3,230 @@\n \n {-# LANGUAGE FlexibleInstances #-}\n {-# LANGUAGE OverloadedStrings #-}\n+{-# LANGUAGE DuplicateRecordFields #-}\n+{-# LANGUAGE BlockArguments #-}\n module Development.IDE.Types.Diagnostics (\n-  Diagnostic(..),\n-  FileDiagnostics(..),\n+  LSP.Diagnostic(..),\n+  FileDiagnostics,\n   Location(..),\n   Range(..),\n-  Severity(..),\n+  LSP.DiagnosticSeverity(..),\n   Position(..),\n+  DiagnosticStore,\n+  DiagnosticRelatedInformation(..),\n+  List(..),\n+  StoreItem(..),\n+  Uri(..),\n   noLocation,\n   noRange,\n   ideErrorText,\n   ideErrorPretty,\n   errorDiag,\n   ideTryIOException,\n   prettyFileDiagnostics,\n-  prettyDiagnostic\n+  prettyDiagnostic,\n+  prettyDiagnosticStore,\n+  defDiagnostic,\n+  addDiagnostics,\n+  filterSeriousErrors,\n+  dLocation,\n+  dFilePath,\n+  filePathToUri,\n+  getDiagnosticsFromStore\n   ) where\n \n-import Control.DeepSeq\n import Control.Exception\n-import Data.Aeson (FromJSON, ToJSON)\n+import Control.Lens (Lens', lens, set, view)\n import Data.Either.Combinators\n-import Data.List.Extra\n+import Data.Maybe as Maybe\n+import Data.Foldable\n+import qualified Data.Map as Map\n import qualified Data.Text as T\n import Data.Text.Prettyprint.Doc.Syntax\n-import GHC.Generics\n-import qualified Network.URI.Encode\n+import Data.String (IsString(..))\n import qualified Text.PrettyPrint.Annotated.HughesPJClass as Pretty\n+import           Language.Haskell.LSP.Types as LSP (\n+    DiagnosticSeverity(..)\n+  , Diagnostic(..)\n+  , filePathToUri\n+  , uriToFilePath\n+  , List(..)\n+  , DiagnosticRelatedInformation(..)\n+  , Uri(..)\n+  )\n+import Language.Haskell.LSP.Diagnostics\n \n import Development.IDE.Types.Location\n \n-ideErrorText :: FilePath -> T.Text -> Diagnostic\n-ideErrorText absFile = errorDiag absFile \"Ide Error\"\n-\n-ideErrorPretty :: Pretty.Pretty e => FilePath -> e -> Diagnostic\n-ideErrorPretty absFile = ideErrorText absFile . T.pack . Pretty.prettyShow\n-\n-errorDiag :: FilePath -> T.Text -> T.Text -> Diagnostic\n-errorDiag fp src msg =\n-  Diagnostic\n-  { dFilePath = fp\n-  , dRange    = noRange\n-  , dSeverity = Error\n-  , dSource   = src\n-  , dMessage  = msg\n+ideErrorText :: FilePath -> T.Text -> LSP.Diagnostic\n+ideErrorText fp = errorDiag fp \"Ide Error\"\n+\n+ideErrorPretty :: Pretty.Pretty e => FilePath -> e -> LSP.Diagnostic\n+ideErrorPretty fp = ideErrorText fp . T.pack . Pretty.prettyShow\n+\n+errorDiag :: FilePath -> T.Text -> T.Text -> LSP.Diagnostic\n+errorDiag fp src =\n+  set dFilePath (Just fp) . diagnostic noRange LSP.DsError src\n+\n+-- | This is for compatibility with our old diagnostic type\n+diagnostic :: Range\n+           -> LSP.DiagnosticSeverity\n+           -> T.Text -- ^ source\n+           -> T.Text -- ^ message\n+           -> LSP.Diagnostic\n+diagnostic rng sev src msg\n+    = LSP.Diagnostic {\n+          _range = rng,\n+          _severity = Just sev,\n+          _code = Nothing,\n+          _source = Just src,\n+          _message = msg,\n+          _relatedInformation = Nothing\n+          }\n+\n+-- | Any optional field is instantiated to Nothing\n+defDiagnostic ::\n+  Range ->\n+  T.Text -> -- ^ error message\n+  LSP.Diagnostic\n+defDiagnostic _range _message = LSP.Diagnostic {\n+    _range\n+  , _message\n+  , _severity = Nothing\n+  , _code = Nothing\n+  , _source = Nothing\n+  , _relatedInformation = Nothing\n   }\n \n-ideTryIOException :: FilePath -> IO a -> IO (Either Diagnostic a)\n+-- | setLocation but with no range information\n+dFilePath ::\n+  Lens' LSP.Diagnostic (Maybe FilePath)\n+dFilePath = lens g s where\n+    g :: LSP.Diagnostic -> Maybe FilePath\n+    g d = (uriToFilePath . _uri) =<< view dLocation d\n+    s :: LSP.Diagnostic -> (Maybe FilePath) -> LSP.Diagnostic\n+    s d fp = set dLocation (Location <$> (filePathToUri <$> fp) <*> pure noRange) d\n+\n+-- | This adds location information to the diagnostics but this is only used in\n+--   the case of serious errors to give some context to what went wrong\n+dLocation ::\n+  Lens' LSP.Diagnostic (Maybe Location)\n+dLocation = lens g s where\n+    s :: LSP.Diagnostic -> Maybe Location -> LSP.Diagnostic\n+    s d = \\case\n+        Just loc -> d {LSP._relatedInformation = Just $ LSP.List [DiagnosticRelatedInformation loc \"\"]}"
  },
  {
    "id" : "1b7798eb-0698-47dd-a1b0-f32bf59fcbdd",
    "prId" : 737,
    "comments" : [
      {
        "id" : "10e32add-984d-4b68-aad9-cb048b3980fd",
        "parentId" : null,
        "author" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "body" : "Do dFilePath and dLocation really need to be lenses? The setter seems useful. All the getters seem like they should work over a list rather than assuming its a single item anyway?",
        "createdAt" : "2019-04-26T14:42:44Z",
        "updatedAt" : "2019-04-30T19:58:17Z",
        "lastEditedBy" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "5c86ffca-9392-4d01-865b-9f83f6467b10",
        "parentId" : "10e32add-984d-4b68-aad9-cb048b3980fd",
        "author" : {
          "login" : "DavidM-D",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/11191170?u=3edc6e08b7c7f0d980a6dc81e5a2ce49dd1ef0f0&v=4"
        },
        "body" : "I find it quite a bit easier to treat this as a maybe and the lens is a fairly nice way of doing that, it just means that it fits in better with our existing code. This should be fairly short lived",
        "createdAt" : "2019-04-26T14:52:23Z",
        "updatedAt" : "2019-04-30T19:58:17Z",
        "lastEditedBy" : {
          "login" : "DavidM-D",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/11191170?u=3edc6e08b7c7f0d980a6dc81e5a2ce49dd1ef0f0&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "4e819dbe-135d-4e22-9e79-fdef8290312e",
        "parentId" : "10e32add-984d-4b68-aad9-cb048b3980fd",
        "author" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "body" : "As long as it's short lived I'm ok with it.",
        "createdAt" : "2019-04-26T15:04:23Z",
        "updatedAt" : "2019-04-30T19:58:17Z",
        "lastEditedBy" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "56bd2774d9769f214ab5ad7d06d1e6caed208589",
    "line" : 125,
    "diffHunk" : "@@ -3,137 +3,230 @@\n \n {-# LANGUAGE FlexibleInstances #-}\n {-# LANGUAGE OverloadedStrings #-}\n+{-# LANGUAGE DuplicateRecordFields #-}\n+{-# LANGUAGE BlockArguments #-}\n module Development.IDE.Types.Diagnostics (\n-  Diagnostic(..),\n-  FileDiagnostics(..),\n+  LSP.Diagnostic(..),\n+  FileDiagnostics,\n   Location(..),\n   Range(..),\n-  Severity(..),\n+  LSP.DiagnosticSeverity(..),\n   Position(..),\n+  DiagnosticStore,\n+  DiagnosticRelatedInformation(..),\n+  List(..),\n+  StoreItem(..),\n+  Uri(..),\n   noLocation,\n   noRange,\n   ideErrorText,\n   ideErrorPretty,\n   errorDiag,\n   ideTryIOException,\n   prettyFileDiagnostics,\n-  prettyDiagnostic\n+  prettyDiagnostic,\n+  prettyDiagnosticStore,\n+  defDiagnostic,\n+  addDiagnostics,\n+  filterSeriousErrors,\n+  dLocation,\n+  dFilePath,\n+  filePathToUri,\n+  getDiagnosticsFromStore\n   ) where\n \n-import Control.DeepSeq\n import Control.Exception\n-import Data.Aeson (FromJSON, ToJSON)\n+import Control.Lens (Lens', lens, set, view)\n import Data.Either.Combinators\n-import Data.List.Extra\n+import Data.Maybe as Maybe\n+import Data.Foldable\n+import qualified Data.Map as Map\n import qualified Data.Text as T\n import Data.Text.Prettyprint.Doc.Syntax\n-import GHC.Generics\n-import qualified Network.URI.Encode\n+import Data.String (IsString(..))\n import qualified Text.PrettyPrint.Annotated.HughesPJClass as Pretty\n+import           Language.Haskell.LSP.Types as LSP (\n+    DiagnosticSeverity(..)\n+  , Diagnostic(..)\n+  , filePathToUri\n+  , uriToFilePath\n+  , List(..)\n+  , DiagnosticRelatedInformation(..)\n+  , Uri(..)\n+  )\n+import Language.Haskell.LSP.Diagnostics\n \n import Development.IDE.Types.Location\n \n-ideErrorText :: FilePath -> T.Text -> Diagnostic\n-ideErrorText absFile = errorDiag absFile \"Ide Error\"\n-\n-ideErrorPretty :: Pretty.Pretty e => FilePath -> e -> Diagnostic\n-ideErrorPretty absFile = ideErrorText absFile . T.pack . Pretty.prettyShow\n-\n-errorDiag :: FilePath -> T.Text -> T.Text -> Diagnostic\n-errorDiag fp src msg =\n-  Diagnostic\n-  { dFilePath = fp\n-  , dRange    = noRange\n-  , dSeverity = Error\n-  , dSource   = src\n-  , dMessage  = msg\n+ideErrorText :: FilePath -> T.Text -> LSP.Diagnostic\n+ideErrorText fp = errorDiag fp \"Ide Error\"\n+\n+ideErrorPretty :: Pretty.Pretty e => FilePath -> e -> LSP.Diagnostic\n+ideErrorPretty fp = ideErrorText fp . T.pack . Pretty.prettyShow\n+\n+errorDiag :: FilePath -> T.Text -> T.Text -> LSP.Diagnostic\n+errorDiag fp src =\n+  set dFilePath (Just fp) . diagnostic noRange LSP.DsError src\n+\n+-- | This is for compatibility with our old diagnostic type\n+diagnostic :: Range\n+           -> LSP.DiagnosticSeverity\n+           -> T.Text -- ^ source\n+           -> T.Text -- ^ message\n+           -> LSP.Diagnostic\n+diagnostic rng sev src msg\n+    = LSP.Diagnostic {\n+          _range = rng,\n+          _severity = Just sev,\n+          _code = Nothing,\n+          _source = Just src,\n+          _message = msg,\n+          _relatedInformation = Nothing\n+          }\n+\n+-- | Any optional field is instantiated to Nothing\n+defDiagnostic ::\n+  Range ->\n+  T.Text -> -- ^ error message\n+  LSP.Diagnostic\n+defDiagnostic _range _message = LSP.Diagnostic {\n+    _range\n+  , _message\n+  , _severity = Nothing\n+  , _code = Nothing\n+  , _source = Nothing\n+  , _relatedInformation = Nothing\n   }\n \n-ideTryIOException :: FilePath -> IO a -> IO (Either Diagnostic a)\n+-- | setLocation but with no range information\n+dFilePath ::"
  },
  {
    "id" : "15a9f10c-8270-4c9b-9499-acfad3cca2b6",
    "prId" : 737,
    "comments" : [
      {
        "id" : "58e052fe-64e8-4eb9-8a34-c328d4bc7a70",
        "parentId" : null,
        "author" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "body" : "Should some of the serious/misclassified error stuff in Shake.hs move in here as a nice abstract API? (Perhaps during a follow-up)",
        "createdAt" : "2019-04-26T14:45:03Z",
        "updatedAt" : "2019-04-30T19:58:17Z",
        "lastEditedBy" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "61d878a6-63be-41e9-b493-5a7bd43ca498",
        "parentId" : "58e052fe-64e8-4eb9-8a34-c328d4bc7a70",
        "author" : {
          "login" : "DavidM-D",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/11191170?u=3edc6e08b7c7f0d980a6dc81e5a2ce49dd1ef0f0&v=4"
        },
        "body" : "Sure, it makes a lot more sense to do that when we move to the DiagnosticsStore",
        "createdAt" : "2019-04-26T14:53:08Z",
        "updatedAt" : "2019-04-30T19:58:17Z",
        "lastEditedBy" : {
          "login" : "DavidM-D",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/11191170?u=3edc6e08b7c7f0d980a6dc81e5a2ce49dd1ef0f0&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "56bd2774d9769f214ab5ad7d06d1e6caed208589",
    "line" : 1,
    "diffHunk" : "@@ -3,137 +3,230 @@\n "
  }
]