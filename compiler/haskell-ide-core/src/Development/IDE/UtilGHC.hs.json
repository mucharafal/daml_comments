[
  {
    "id" : "e9eff209-8169-4988-a4f3-47e9523276c0",
    "prId" : 1239,
    "comments" : [
      {
        "id" : "4a0a7958-e456-4af2-9ce0-75ddf63e0c61",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Does this PR change the tempfiles we create or is this something unrelated that you included in this PR (both is fine with me, just trying to understand why we need this now).",
        "createdAt" : "2019-05-20T11:01:42Z",
        "updatedAt" : "2019-05-20T11:03:33Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "b1376d32-2eaa-4a1a-93dd-e8affedfe6f9",
        "parentId" : "4a0a7958-e456-4af2-9ce0-75ddf63e0c61",
        "author" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "body" : "Unrelated. We should probably have had this from the beginning, but I don't think anything we actually do uses temp files, so it's somewhat irrelevant. However, if it ever becomes relevant, we'll get horrible race conditions that are impossible to debug, so I thought worth cleaning up now.",
        "createdAt" : "2019-05-20T11:05:11Z",
        "updatedAt" : "2019-05-20T11:05:11Z",
        "lastEditedBy" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "86ea0331b52214ee8de3aa4a47d056e446a63a3c",
    "line" : 102,
    "diffHunk" : "@@ -106,22 +54,14 @@ prettyPrint = showSDoc fakeDynFlags . ppr\n \n runGhcEnv :: HscEnv -> Ghc a -> IO a\n runGhcEnv env act = do\n-    ref <- newIORef env\n-    unGhc act $ Session ref\n-\n+    filesToClean <- newIORef emptyFilesToClean"
  },
  {
    "id" : "dab42855-7c59-4e6f-a97e-3ecd9f1a2869",
    "prId" : 978,
    "comments" : [
      {
        "id" : "c1326335-c119-42f6-a698-22165ba48bfa",
        "parentId" : null,
        "author" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "body" : "```suggestion\r\nimport System.FilePath\r\n```\r\n\r\nI'd just import unqualified unless there is a good reason not to",
        "createdAt" : "2019-05-07T13:44:07Z",
        "updatedAt" : "2019-05-08T11:26:44Z",
        "lastEditedBy" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "13358ff2-9f95-4598-9824-726be9b506d8",
        "parentId" : "c1326335-c119-42f6-a698-22165ba48bfa",
        "author" : {
          "login" : "robin-da",
          "name" : "Robin Krom",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/14074936?u=1b47fdbdfd82ea534219fc1b94d646873c56a7d7&v=4"
        },
        "body" : "fixed.",
        "createdAt" : "2019-05-08T11:27:21Z",
        "updatedAt" : "2019-05-08T11:27:22Z",
        "lastEditedBy" : {
          "login" : "robin-da",
          "name" : "Robin Krom",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/14074936?u=1b47fdbdfd82ea534219fc1b94d646873c56a7d7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "146027cc9f615cea33b30b0bb939faefcb3cec1c",
    "line" : null,
    "diffHunk" : "@@ -28,6 +28,7 @@ import qualified Packages\n import           Platform\n import qualified EnumSet\n import           Data.IORef\n+import System.FilePath ((</>))"
  },
  {
    "id" : "91c69b33-0283-4ca1-9428-42cfbf6faac4",
    "prId" : 346,
    "comments" : [
      {
        "id" : "f8dacd67-8d8b-4812-b449-8ec93ab8bc95",
        "parentId" : null,
        "author" : {
          "login" : "ndmitchell",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1651197?u=2a7f401a0bc6c1e722d5fbecc923715861c4567c&v=4"
        },
        "body" : "We generally just import unrestricted for Monad",
        "createdAt" : "2019-04-10T06:57:54Z",
        "updatedAt" : "2019-04-10T10:55:25Z",
        "lastEditedBy" : {
          "login" : "ndmitchell",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1651197?u=2a7f401a0bc6c1e722d5fbecc923715861c4567c&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "81db8e66601628e5044dd4f368b119e3893ac45e",
    "line" : null,
    "diffHunk" : "@@ -14,18 +14,22 @@\n module Development.IDE.UtilGHC where\n \n import           \"ghc-lib-parser\" Config\n+import qualified \"ghc-lib-parser\" CmdLineParser as Cmd (warnMsg)\n+import           \"ghc-lib-parser\" DynFlags (parseDynamicFilePragma)\n import           \"ghc-lib-parser\" Fingerprint\n import           \"ghc-lib\" GHC                         hiding (convertLit)\n import           \"ghc-lib-parser\" GHC.LanguageExtensions.Type\n import           \"ghc-lib-parser\" GhcMonad\n import           \"ghc-lib\" GhcPlugins                  as GHC hiding (PackageState, fst3, (<>))\n import           \"ghc-lib\" HscMain\n import qualified \"ghc-lib-parser\" Packages\n+import           \"ghc-lib-parser\" Panic (throwGhcExceptionIO)\n import           \"ghc-lib-parser\" Platform\n import qualified \"ghc-lib-parser\" StringBuffer                as SB\n import qualified \"ghc-lib-parser\" EnumSet\n \n import           Control.DeepSeq\n+import           Control.Monad (unless)"
  },
  {
    "id" : "861691d5-18b5-454f-8402-f1cfcd679a97",
    "prId" : 346,
    "comments" : [
      {
        "id" : "cefc09ca-65a3-40b2-9faa-c4d170aa57a8",
        "parentId" : null,
        "author" : {
          "login" : "ndmitchell",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1651197?u=2a7f401a0bc6c1e722d5fbecc923715861c4567c&v=4"
        },
        "body" : "Is this our custom modify session function? Can't check right now since on a mobile",
        "createdAt" : "2019-04-10T06:59:56Z",
        "updatedAt" : "2019-04-10T10:55:25Z",
        "lastEditedBy" : {
          "login" : "ndmitchell",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1651197?u=2a7f401a0bc6c1e722d5fbecc923715861c4567c&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "f1609d52-51d8-420d-91ec-cee81f60bca3",
        "parentId" : "cefc09ca-65a3-40b2-9faa-c4d170aa57a8",
        "author" : {
          "login" : "jberthold-da",
          "name" : "Jost Berthold",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/28879196?u=41dee6fb7ab2761a566b324e2f4e5ad9b577ae0e&v=4"
        },
        "body" : "It is the same as the one used in `modifyDynFlags` above (which could almost do this job here, except the `IO` for parsing the custom flags.",
        "createdAt" : "2019-04-10T10:39:15Z",
        "updatedAt" : "2019-04-10T10:55:25Z",
        "lastEditedBy" : {
          "login" : "jberthold-da",
          "name" : "Jost Berthold",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/28879196?u=41dee6fb7ab2761a566b324e2f4e5ad9b577ae0e&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "81db8e66601628e5044dd4f368b119e3893ac45e",
    "line" : 47,
    "diffHunk" : "@@ -185,9 +189,26 @@ instance NFData PackageState where\n --     * Installs a custom log action;\n --     * Sets up the package databases;\n --     * Sets the import paths to the given list of 'FilePath'.\n-setupDamlGHC :: GhcMonad m => [FilePath] -> Maybe String -> PackageState -> m ()\n-setupDamlGHC importPaths mbPackageName packageState = do\n+--     * if present, parses and applies custom options for GHC\n+--       (may fail if the custom options are inconsistent with std DAML ones)\n+setupDamlGHC :: GhcMonad m => [FilePath] -> Maybe String -> PackageState -> [String] -> m ()\n+setupDamlGHC importPaths mbPackageName packageState [] =\n   modifyDynFlags $ adjustDynFlags importPaths packageState mbPackageName\n+-- if custom options are given, add them after the standard DAML flag setup\n+setupDamlGHC importPaths mbPackageName packageState customOpts = do\n+  setupDamlGHC importPaths mbPackageName packageState []\n+  damlDFlags <- getSessionDynFlags\n+  (dflags', leftover, warns) <- parseDynamicFilePragma damlDFlags $ map noLoc customOpts\n+\n+  let leftoverError = CmdLineError $\n+        (unlines . (\"Unable to parse custom flags:\":) . map unLoc) $ leftover\n+  unless (null leftover) $ liftIO $ throwGhcExceptionIO leftoverError\n+\n+  unless (null warns) $\n+    liftIO $ putStrLn $ unlines $ \"Warnings:\" : map (unLoc . Cmd.warnMsg) warns\n+\n+  modifySession $ \\h ->"
  }
]