[
  {
    "id" : "f62d0571-cdde-4478-89e6-d16437310539",
    "prId" : 7548,
    "comments" : [
      {
        "id" : "92043baa-6ece-47f4-93e0-a1d447c1304b",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "```suggestion\r\n    <*> traverse decodeExpr templateChoiceObservers\r\n```\r\nand drop the function below.",
        "createdAt" : "2020-10-15T11:44:21Z",
        "updatedAt" : "2020-10-21T08:55:23Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "1968095863437d26708412e9478b8d076d85897c",
    "line" : null,
    "diffHunk" : "@@ -319,11 +319,17 @@ decodeChoice LF1.TemplateChoice{..} =\n     <*> decodeName ChoiceName templateChoiceName\n     <*> pure templateChoiceConsuming\n     <*> mayDecode \"templateChoiceControllers\" templateChoiceControllers decodeExpr\n+    <*> decodeExprMaybe templateChoiceObservers"
  },
  {
    "id" : "13c6757c-219b-4f32-a872-55732b79796b",
    "prId" : 4822,
    "comments" : [
      {
        "id" : "94bff379-0dbd-4a14-93b7-6da6c42c0e0e",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "My impression is that we only need `mangled` here for the error message. Is that correct? If so, could we probably make the error message returned by `unmangleIdentifier` better and remove the additional complexity here and in the surroundings?",
        "createdAt" : "2020-03-05T08:50:02Z",
        "updatedAt" : "2020-03-05T09:26:08Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "59f63f88-acff-404a-a660-65fa78ecf57a",
        "parentId" : "94bff379-0dbd-4a14-93b7-6da6c42c0e0e",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Good point, Iâ€™ve shuffled it around.",
        "createdAt" : "2020-03-05T09:26:15Z",
        "updatedAt" : "2020-03-05T09:26:16Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "b6c001520fbd3ee48cb0e34e2038eca2c0a61228",
    "line" : null,
    "diffHunk" : "@@ -84,39 +99,41 @@ decodeName\n     :: Util.EitherLike TL.Text Int32 e\n     => (T.Text -> a) -> Maybe e -> Decode a\n decodeName wrapName mbStrOrId = mayDecode \"name\" mbStrOrId $ \\strOrId -> do\n-    mangled <- case Util.toEither strOrId of\n-        Left str -> pure $ decodeString str\n+    unmangledOrErr <- case Util.toEither strOrId of\n+        Left str -> pure $ decodeMangledString str\n         Right strId -> lookupString strId\n-    decodeNameString wrapName mangled\n+    decodeNameString wrapName unmangledOrErr\n \n-decodeNameString :: (T.Text -> a) -> T.Text -> Decode a\n-decodeNameString wrapName mangled =\n-    case unmangleIdentifier mangled of\n+decodeNameString :: (T.Text -> a) -> (T.Text, Either String UnmangledIdentifier) -> Decode a\n+decodeNameString wrapName (mangled, unmangledOrErr) ="
  },
  {
    "id" : "1c1f7f3e-56e4-42e3-a568-8aefe851816c",
    "prId" : 3752,
    "comments" : [
      {
        "id" : "260d3032-581b-41b8-8e5b-798130dd108f",
        "parentId" : null,
        "author" : null,
        "body" : "This looks like an accidental change?",
        "createdAt" : "2019-12-06T12:45:29Z",
        "updatedAt" : "2019-12-06T13:22:14Z",
        "lastEditedBy" : null,
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "6dc17317-c42f-41ea-8b6f-cf6d4f5a3796",
        "parentId" : "260d3032-581b-41b8-8e5b-798130dd108f",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "Typo. The CI catches it also. ",
        "createdAt" : "2019-12-06T12:49:49Z",
        "updatedAt" : "2019-12-06T13:22:14Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "2b61137407ee7fc37090ddd8c577e975b8f44595",
    "line" : null,
    "diffHunk" : "@@ -783,4 +786,4 @@ decodeNM\n   => (NM.Name b -> Error) -> (a -> Decode b) -> V.Vector a -> Decode (NM.NameMap b)\n decodeNM mkDuplicateError decode1 xs = do\n   ys <- traverse decode1 (V.toList xs)\n-  either (throwError . mkDuplicateError) pure $ NM.fromListEither ys\n+  either (throwError . mkDuplicateError) pure $ NM.fromList"
  },
  {
    "id" : "1b276a68-4f83-4cd2-bc7e-40202ee2cdb4",
    "prId" : 3067,
    "comments" : [
      {
        "id" : "28f56958-bae0-43a8-aae8-40c8a566c72d",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "```suggestion\r\nlookupDottedName :: Int32 -> Decode [T.Text]\r\n```",
        "createdAt" : "2019-10-02T14:18:38Z",
        "updatedAt" : "2019-10-04T10:37:43Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "eb8a3c63a39ce4715734e5fd8e994ef0f0490499",
    "line" : null,
    "diffHunk" : "@@ -36,15 +39,21 @@ newtype Decode a = Decode{unDecode :: ReaderT DecodeEnv (Except Error) a}\n runDecode :: DecodeEnv -> Decode a -> Either Error a\n runDecode env act = runExcept $ runReaderT (unDecode act) env\n \n-lookupString :: Word64 -> Decode T.Text\n-lookupString strIdW = do\n-    let strIdI = toInteger strIdW\n-    when (strIdI > toInteger (maxBound :: Int)) $\n-        throwError $ MissingPackageRefId strIdW\n+lookupInterned :: V.Vector a -> (Int32 -> Error) -> Int32 -> Decode a\n+lookupInterned interned mkError id = do\n+    case interned V.!? fromIntegral id of\n+          Nothing -> throwError $ mkError id\n+          Just x -> pure x\n+\n+lookupString :: Int32 -> Decode T.Text\n+lookupString strId = do\n     DecodeEnv{internedStrings} <- ask\n-    case internedStrings V.!? fromInteger strIdI of\n-          Nothing -> throwError $ MissingPackageRefId strIdW\n-          Just str -> pure str\n+    lookupInterned internedStrings BadStringId strId\n+\n+lookupStringList :: Int32 -> Decode [T.Text]"
  },
  {
    "id" : "e5060853-3238-49a4-8c2a-16ed9e4e426a",
    "prId" : 3067,
    "comments" : [
      {
        "id" : "cd0285dd-1af5-4a87-bb52-719775b663aa",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "I think a comment on what the arguments represent would be good.",
        "createdAt" : "2019-10-02T14:23:04Z",
        "updatedAt" : "2019-10-04T10:37:43Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "eb8a3c63a39ce4715734e5fd8e994ef0f0490499",
    "line" : 73,
    "diffHunk" : "@@ -56,15 +65,26 @@ decodeString :: TL.Text -> T.Text\n decodeString = TL.toStrict\n \n -- | Decode a string that will be interned in DAML-LF 1.7 and onwards.\n-decodeInternableString :: TL.Text -> Decode T.Text\n-decodeInternableString = pure . decodeString\n+decodeInternableStrings :: V.Vector TL.Text -> Int32 -> Decode [T.Text]"
  },
  {
    "id" : "aca5e2f6-0139-4526-8367-b318f0f1da29",
    "prId" : 3067,
    "comments" : [
      {
        "id" : "81874d52-660e-4127-8071-9fa7739f4838",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "`EitherLike` scares me, can we not just pass in a function `e -> Either TL.Text Int32`?",
        "createdAt" : "2019-10-02T14:27:09Z",
        "updatedAt" : "2019-10-04T10:37:43Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "3424827f-f55a-4dd0-a886-e34b14abb3f5",
        "parentId" : "81874d52-660e-4127-8071-9fa7739f4838",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "or even better, just fmap at the usesite. and pass in `Maybe (Either TL.Text Int32)` here.",
        "createdAt" : "2019-10-02T14:27:36Z",
        "updatedAt" : "2019-10-04T10:37:43Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "dc92cead-e0ef-423d-8919-caf9c5c92739",
        "parentId" : "81874d52-660e-4127-8071-9fa7739f4838",
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Or make a custom typeclass with a method `e -> Either TL.Text Int32` and convert to that if you really donâ€™t want to pass this explicitly. You can still derive the implementation using generics but at least you donâ€™t leak 5 unused type variables to every use site.",
        "createdAt" : "2019-10-02T14:41:05Z",
        "updatedAt" : "2019-10-04T10:37:43Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "0bd4d177-8ad7-454f-8908-f82157be29f6",
        "parentId" : "81874d52-660e-4127-8071-9fa7739f4838",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "I went with the last suggestion. Thanks for pushing me to improve this.",
        "createdAt" : "2019-10-02T15:35:49Z",
        "updatedAt" : "2019-10-04T10:37:43Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "eb8a3c63a39ce4715734e5fd8e994ef0f0490499",
    "line" : null,
    "diffHunk" : "@@ -56,15 +65,26 @@ decodeString :: TL.Text -> T.Text\n decodeString = TL.toStrict\n \n -- | Decode a string that will be interned in DAML-LF 1.7 and onwards.\n-decodeInternableString :: TL.Text -> Decode T.Text\n-decodeInternableString = pure . decodeString\n+decodeInternableStrings :: V.Vector TL.Text -> Int32 -> Decode [T.Text]\n+decodeInternableStrings strs id\n+    | V.null strs = lookupStringList id\n+    | id == 0 = pure $ map decodeString (V.toList strs)\n+    | otherwise = throwError $ ParseError \"items and interned id both set for string list\"\n \n -- | Decode the name of a syntactic object, e.g., a variable or a data\n -- constructor. These strings are mangled to escape special characters. All\n -- names will be interned in DAML-LF 1.7 and onwards.\n-decodeName :: (T.Text -> a) -> TL.Text -> Decode a\n-decodeName wrapName mangled = do\n-    mangled <- decodeInternableString mangled\n+decodeName\n+    :: Util.EitherLike m1 m2 m3 m4 m5 TL.Text Int32 e"
  },
  {
    "id" : "86af3a02-6720-451e-90d1-b9de63fc07c1",
    "prId" : 3060,
    "comments" : [
      {
        "id" : "acb2e42f-8c96-4a83-82fd-a95ba060405b",
        "parentId" : null,
        "author" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "body" : "```suggestion\r\n-- | Decode of a string that cannot be interned, e.g, the entries of the\r\n```",
        "createdAt" : "2019-09-27T11:18:09Z",
        "updatedAt" : "2019-09-27T12:11:33Z",
        "lastEditedBy" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "87dd5e12-4ef2-43e6-b007-fd01536abc04",
        "parentId" : "acb2e42f-8c96-4a83-82fd-a95ba060405b",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Fixed. Same for the other,",
        "createdAt" : "2019-09-27T12:13:28Z",
        "updatedAt" : "2019-09-27T12:13:29Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "298870b17514c2ac54026808ebb1f9544aed6ec4",
    "line" : null,
    "diffHunk" : "@@ -35,24 +36,99 @@ newtype Decode a = Decode{unDecode :: ReaderT DecodeEnv (Except Error) a}\n runDecode :: DecodeEnv -> Decode a -> Either Error a\n runDecode env act = runExcept $ runReaderT (unDecode act) env\n \n-decodeVersion :: TL.Text -> Either Error Version\n+lookupString :: Word64 -> Decode T.Text\n+lookupString strIdW = do\n+    let strIdI = toInteger strIdW\n+    when (strIdI > toInteger (maxBound :: Int)) $\n+        throwError $ MissingPackageRefId strIdW\n+    DecodeEnv{internedStrings} <- ask\n+    case internedStrings V.!? fromInteger strIdI of\n+          Nothing -> throwError $ MissingPackageRefId strIdW\n+          Just str -> pure str\n+\n+------------------------------------------------------------------------\n+-- Decodings of things related to string interning\n+------------------------------------------------------------------------\n+\n+-- | Encode of a string that cannot be interned, e.g, the entries of the"
  },
  {
    "id" : "7c4f1fc5-1d47-4d26-b10c-b2d0e77e73ab",
    "prId" : 3060,
    "comments" : [
      {
        "id" : "bf0124c2-e102-4cf7-8912-85065d3b35e7",
        "parentId" : null,
        "author" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "body" : "```suggestion\r\n-- | Decode a string that will be interned in DAML-LF 1.7 and onwards.\r\n```",
        "createdAt" : "2019-09-27T11:18:21Z",
        "updatedAt" : "2019-09-27T12:11:33Z",
        "lastEditedBy" : {
          "login" : "aherrmann-da",
          "name" : "Andreas Herrmann",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/42969706?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "298870b17514c2ac54026808ebb1f9544aed6ec4",
    "line" : null,
    "diffHunk" : "@@ -35,24 +36,99 @@ newtype Decode a = Decode{unDecode :: ReaderT DecodeEnv (Except Error) a}\n runDecode :: DecodeEnv -> Decode a -> Either Error a\n runDecode env act = runExcept $ runReaderT (unDecode act) env\n \n-decodeVersion :: TL.Text -> Either Error Version\n+lookupString :: Word64 -> Decode T.Text\n+lookupString strIdW = do\n+    let strIdI = toInteger strIdW\n+    when (strIdI > toInteger (maxBound :: Int)) $\n+        throwError $ MissingPackageRefId strIdW\n+    DecodeEnv{internedStrings} <- ask\n+    case internedStrings V.!? fromInteger strIdI of\n+          Nothing -> throwError $ MissingPackageRefId strIdW\n+          Just str -> pure str\n+\n+------------------------------------------------------------------------\n+-- Decodings of things related to string interning\n+------------------------------------------------------------------------\n+\n+-- | Encode of a string that cannot be interned, e.g, the entries of the\n+-- interning table itself.\n+decodeString :: TL.Text -> T.Text\n+decodeString = TL.toStrict\n+\n+-- | Encode a string that will be interned in DAML-LF 1.7 and onwards."
  },
  {
    "id" : "cdeb1c1c-5bd6-4a81-a807-11adfc149110",
    "prId" : 3053,
    "comments" : [
      {
        "id" : "309f4142-165c-4001-8348-2b0188f06ac3",
        "parentId" : null,
        "author" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "body" : "This looks like a new addition here? Or does this replace the `PackageRefCtx`?",
        "createdAt" : "2019-09-26T18:28:50Z",
        "updatedAt" : "2019-09-26T18:29:10Z",
        "lastEditedBy" : {
          "login" : "rohanjr",
          "name" : "Rohan Jacob-Rao",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/10836630?u=a30da7f2a9ceeb7c25249d5146f10fce61aeec4e&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "ac053a50-f65e-4e59-89f7-346e898d1b47",
        "parentId" : "309f4142-165c-4001-8348-2b0188f06ac3",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "It replaces the `PackageRefCtx`. I somehow prefer passing data rather than functions around when possible.",
        "createdAt" : "2019-09-27T07:42:21Z",
        "updatedAt" : "2019-09-27T07:42:21Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "a43bda6a4d235ee9cc39e6d532b1e4c7213585cf",
    "line" : 22,
    "diffHunk" : "@@ -24,14 +24,18 @@ import qualified Data.Text.Lazy as TL\n import qualified Data.Vector as V\n import qualified Proto3.Suite as Proto\n \n--- internal functions that *implement* decoding\n-type DecodeImpl = ReaderT PackageRefCtx Decode\n-type MonadDecode = MonadError Error\n \n-decodeImpl :: MonadDecode m => Decode a -> m a\n-decodeImpl = either throwError pure\n+newtype DecodeEnv = DecodeEnv\n+    { internedStrings :: V.Vector T.Text"
  },
  {
    "id" : "bd18ed1e-9b55-4e64-af49-542fae5f3787",
    "prId" : 2670,
    "comments" : [
      {
        "id" : "74d7dfff-ac28-4fd6-8689-0ded4650dd3a",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "Do we have tests for the decoder anywhere? Maybe some roundtrip tests?",
        "createdAt" : "2019-08-27T18:32:02Z",
        "updatedAt" : "2019-08-28T11:30:58Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "3a4e0baa-63b9-4aa8-a05e-aabe02cc1697",
        "parentId" : "74d7dfff-ac28-4fd6-8689-0ded4650dd3a",
        "author" : null,
        "body" : "I couldn't find any. I added the issue #2682 to track this.",
        "createdAt" : "2019-08-28T11:49:46Z",
        "updatedAt" : "2019-08-28T11:49:46Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "2c2900d7cd2fd33fbf5de9881afed0fec07bff1f",
    "line" : 11,
    "diffHunk" : "@@ -164,13 +164,11 @@ decodeChoice LF1.TemplateChoice{..} =\n     <*> mayDecode \"templateChoiceRetType\" templateChoiceRetType decodeType\n     <*> mayDecode \"templateChoiceUpdate\" templateChoiceUpdate decodeExpr\n \n--- FixMe: https://github.com/digital-asset/daml/issues/2289\n---   drop the `error \"Numeric not implemented\"` in the following function\n decodeBuiltinFunction :: MonadDecode m => LF1.BuiltinFunction -> m BuiltinExpr\n decodeBuiltinFunction = pure . \\case\n   LF1.BuiltinFunctionEQUAL_INT64 -> BEEqual BTInt64\n   LF1.BuiltinFunctionEQUAL_DECIMAL -> BEEqual BTDecimal\n-  LF1.BuiltinFunctionEQUAL_NUMERIC -> error \"Numeric not implemented\"\n+  LF1.BuiltinFunctionEQUAL_NUMERIC -> BEEqualNumeric"
  },
  {
    "id" : "2c67c931-38df-4b32-aedb-8a1f44468869",
    "prId" : 2649,
    "comments" : [
      {
        "id" : "a6419f7d-4c9c-4234-a30c-d316095a2164",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "This doesn't work since\r\n```\r\nEQUAL_DECIMAL : Decimal -> Decimal -> Bool\r\n```\r\nbut\r\n```\r\nEQUAL_NUMERIC : forall (n : Nat). Numeric n -> Numeric n -> Bool\r\n```\r\nSimilar issues below.",
        "createdAt" : "2019-08-23T14:43:33Z",
        "updatedAt" : "2019-08-26T11:34:54Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "8d5b5847-a440-407e-b342-cec55c3e5424",
        "parentId" : "a6419f7d-4c9c-4234-a30c-d316095a2164",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "fixed. Thanks for the help",
        "createdAt" : "2019-08-23T18:59:17Z",
        "updatedAt" : "2019-08-26T11:34:54Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "4b9f86ae2ceecae15c4e5d70035e0989229041d7",
    "line" : null,
    "diffHunk" : "@@ -164,10 +164,13 @@ decodeChoice LF1.TemplateChoice{..} =\n     <*> mayDecode \"templateChoiceRetType\" templateChoiceRetType decodeType\n     <*> mayDecode \"templateChoiceUpdate\" templateChoiceUpdate decodeExpr\n \n+-- FixMe: https://github.com/digital-asset/daml/issues/2289\n+--   NUMERIC and DECIMAL builtins should map to different internal builtin\n decodeBuiltinFunction :: MonadDecode m => LF1.BuiltinFunction -> m BuiltinExpr\n decodeBuiltinFunction = pure . \\case\n   LF1.BuiltinFunctionEQUAL_INT64 -> BEEqual BTInt64\n   LF1.BuiltinFunctionEQUAL_DECIMAL -> BEEqual BTDecimal\n+  LF1.BuiltinFunctionEQUAL_NUMERIC -> BEEqual BTDecimal"
  },
  {
    "id" : "8ebdb1cc-f22e-41c0-baf2-f666b7846d83",
    "prId" : 2298,
    "comments" : [
      {
        "id" : "9ed801ac-c069-4e3d-b9dd-d27497653099",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Let's use `error` here instead and leave the `pure` at the top. All of this is sitting behind a checker which should make sure we never hit this case anyway.",
        "createdAt" : "2019-07-29T11:03:30Z",
        "updatedAt" : "2019-07-29T18:04:31Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "ea07a8d2-db22-4833-8eab-ac7646077a87",
        "parentId" : "9ed801ac-c069-4e3d-b9dd-d27497653099",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "I just remove the \"new\" builtins from the proto (We will add builtins, once we exactly know the ones we need).  Then I can put back the `pure` at the top, without using `error` .",
        "createdAt" : "2019-07-29T11:22:35Z",
        "updatedAt" : "2019-07-29T18:04:31Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "33e6b1950b738efc874e833e075c7c7044405865",
    "line" : null,
    "diffHunk" : "@@ -165,97 +165,103 @@ decodeChoice LF1.TemplateChoice{..} =\n     <*> mayDecode \"templateChoiceUpdate\" templateChoiceUpdate decodeExpr\n \n decodeBuiltinFunction :: MonadDecode m => LF1.BuiltinFunction -> m BuiltinExpr\n-decodeBuiltinFunction = pure . \\case\n-  LF1.BuiltinFunctionEQUAL_INT64 -> BEEqual BTInt64\n-  LF1.BuiltinFunctionEQUAL_DECIMAL -> BEEqual BTDecimal\n-  LF1.BuiltinFunctionEQUAL_TEXT -> BEEqual BTText\n-  LF1.BuiltinFunctionEQUAL_TIMESTAMP -> BEEqual BTTimestamp\n-  LF1.BuiltinFunctionEQUAL_DATE -> BEEqual BTDate\n-  LF1.BuiltinFunctionEQUAL_PARTY -> BEEqual BTParty\n-  LF1.BuiltinFunctionEQUAL_BOOL -> BEEqual BTBool\n-\n-  LF1.BuiltinFunctionLEQ_INT64 -> BELessEq BTInt64\n-  LF1.BuiltinFunctionLEQ_DECIMAL -> BELessEq BTDecimal\n-  LF1.BuiltinFunctionLEQ_TEXT    -> BELessEq BTText\n-  LF1.BuiltinFunctionLEQ_TIMESTAMP    -> BELessEq BTTimestamp\n-  LF1.BuiltinFunctionLEQ_DATE -> BELessEq BTDate\n-  LF1.BuiltinFunctionLEQ_PARTY -> BELessEq BTParty\n-\n-  LF1.BuiltinFunctionLESS_INT64 -> BELess BTInt64\n-  LF1.BuiltinFunctionLESS_DECIMAL -> BELess BTDecimal\n-  LF1.BuiltinFunctionLESS_TEXT    -> BELess BTText\n-  LF1.BuiltinFunctionLESS_TIMESTAMP    -> BELess BTTimestamp\n-  LF1.BuiltinFunctionLESS_DATE -> BELess BTDate\n-  LF1.BuiltinFunctionLESS_PARTY -> BELess BTParty\n-\n-  LF1.BuiltinFunctionGEQ_INT64 -> BEGreaterEq BTInt64\n-  LF1.BuiltinFunctionGEQ_DECIMAL -> BEGreaterEq BTDecimal\n-  LF1.BuiltinFunctionGEQ_TEXT    -> BEGreaterEq BTText\n-  LF1.BuiltinFunctionGEQ_TIMESTAMP    -> BEGreaterEq BTTimestamp\n-  LF1.BuiltinFunctionGEQ_DATE -> BEGreaterEq BTDate\n-  LF1.BuiltinFunctionGEQ_PARTY -> BEGreaterEq BTParty\n-\n-  LF1.BuiltinFunctionGREATER_INT64 -> BEGreater BTInt64\n-  LF1.BuiltinFunctionGREATER_DECIMAL -> BEGreater BTDecimal\n-  LF1.BuiltinFunctionGREATER_TEXT    -> BEGreater BTText\n-  LF1.BuiltinFunctionGREATER_TIMESTAMP    -> BEGreater BTTimestamp\n-  LF1.BuiltinFunctionGREATER_DATE -> BEGreater BTDate\n-  LF1.BuiltinFunctionGREATER_PARTY -> BEGreater BTParty\n-\n-  LF1.BuiltinFunctionTO_TEXT_INT64 -> BEToText BTInt64\n-  LF1.BuiltinFunctionTO_TEXT_DECIMAL -> BEToText BTDecimal\n-  LF1.BuiltinFunctionTO_TEXT_TEXT    -> BEToText BTText\n-  LF1.BuiltinFunctionTO_TEXT_TIMESTAMP    -> BEToText BTTimestamp\n-  LF1.BuiltinFunctionTO_TEXT_PARTY   -> BEToText BTParty\n-  LF1.BuiltinFunctionTO_TEXT_DATE -> BEToText BTDate\n-  LF1.BuiltinFunctionTEXT_FROM_CODE_POINTS -> BETextFromCodePoints\n-  LF1.BuiltinFunctionFROM_TEXT_PARTY -> BEPartyFromText\n-  LF1.BuiltinFunctionFROM_TEXT_INT64 -> BEInt64FromText\n-  LF1.BuiltinFunctionFROM_TEXT_DECIMAL -> BEDecimalFromText\n-  LF1.BuiltinFunctionTEXT_TO_CODE_POINTS -> BETextToCodePoints\n-  LF1.BuiltinFunctionTO_QUOTED_TEXT_PARTY -> BEPartyToQuotedText\n-\n-  LF1.BuiltinFunctionADD_DECIMAL   -> BEAddDecimal\n-  LF1.BuiltinFunctionSUB_DECIMAL   -> BESubDecimal\n-  LF1.BuiltinFunctionMUL_DECIMAL   -> BEMulDecimal\n-  LF1.BuiltinFunctionDIV_DECIMAL   -> BEDivDecimal\n-  LF1.BuiltinFunctionROUND_DECIMAL -> BERoundDecimal\n-\n-  LF1.BuiltinFunctionADD_INT64 -> BEAddInt64\n-  LF1.BuiltinFunctionSUB_INT64 -> BESubInt64\n-  LF1.BuiltinFunctionMUL_INT64 -> BEMulInt64\n-  LF1.BuiltinFunctionDIV_INT64 -> BEDivInt64\n-  LF1.BuiltinFunctionMOD_INT64 -> BEModInt64\n-  LF1.BuiltinFunctionEXP_INT64 -> BEExpInt64\n-\n-  LF1.BuiltinFunctionFOLDL          -> BEFoldl\n-  LF1.BuiltinFunctionFOLDR          -> BEFoldr\n-  LF1.BuiltinFunctionEQUAL_LIST     -> BEEqualList\n-  LF1.BuiltinFunctionAPPEND_TEXT    -> BEAppendText\n-  LF1.BuiltinFunctionERROR          -> BEError\n-\n-  LF1.BuiltinFunctionMAP_EMPTY      -> BEMapEmpty\n-  LF1.BuiltinFunctionMAP_INSERT     -> BEMapInsert\n-  LF1.BuiltinFunctionMAP_LOOKUP     -> BEMapLookup\n-  LF1.BuiltinFunctionMAP_DELETE     -> BEMapDelete\n-  LF1.BuiltinFunctionMAP_TO_LIST    -> BEMapToList\n-  LF1.BuiltinFunctionMAP_SIZE       -> BEMapSize\n-\n-  LF1.BuiltinFunctionEXPLODE_TEXT -> BEExplodeText\n-  LF1.BuiltinFunctionIMPLODE_TEXT -> BEImplodeText\n-  LF1.BuiltinFunctionSHA256_TEXT  -> BESha256Text\n-\n-  LF1.BuiltinFunctionDATE_TO_UNIX_DAYS -> BEDateToUnixDays\n-  LF1.BuiltinFunctionUNIX_DAYS_TO_DATE -> BEUnixDaysToDate\n-  LF1.BuiltinFunctionTIMESTAMP_TO_UNIX_MICROSECONDS -> BETimestampToUnixMicroseconds\n-  LF1.BuiltinFunctionUNIX_MICROSECONDS_TO_TIMESTAMP -> BEUnixMicrosecondsToTimestamp\n-\n-  LF1.BuiltinFunctionINT64_TO_DECIMAL -> BEInt64ToDecimal\n-  LF1.BuiltinFunctionDECIMAL_TO_INT64 -> BEDecimalToInt64\n-\n-  LF1.BuiltinFunctionTRACE -> BETrace\n-  LF1.BuiltinFunctionEQUAL_CONTRACT_ID -> BEEqualContractId\n-  LF1.BuiltinFunctionCOERCE_CONTRACT_ID -> BECoerceContractId\n+decodeBuiltinFunction x = case x of\n+  LF1.BuiltinFunctionEQUAL_INT64 -> pure $ BEEqual BTInt64\n+  LF1.BuiltinFunctionEQUAL_NUMERIC -> pure $ BEEqual BTDecimal\n+  LF1.BuiltinFunctionEQUAL_TEXT -> pure $ BEEqual BTText\n+  LF1.BuiltinFunctionEQUAL_TIMESTAMP -> pure $ BEEqual BTTimestamp\n+  LF1.BuiltinFunctionEQUAL_DATE -> pure $ BEEqual BTDate\n+  LF1.BuiltinFunctionEQUAL_PARTY -> pure $ BEEqual BTParty\n+  LF1.BuiltinFunctionEQUAL_BOOL -> pure $ BEEqual BTBool\n+\n+  LF1.BuiltinFunctionLEQ_INT64 -> pure $ BELessEq BTInt64\n+  LF1.BuiltinFunctionLEQ_NUMERIC -> pure $ BELessEq BTDecimal\n+  LF1.BuiltinFunctionLEQ_TEXT    -> pure $ BELessEq BTText\n+  LF1.BuiltinFunctionLEQ_TIMESTAMP    -> pure $ BELessEq BTTimestamp\n+  LF1.BuiltinFunctionLEQ_DATE -> pure $ BELessEq BTDate\n+  LF1.BuiltinFunctionLEQ_PARTY -> pure $ BELessEq BTParty\n+\n+  LF1.BuiltinFunctionLESS_INT64 -> pure $ BELess BTInt64\n+  LF1.BuiltinFunctionLESS_NUMERIC -> pure $ BELess BTDecimal\n+  LF1.BuiltinFunctionLESS_TEXT    -> pure $ BELess BTText\n+  LF1.BuiltinFunctionLESS_TIMESTAMP    -> pure $ BELess BTTimestamp\n+  LF1.BuiltinFunctionLESS_DATE -> pure $ BELess BTDate\n+  LF1.BuiltinFunctionLESS_PARTY -> pure $ BELess BTParty\n+\n+  LF1.BuiltinFunctionGEQ_INT64 -> pure $ BEGreaterEq BTInt64\n+  LF1.BuiltinFunctionGEQ_NUMERIC -> pure $ BEGreaterEq BTDecimal\n+  LF1.BuiltinFunctionGEQ_TEXT    -> pure $ BEGreaterEq BTText\n+  LF1.BuiltinFunctionGEQ_TIMESTAMP    -> pure $ BEGreaterEq BTTimestamp\n+  LF1.BuiltinFunctionGEQ_DATE -> pure $ BEGreaterEq BTDate\n+  LF1.BuiltinFunctionGEQ_PARTY -> pure $ BEGreaterEq BTParty\n+\n+  LF1.BuiltinFunctionGREATER_INT64 -> pure $ BEGreater BTInt64\n+  LF1.BuiltinFunctionGREATER_NUMERIC -> pure $ BEGreater BTDecimal\n+  LF1.BuiltinFunctionGREATER_TEXT    -> pure $ BEGreater BTText\n+  LF1.BuiltinFunctionGREATER_TIMESTAMP    -> pure $ BEGreater BTTimestamp\n+  LF1.BuiltinFunctionGREATER_DATE -> pure $ BEGreater BTDate\n+  LF1.BuiltinFunctionGREATER_PARTY -> pure $ BEGreater BTParty\n+\n+  LF1.BuiltinFunctionTO_TEXT_INT64 -> pure $ BEToText BTInt64\n+  LF1.BuiltinFunctionTO_TEXT_NUMERIC -> pure $ BEToText BTDecimal\n+  LF1.BuiltinFunctionTO_TEXT_TEXT    -> pure $ BEToText BTText\n+  LF1.BuiltinFunctionTO_TEXT_TIMESTAMP    -> pure $ BEToText BTTimestamp\n+  LF1.BuiltinFunctionTO_TEXT_PARTY   -> pure $ BEToText BTParty\n+  LF1.BuiltinFunctionTO_TEXT_DATE -> pure $ BEToText BTDate\n+  LF1.BuiltinFunctionTEXT_FROM_CODE_POINTS -> pure BETextFromCodePoints\n+  LF1.BuiltinFunctionFROM_TEXT_PARTY -> pure BEPartyFromText\n+  LF1.BuiltinFunctionFROM_TEXT_INT64 -> pure BEInt64FromText\n+  LF1.BuiltinFunctionFROM_TEXT_NUMERIC -> pure BEDecimalFromText\n+  LF1.BuiltinFunctionTEXT_TO_CODE_POINTS -> pure BETextToCodePoints\n+  LF1.BuiltinFunctionTO_QUOTED_TEXT_PARTY -> pure BEPartyToQuotedText\n+\n+  LF1.BuiltinFunctionADD_NUMERIC   -> pure BEAddDecimal\n+  LF1.BuiltinFunctionSUB_NUMERIC   -> pure BESubDecimal\n+  LF1.BuiltinFunctionMUL_NUMERIC   -> pure BEMulDecimal\n+  LF1.BuiltinFunctionDIV_NUMERIC   -> pure BEDivDecimal\n+  LF1.BuiltinFunctionROUND_NUMERIC -> pure BERoundDecimal\n+  LF1.BuiltinFunctionCAST_NUMERIC  ->\n+    -- FixMe https://github.com/digital-asset/daml/issues/2289\n+    throwError $ ParseError \"builtin CAST_NUMERIC not supported\""
  },
  {
    "id" : "7058f30c-d2b0-4501-a4c8-fd96235cfdfe",
    "prId" : 1614,
    "comments" : [
      {
        "id" : "9c595106-0331-4fda-b787-78d3a2bab0fc",
        "parentId" : null,
        "author" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "body" : "I'd have probably made the PackageRefCtx more opaque and just passed around a `Int -> Maybe PackageId` function, abstracting away the Vector aspect.",
        "createdAt" : "2019-06-21T12:14:07Z",
        "updatedAt" : "2019-06-26T07:32:46Z",
        "lastEditedBy" : {
          "login" : "neil-da",
          "name" : "Neil Mitchell",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/35463327?u=0eb1719958bc6e449ec5e7df3a312fa566f5055d&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "8e5c4d16-1dc7-4d70-949d-ccae0ac63d2c",
        "parentId" : "9c595106-0331-4fda-b787-78d3a2bab0fc",
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "Makes sense. e0606d8f67743767bee63492fb49062729af391c",
        "createdAt" : "2019-06-21T12:38:15Z",
        "updatedAt" : "2019-06-26T07:32:46Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "cdebfafb9ac009ed15ea8adb801c50def398bf27",
    "line" : null,
    "diffHunk" : "@@ -501,111 +511,128 @@ decodePrim = pure . \\case\n   LF1.PrimTypeMAP -> BTMap\n   LF1.PrimTypeARROW -> BTArrow\n \n-decodeType :: LF1.Type -> Decode Type\n+decodeType :: LF1.Type -> DecodeImpl Type\n decodeType LF1.Type{..} = mayDecode \"typeSum\" typeSum $ \\case\n   LF1.TypeSumVar (LF1.Type_Var var args) ->\n     decodeWithArgs args $ TVar <$> decodeName TypeVarName var\n   LF1.TypeSumCon (LF1.Type_Con mbCon args) ->\n-    decodeWithArgs args $ TCon <$>  mayDecode \"type_ConTycon\" mbCon decodeTypeConName\n+    decodeWithArgs args $ TCon <$> mayDecode \"type_ConTycon\" mbCon decodeTypeConName\n   LF1.TypeSumPrim (LF1.Type_Prim (Proto.Enumerated (Right prim)) args) -> do\n-    decodeWithArgs args $ TBuiltin <$> decodePrim prim\n+    decodeWithArgs args $ TBuiltin <$> (decodeImpl $ decodePrim prim)\n   LF1.TypeSumPrim (LF1.Type_Prim (Proto.Enumerated (Left idx)) _args) ->\n-    Left (UnknownEnum \"Prim\" idx)\n+    throwError (UnknownEnum \"Prim\" idx)\n   LF1.TypeSumFun (LF1.Type_Fun params mbResult) -> do\n     mkTFuns\n       <$> mapM decodeType (V.toList params)\n       <*> mayDecode \"type_FunResult\" mbResult decodeType\n   LF1.TypeSumForall (LF1.Type_Forall binders mbBody) -> do\n     body <- mayDecode \"type_ForAllBody\" mbBody decodeType\n-    foldr TForall body <$> traverse decodeTypeVarWithKind (V.toList binders)\n+    decodeImpl $ foldr TForall body <$> traverse decodeTypeVarWithKind (V.toList binders)\n   LF1.TypeSumTuple (LF1.Type_Tuple flds) ->\n     TTuple <$> mapM (decodeFieldWithType FieldName) (V.toList flds)\n   where\n-    decodeWithArgs :: V.Vector LF1.Type -> Decode Type -> Decode Type\n+    decodeWithArgs :: V.Vector LF1.Type -> DecodeImpl Type -> DecodeImpl Type\n     decodeWithArgs args fun = foldl TApp <$> fun <*> traverse decodeType args\n \n \n-decodeFieldWithType :: (T.Text -> a) -> LF1.FieldWithType -> Decode (a, Type)\n+decodeFieldWithType :: (T.Text -> a) -> LF1.FieldWithType -> DecodeImpl (a, Type)\n decodeFieldWithType wrapName (LF1.FieldWithType name mbType) =\n   (,)\n     <$> decodeName wrapName name\n     <*> mayDecode \"fieldWithTypeType\" mbType decodeType\n \n-decodeFieldWithExpr :: LF1.FieldWithExpr -> Decode (FieldName, Expr)\n+decodeFieldWithExpr :: LF1.FieldWithExpr -> DecodeImpl (FieldName, Expr)\n decodeFieldWithExpr (LF1.FieldWithExpr name mbExpr) =\n   (,)\n     <$> decodeName FieldName name\n     <*> mayDecode \"fieldWithExprExpr\" mbExpr decodeExpr\n \n-decodeTypeConApp :: LF1.Type_Con -> Decode TypeConApp\n+decodeTypeConApp :: LF1.Type_Con -> DecodeImpl TypeConApp\n decodeTypeConApp LF1.Type_Con{..} =\n   TypeConApp\n     <$> mayDecode \"typeConAppTycon\" type_ConTycon decodeTypeConName\n     <*> mapM decodeType (V.toList type_ConArgs)\n \n-decodeTypeConName :: LF1.TypeConName -> Decode (Qualified TypeConName)\n+decodeTypeConName :: LF1.TypeConName -> DecodeImpl (Qualified TypeConName)\n decodeTypeConName LF1.TypeConName{..} = do\n   (pref, mname) <- mayDecode \"typeConNameModule\" typeConNameModule decodeModuleRef\n   con <- mayDecode \"typeConNameName\" typeConNameName (decodeDottedName TypeConName)\n   pure $ Qualified pref mname con\n \n-decodePackageRef :: LF1.PackageRef -> Decode PackageRef\n+decodePackageId :: TL.Text -> PackageId\n+decodePackageId = PackageId . TL.toStrict\n+\n+-- the invariant *does not* hold: pkid `cmp` opkid = index pkid `cmp` index opkid\n+-- it is only true internally for one particular encoder implementation\n+type PackageRefCtx = V.Vector PackageId"
  },
  {
    "id" : "ff5d6c49-0220-459f-a9c2-f1d506ee1766",
    "prId" : 1614,
    "comments" : [
      {
        "id" : "02c067df-bf45-4548-84fd-94da7d404dd5",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Can we please spell this out as `MonadDecode`?",
        "createdAt" : "2019-06-21T14:19:26Z",
        "updatedAt" : "2019-06-26T07:32:46Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "c939ac91-a2e6-4b4e-b50c-99b43db57da2",
        "parentId" : "02c067df-bf45-4548-84fd-94da7d404dd5",
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "Sure. a7373a5dc882c784862c0d8f44702bb925005776 ",
        "createdAt" : "2019-06-24T09:45:58Z",
        "updatedAt" : "2019-06-26T07:32:46Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "cdebfafb9ac009ed15ea8adb801c50def398bf27",
    "line" : null,
    "diffHunk" : "@@ -12,20 +13,28 @@ module DA.Daml.LF.Proto3.DecodeV1\n import           DA.Daml.LF.Ast as LF\n import           DA.Daml.LF.Proto3.Error\n import Control.Monad\n+import Control.Monad.Error.Class (MonadError(throwError))\n+import Control.Monad.Reader (ReaderT, ask, runReaderT)\n import Text.Read\n import           Data.List\n import           DA.Daml.LF.Mangling\n import qualified Da.DamlLf1 as LF1\n-import           Data.Either.Combinators (mapLeft)\n import qualified Data.NameMap as NM\n import qualified Data.Text as T\n import qualified Data.Text.Lazy as TL\n import qualified Data.Vector as V\n import qualified Proto3.Suite as Proto\n \n+-- internal functions that *implement* decoding\n+type DecodeImpl = ReaderT PackageRefCtx Decode\n+type MDecode = MonadError Error"
  },
  {
    "id" : "dce8119a-09f9-44ff-874c-ca516ab35b32",
    "prId" : 1614,
    "comments" : [
      {
        "id" : "f5132f94-c169-476d-b517-b36971e21c2f",
        "parentId" : null,
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Why not just call this `Decode`? Together with `MonadDecode` this would fit `mtl`'s `X` vs `MonadX` naming scheme.",
        "createdAt" : "2019-06-21T14:20:37Z",
        "updatedAt" : "2019-06-26T07:32:46Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "77e6fbe4-781c-440c-a127-d12f48fe6422",
        "parentId" : "f5132f94-c169-476d-b517-b36971e21c2f",
        "author" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "body" : "`MonadDecode` reflects only `Decode`, not this one (which also includes `MonadReader PackageRefCtx`). Also, `Decode` is in the public interface, whereas the additional elements of `DecodeImpl` are not.",
        "createdAt" : "2019-06-24T09:47:35Z",
        "updatedAt" : "2019-06-26T07:32:46Z",
        "lastEditedBy" : {
          "login" : "S11001001",
          "name" : "Stephen Compall",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/219186?u=7b27ed58a578fe7d4983d1bab28c2f5608ed8739&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "cdebfafb9ac009ed15ea8adb801c50def398bf27",
    "line" : 26,
    "diffHunk" : "@@ -12,20 +13,28 @@ module DA.Daml.LF.Proto3.DecodeV1\n import           DA.Daml.LF.Ast as LF\n import           DA.Daml.LF.Proto3.Error\n import Control.Monad\n+import Control.Monad.Error.Class (MonadError(throwError))\n+import Control.Monad.Reader (ReaderT, ask, runReaderT)\n import Text.Read\n import           Data.List\n import           DA.Daml.LF.Mangling\n import qualified Da.DamlLf1 as LF1\n-import           Data.Either.Combinators (mapLeft)\n import qualified Data.NameMap as NM\n import qualified Data.Text as T\n import qualified Data.Text.Lazy as TL\n import qualified Data.Vector as V\n import qualified Proto3.Suite as Proto\n \n+-- internal functions that *implement* decoding\n+type DecodeImpl = ReaderT PackageRefCtx Decode"
  },
  {
    "id" : "1ec9192f-9c40-475a-bb28-6398a230280e",
    "prId" : 1397,
    "comments" : [
      {
        "id" : "8bf0604d-e180-4d84-826f-e26da4a38044",
        "parentId" : null,
        "author" : {
          "login" : "bitonic",
          "name" : "Francesco Mazzoli",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/556090?v=4"
        },
        "body" : "better error message",
        "createdAt" : "2019-05-27T11:22:25Z",
        "updatedAt" : "2019-05-29T11:46:15Z",
        "lastEditedBy" : {
          "login" : "bitonic",
          "name" : "Francesco Mazzoli",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/556090?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "982089cd-1bf7-4603-8c26-8e119485f56f",
        "parentId" : "8bf0604d-e180-4d84-826f-e26da4a38044",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "done",
        "createdAt" : "2019-05-27T12:37:23Z",
        "updatedAt" : "2019-05-29T11:46:15Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "5ce95b727edd6150f719d1c4c22df4bde71e6ef6",
    "line" : null,
    "diffHunk" : "@@ -76,6 +76,9 @@ decodeDataCons = \\case\n     DataRecord <$> mapM (decodeFieldWithType FieldName) (V.toList fs)\n   LF1.DefDataTypeDataConsVariant (LF1.DefDataType_Fields fs) ->\n     DataVariant <$> mapM (decodeFieldWithType VariantConName) (V.toList fs)\n+  LF1.DefDataTypeDataConsEnum _ ->\n+   -- FixMe (RH) https://github.com/digital-asset/daml/issues/105\n+    Left (ParseError \"NotImplemented\")"
  },
  {
    "id" : "4890a101-c374-46e9-a72f-bb3411f7825c",
    "prId" : 1397,
    "comments" : [
      {
        "id" : "089fb514-bd91-4c4a-a6bc-e06055ecb419",
        "parentId" : null,
        "author" : {
          "login" : "bitonic",
          "name" : "Francesco Mazzoli",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/556090?v=4"
        },
        "body" : "better error message",
        "createdAt" : "2019-05-27T11:22:32Z",
        "updatedAt" : "2019-05-29T11:46:15Z",
        "lastEditedBy" : {
          "login" : "bitonic",
          "name" : "Francesco Mazzoli",
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/556090?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "4bd6f88b-78e2-458f-8c8a-7bd9a15e2d2b",
        "parentId" : "089fb514-bd91-4c4a-a6bc-e06055ecb419",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "done",
        "createdAt" : "2019-05-27T12:37:27Z",
        "updatedAt" : "2019-05-29T11:46:15Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "14708ce1-1fac-4e0c-b9ce-6642ea8ac350",
        "parentId" : "089fb514-bd91-4c4a-a6bc-e06055ecb419",
        "author" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "body" : "Can you please leave the string \"#105\" in this error message and all others which refer to enums not being implement in `damlc` yet. I'd like to grep for this string when I implement support for enum types.",
        "createdAt" : "2019-05-27T21:50:12Z",
        "updatedAt" : "2019-05-29T11:46:15Z",
        "lastEditedBy" : {
          "login" : "hurryabit",
          "name" : "Martin Huschenbett",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/11665611?u=7dbd00d5e7ea53919ed31dc4200f602ebca91c8f&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "ce7ba69e-6111-4757-b45a-4155a2a5d826",
        "parentId" : "089fb514-bd91-4c4a-a6bc-e06055ecb419",
        "author" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "body" : "I forget this one. Thanks for reporting.\r\n\r\n",
        "createdAt" : "2019-05-28T07:02:06Z",
        "updatedAt" : "2019-05-29T11:46:15Z",
        "lastEditedBy" : {
          "login" : "remyhaemmerle-da",
          "name" : "Remy",
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/45566104?u=10d0caf8150a686217852f90e91314a4de3239a9&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "5ce95b727edd6150f719d1c4c22df4bde71e6ef6",
    "line" : null,
    "diffHunk" : "@@ -287,6 +290,8 @@ decodeExprSum exprSum = mayDecode \"exprSum\" exprSum $ \\case\n       <$> mayDecode \"Expr_VariantConTycon\" mbTycon decodeTypeConApp\n       <*> decodeName VariantConName variant\n       <*> mayDecode \"Expr_VariantConVariantArg\" mbArg decodeExpr\n+  LF1.ExprSumEnumCon _ ->\n+    Left (ParseError \"FixMe\")"
  }
]