[
  {
    "id" : "6c225e8e-aa11-4379-a5cc-3c12df907f0c",
    "prId" : 5002,
    "comments" : [
      {
        "id" : "66b9cede-61b1-44d4-8f77-247cf174c406",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "```suggestion\r\nThe instructions below have been tested on a macOS Catalina host to create a\r\n```",
        "createdAt" : "2020-03-16T10:50:24Z",
        "updatedAt" : "2020-04-14T09:45:35Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "8633f39f4d75d3dff0a32c1318486b32d3ac55d3",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,139 @@\n+# Versions\n+\n+The isntructions below have been tested on a macOS Catalina host to create a"
  },
  {
    "id" : "59c24b5d-8c2a-4365-819b-73db6d758de2",
    "prId" : 5002,
    "comments" : [
      {
        "id" : "febd2c36-57c8-49dd-9235-b96748f918bb",
        "parentId" : null,
        "author" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "body" : "```suggestion\r\ndownloading), you can create the base image (\"Vagrant box\") using the following\r\n```\r\nUnless Iâ€™m missing something and vabrant boxes are a thing :slightly_smiling_face: ",
        "createdAt" : "2020-03-16T10:58:02Z",
        "updatedAt" : "2020-04-14T09:45:35Z",
        "lastEditedBy" : {
          "login" : "cocreature",
          "name" : "Moritz Kiefer",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1313584?u=7864421488a876940b33e865c4b0091925617ca7&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "8633f39f4d75d3dff0a32c1318486b32d3ac55d3",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,139 @@\n+# Versions\n+\n+The isntructions below have been tested on a macOS Catalina host to create a\n+macOS Catalina guest. While I believe it is possible to _run_ different\n+combinations of the guest/host macOS versions, the documentation for the\n+macinbox project are pretty clear that it is not possible to _create_ Catalina\n+images from earlier OSes, nor earlier OS images from a Catalina host.\n+\n+# Installing tools\n+\n+## macOS Installer App\n+\n+First thing to do is start the download of the macOS installer app from the App\n+Store. This will take a while as the installer is rather large, but you can do\n+most of the other steps below while the download is going on.\n+\n+I have tested these steps on macOS Catalina 10.15.3 with a Catalina installer\n+created on 2020-01-23 (15.1.00).\n+\n+## XCode CLI Tools\n+\n+Run\n+\n+```bash\n+xcode-select --install\n+```\n+\n+## VirtualBox\n+\n+Download and install\n+[https://download.virtualbox.org/virtualbox/6.1.4/VirtualBox-6.1.4-136177-OSX.dmg](VirtualBox),\n+including the\n+[https://download.virtualbox.org/virtualbox/6.1.4/Oracle_VM_VirtualBox_Extension_Pack-6.1.4.vbox-extpack](extension\n+\n+Alternatively, it can be installed from homebrew using:\n+\n+```bash\n+brew cask install virtualbox\n+```\n+\n+**This will require sudo access.**\n+\n+pack). The extension pack has to be manually added after the installation of\n+VirtualBox; this can be done through the UI, or running:\n+\n+```bash\n+sudo VBoxManage extpack install /path/to/download/Oracle_VM_VirtualBox_Extension_Pack-6.1.4.vbox-extpack\n+```\n+\n+These instructions have been tested against 6.1.4.\n+\n+## Vagrant\n+\n+To easily manage the guest VM from scripts, we will be using [Vagrant](https://releases.hashicorp.com/vagrant/2.2.7/vagrant_2.2.7_x86_64.dmg).\n+\n+Alternatively, installing with homebrew:\n+\n+```\n+brew cask install vagrant\n+```\n+\n+These instructions have been tested with 2.2.7.\n+\n+## rbenv\n+\n+The underlying scripts to create the \"blank\" macOS guest machine are written in\n+Ruby, so we need to install some version of Ruby. Ruby does come with macOS,\n+and has installers in homebrew, but for the sake of stability we are going to\n+go with `rbenv`, so we can pin down the exact Ruby version we use.\n+\n+On the host machine, for the user that is going to manage the guest VM, add the\n+following to the relevant shell init file (`~/.zshrc` by default):\n+\n+```bash\n+if [ -d $HOME/.rbenv/shims ]; then\n+    export PATH=\"$HOME/.rbenv/shims:$PATH\"\n+fi\n+if [ -d $HOME/.rbenv/bin ]; then\n+    export PATH=\"$HOME/.rbenv/bin:$PATH\"\n+fi\n+```\n+\n+then run the following:\n+\n+```bash\n+git clone https://github.com/rbenv/rbenv.git ~/.rbenv\n+cd ~/.rbenv\n+git checkout c6324ff45af33a194f5658a1c6322a94da145f98\n+```\n+\n+Note: this is the commit I tested these instructions with; I have no reason to\n+believe the `master` branch is bad.\n+\n+In a new terminal (to pick up the new PATH), run:\n+\n+```bash\n+mkdir -p \"$(rbenv root)\"/plugins\n+git clone https://github.com/rbenv/ruby-build.git \"$(rbenv root)\"/plugins/ruby-build\n+cd \"$(rbenv root)/plugins/ruby-build\"\n+git checkout 0ef5e055659230e2fb2ae9b0928f70dc27c1c136\n+```\n+\n+where, again, this is the commit I tested with, so I am providing it for\n+maximum reproducibility, but I have no reason to mistrust the master branch.\n+\n+Finally, run:\n+```bash\n+rbenv install 2.7.0\n+```\n+\n+## macinbox\n+\n+From this directory, run:\n+\n+```bash\n+gem install macinbox -v 4.0.0\n+```\n+\n+The version I tested with is 4.0.0.\n+\n+# Creating base image\n+\n+After all the tools are installed (and the macOS installer has finished\n+downloading), you can create the base image (\"Vabrant box\") using the following"
  },
  {
    "id" : "127fab21-18f6-478b-9a3e-378d1569488d",
    "prId" : 5002,
    "comments" : [
      {
        "id" : "849e2264-3416-4df6-b73a-c958c4d11ddb",
        "parentId" : null,
        "author" : {
          "login" : "nycnewman",
          "name" : "Edward Newman",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/16567023?v=4"
        },
        "body" : "Needs to include a command to change default version to 2.7.0 or it still uses system version and you get a WritePermission error on next step",
        "createdAt" : "2020-04-10T20:18:56Z",
        "updatedAt" : "2020-04-14T09:45:35Z",
        "lastEditedBy" : {
          "login" : "nycnewman",
          "name" : "Edward Newman",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/16567023?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "53712139-e0ea-4998-ad2f-19663b50112b",
        "parentId" : "849e2264-3416-4df6-b73a-c958c4d11ddb",
        "author" : {
          "login" : "garyverhaegen-da",
          "name" : "Gary Verhaegen",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/45561385?u=eb17386ea66edbd0cd449e33b2d291bf5a1b51cb&v=4"
        },
        "body" : "This should be done the modification to your shell init script on line 97 above. Have you tried in a new terminal?",
        "createdAt" : "2020-04-13T08:52:29Z",
        "updatedAt" : "2020-04-14T09:45:35Z",
        "lastEditedBy" : {
          "login" : "garyverhaegen-da",
          "name" : "Gary Verhaegen",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/45561385?u=eb17386ea66edbd0cd449e33b2d291bf5a1b51cb&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "c6f93709-9174-409b-9818-50b968c8ef0a",
        "parentId" : "849e2264-3416-4df6-b73a-c958c4d11ddb",
        "author" : {
          "login" : "garyverhaegen-da",
          "name" : "Gary Verhaegen",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/45561385?u=eb17386ea66edbd0cd449e33b2d291bf5a1b51cb&v=4"
        },
        "body" : "Ah, I see. It looks like I forgot a file. Added. Thanks for pointing out!",
        "createdAt" : "2020-04-13T09:55:04Z",
        "updatedAt" : "2020-04-14T09:45:35Z",
        "lastEditedBy" : {
          "login" : "garyverhaegen-da",
          "name" : "Gary Verhaegen",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/45561385?u=eb17386ea66edbd0cd449e33b2d291bf5a1b51cb&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "8633f39f4d75d3dff0a32c1318486b32d3ac55d3",
    "line" : 132,
    "diffHunk" : "@@ -0,0 +1,173 @@\n+# Note on major macOS versions\n+\n+The instructions below have been tested on a macOS Catalina host to create a\n+macOS Catalina guest. While I believe it is possible to _run_ different\n+combinations of the guest/host macOS versions, the documentation for the\n+macinbox project is pretty clear that it is not possible to _create_ Catalina\n+images from earlier OSes, nor earlier OS images from a Catalina host.\n+\n+As I only have access to Catalina host systems, I have not been able to test\n+older versions.\n+\n+# Installing tools\n+\n+## macOS Installer App\n+\n+First thing to do is start the download of the macOS installer app from the App\n+Store. This will take a while as the installer is rather large, but you can do\n+most of the other steps below while the download is going on.\n+\n+I have tested these steps on macOS Catalina 10.15.3 with a Catalina installer\n+created on 2020-01-23 (15.1.00).\n+\n+## Homebrew\n+\n+Homebrew is _not_ required for these instructions, but it can make some of the\n+following steps easier to automate. Given that, on the one hand, some steps\n+have to be done manually through the UI anyway, and, on the other hand, this\n+process really only needs to be done once, on one machine, there is little\n+value in installing Homebrew for this process. However, in case you already\n+have Homebrew installed, I do mention the corresponding commands when they\n+exist.\n+\n+Note that if you have Homebrew installed, you also already have the CLI tools\n+and can skip the next step.\n+\n+## XCode CLI Tools\n+\n+Within a graphical environment, run:\n+\n+```bash\n+xcode-select --install\n+```\n+\n+This will open a graphical dialog to install the XCode Command-Line Tools.\n+\n+## VirtualBox\n+\n+Download and install\n+[https://download.virtualbox.org/virtualbox/6.1.4/VirtualBox-6.1.4-136177-OSX.dmg](VirtualBox),\n+including the\n+[https://download.virtualbox.org/virtualbox/6.1.4/Oracle_VM_VirtualBox_Extension_Pack-6.1.4.vbox-extpack](extension\n+pack).\n+\n+Alternatively, it can be installed from Homebrew using:\n+\n+```bash\n+brew cask install virtualbox\n+```\n+\n+**This will require sudo access.**\n+\n+The extension pack has to be manually added after the installation of\n+VirtualBox; this can be done through the UI, or running:\n+\n+```bash\n+sudo VBoxManage extpack install /path/to/download/Oracle_VM_VirtualBox_Extension_Pack-6.1.4.vbox-extpack\n+```\n+\n+These instructions have been tested against 6.1.4.\n+\n+## Vagrant\n+\n+To easily manage the guest VM from scripts, we will be using [Vagrant](https://releases.hashicorp.com/vagrant/2.2.7/vagrant_2.2.7_x86_64.dmg).\n+\n+Alternatively, installing with Homebrew:\n+\n+```\n+brew cask install vagrant\n+```\n+\n+These instructions have been tested with 2.2.7.\n+\n+## rbenv\n+\n+The underlying scripts to create the \"blank\" macOS guest machine are written in\n+Ruby, so we need to install some version of Ruby. Ruby does come with macOS,\n+and has installers in Homebrew, but for the sake of stability we are going to\n+go with `rbenv`, so we can pin down the exact Ruby version we use. This also\n+has the advantage of not needing root access to install the `macinbox` gem.\n+(Though `sudo` still needs to be used to run it.)\n+\n+On the host machine, for the user that is going to manage the guest VM, add the\n+following to the relevant shell init file (`~/.zshrc` by default):\n+\n+```bash\n+if [ -d $HOME/.rbenv/shims ]; then\n+    export PATH=\"$HOME/.rbenv/shims:$PATH\"\n+fi\n+if [ -d $HOME/.rbenv/bin ]; then\n+    export PATH=\"$HOME/.rbenv/bin:$PATH\"\n+fi\n+```\n+\n+then run the following:\n+\n+```bash\n+git clone https://github.com/rbenv/rbenv.git ~/.rbenv\n+cd ~/.rbenv\n+git checkout c6324ff45af33a194f5658a1c6322a94da145f98\n+```\n+\n+Note: this is the commit I tested these instructions with; I have no reason to\n+believe the `master` branch is bad.\n+\n+In a new terminal (to pick up the new PATH), run:\n+\n+```bash\n+mkdir -p \"$(rbenv root)\"/plugins\n+git clone https://github.com/rbenv/ruby-build.git \"$(rbenv root)\"/plugins/ruby-build\n+cd \"$(rbenv root)/plugins/ruby-build\"\n+git checkout 0ef5e055659230e2fb2ae9b0928f70dc27c1c136\n+```\n+\n+where, again, this is the commit I tested with, so I am providing it for\n+maximum reproducibility, but I have no reason to mistrust the master branch.\n+\n+Finally, run:\n+```bash\n+rbenv install 2.7.0\n+```\n+\n+which installs Ruby 2.7.0 for the current user."
  }
]